public class ITestS3AEncryptionWithDefaultS3Settings extends        AbstractTestS3AEncryption {  @Override  public void setup() throws Exception {    super.setup();        S3AFileSystem fs = getFileSystem();    Configuration c = fs.getConf();    skipIfEncryptionNotSet(c, getSSEAlgorithm());  }  @SuppressWarnings("deprecation")  @Override  protected void patchConfigurationEncryptionSettings(      final Configuration conf) {    removeBaseAndBucketOverrides(conf,        S3_ENCRYPTION_ALGORITHM,        SERVER_SIDE_ENCRYPTION_ALGORITHM);    conf.set(S3_ENCRYPTION_ALGORITHM,            getSSEAlgorithm().getMethod());  }    @Override  protected S3AEncryptionMethods getSSEAlgorithm() {    return S3AEncryptionMethods.NONE;  }    @Override  protected void assertEncrypted(Path path) throws IOException {    S3AFileSystem fs = getFileSystem();    Configuration c = fs.getConf();    String kmsKey = getS3EncryptionKey(getTestBucketName(c), c);    EncryptionTestUtils.assertEncrypted(fs, path, SSE_KMS, kmsKey);  }  @Override  @Ignore  @Test  public void testEncryptionSettingPropagation() throws Throwable {  }  @Override  @Ignore  @Test  public void testEncryption() throws Throwable {  }    @Override  public void testEncryptionOverRename() throws Throwable {    S3AFileSystem fs = getFileSystem();    Path path = path(getMethodName() + "find-encryption-algo");    ContractTestUtils.touch(fs, path);    String sseAlgorithm = fs.getObjectMetadata(path).getSSEAlgorithm();    if(StringUtils.isBlank(sseAlgorithm) ||            !sseAlgorithm.equals(AWS_KMS_SSE_ALGORITHM)) {      skip("Test bucket is not configured with " + AWS_KMS_SSE_ALGORITHM);    }    super.testEncryptionOverRename();  }  @Test  public void testEncryptionOverRename2() throws Throwable {    S3AFileSystem fs = getFileSystem();            Path src = path(createFilename(1024));    byte[] data = dataset(1024, 'a', 'z');    EncryptionSecrets secrets = fs.getEncryptionSecrets();    validateEncryptionSecrets(secrets);    writeDataset(fs, src, data, data.length, 1024 * 1024, true);    ContractTestUtils.verifyFileContents(fs, src, data);        Configuration fs2Conf = new Configuration(fs.getConf());    fs2Conf.set(S3_ENCRYPTION_ALGORITHM,        S3AEncryptionMethods.SSE_KMS.getMethod());    try (FileSystem kmsFS = FileSystem.newInstance(fs.getUri(), fs2Conf)) {      Path targetDir = path("target");      kmsFS.mkdirs(targetDir);      ContractTestUtils.rename(kmsFS, src, targetDir);      Path renamedFile = new Path(targetDir, src.getName());      ContractTestUtils.verifyFileContents(fs, renamedFile, data);      String kmsKey = getS3EncryptionKey(getTestBucketName(fs2Conf), fs2Conf);            EncryptionTestUtils.assertEncrypted(fs, renamedFile, SSE_KMS, kmsKey);    }  }}