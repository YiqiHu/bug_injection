
package org.apache.hadoop.registry.server.dns;

import org.xbill.DNS.DClass;
import org.xbill.DNS.NXTRecord;
import org.xbill.DNS.Name;
import org.xbill.DNS.RRset;
import org.xbill.DNS.Record;
import org.xbill.DNS.SetResponse;
import org.xbill.DNS.Type;
import org.xbill.DNS.Zone;
import org.xbill.DNS.ZoneTransferException;
import org.xbill.DNS.ZoneTransferIn;

import java.io.IOException;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;


public class SecureableZone extends Zone {
  private List<Record> records;

  
  public SecureableZone(ZoneTransferIn xfrin)
      throws IOException, ZoneTransferException {
    super(xfrin);
  }

  
  public SecureableZone(Name zone, int dclass, String remote)
      throws IOException, ZoneTransferException {
    super(zone, dclass, remote);
  }

  
  public SecureableZone(Name zone, String file) throws IOException {
    super(zone, file);
  }

  
  public SecureableZone(Name zone, Record[] records)
      throws IOException {
    super(zone, records);
  }

  
  @Override public void addRecord(Record r) {
    if (records == null) {
      records = new ArrayList<Record>();
    }
    super.addRecord(r);
    records.add(r);
  }

  
  @Override public void removeRecord(Record r) {
    if (records == null) {
      records = new ArrayList<Record>();
    }
    super.removeRecord(r);
    records.remove(r);
  }

  
  @SuppressWarnings({"unchecked"})
  public Record getNXTRecord(Record queryRecord, Zone zone) {
    Collections.sort(records);

    int index = Collections.binarySearch(records, queryRecord,
        new Comparator<Record>() {
          @Override public int compare(Record r1, Record r2) {
            return r1.compareTo(r2);
          }
        });
    if (index >= 0) {
      return null;
    }
    index = -index - 1;
    if (index >= records.size()) {
      index = records.size() - 1;
    }
    Record base = records.get(index);
    SetResponse sr = zone.findRecords(base.getName(), Type.ANY);
    BitSet bitMap = new BitSet();
    bitMap.set(Type.NXT);
    for (RRset rRset : sr.answers()) {
      int typeCode = rRset.getType();
      if (typeCode > 0 && typeCode < 128) {
        bitMap.set(typeCode);
      }
    }
    return new NXTRecord(base.getName(), DClass.IN, zone.getSOA().getMinimum(),
        queryRecord.getName(), bitMap);
  }
}
