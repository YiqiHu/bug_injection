public class ITestS3AFileContextStatistics extends FCStatisticsBaseTest {  private static final Logger LOG =      LoggerFactory.getLogger(STSClientFactory.class);  private Path testRootPath;  private Configuration conf;  @Before  public void setUp() throws Exception {    conf = new Configuration();    fc = S3ATestUtils.createTestFileContext(conf);    testRootPath = fileContextTestHelper.getTestRootPath(fc, "test");    fc.mkdir(testRootPath,        FileContext.DEFAULT_PERM, true);    FileContext.clearStatistics();  }  @After  public void tearDown() throws Exception {    S3ATestUtils.callQuietly(LOG,        () -> fc != null && fc.delete(testRootPath, true));  }  @Override  protected void verifyReadBytes(FileSystem.Statistics stats) {        Assert.assertEquals(2 * blockSize, stats.getBytesRead());  }    @Override  protected void verifyWrittenBytes(FileSystem.Statistics stats)      throws IOException {        long expectedBlockSize = blockSize;    if (S3AEncryptionMethods.CSE_KMS.getMethod()        .equals(getEncryptionAlgorithm(getTestBucketName(conf), conf)            .getMethod())) {      String keyId = getS3EncryptionKey(getTestBucketName(conf), conf);            expectedBlockSize += CSE_PADDING_LENGTH + keyId.getBytes().length +          KMS_KEY_GENERATION_REQUEST_PARAMS_BYTES_WRITTEN;    }    Assert.assertEquals("Mismatch in bytes written", expectedBlockSize,        stats.getBytesWritten());  }  @Override  protected URI getFsUri() {    return fc.getHomeDirectory().toUri();  }}