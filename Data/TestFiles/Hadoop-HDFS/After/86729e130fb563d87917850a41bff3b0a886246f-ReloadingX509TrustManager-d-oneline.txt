public final class ReloadingX509TrustManager implements X509TrustManager {  static final Logger LOG =      LoggerFactory.getLogger(ReloadingX509TrustManager.class);  static final String RELOAD_ERROR_MESSAGE =      "Could not load truststore (keep using existing one) : ";  private String type;  private String password;  private AtomicReference<X509TrustManager> trustManagerRef;    public ReloadingX509TrustManager(String type, String location, String password)    throws IOException, GeneralSecurityException {    this.type = type;    this.password = password;    trustManagerRef = new AtomicReference<X509TrustManager>();    trustManagerRef.set(loadTrustManager(Paths.get(location)));  }  @Override  public void checkClientTrusted(X509Certificate[] chain, String authType)    throws CertificateException {    X509TrustManager tm = trustManagerRef.get();    if (tm != null) {      tm.checkClientTrusted(chain, authType);    } else {      throw new CertificateException("Unknown client chain certificate: " +                                     chain[0].toString());    }  }  @Override  public void checkServerTrusted(X509Certificate[] chain, String authType)    throws CertificateException {    X509TrustManager tm = trustManagerRef.get();    if (tm != null) {      tm.checkServerTrusted(chain, authType);    } else {      throw new CertificateException("Unknown server chain certificate: " +                                     chain[0].toString());    }  }  private static final X509Certificate[] EMPTY = new X509Certificate[0];  @Override  public X509Certificate[] getAcceptedIssuers() {    X509Certificate[] issuers = EMPTY;    X509TrustManager tm = trustManagerRef.get();    if (tm != null) {      issuers = tm.getAcceptedIssuers();    }    return issuers;  }  public ReloadingX509TrustManager loadFrom(Path path) {    try {      this.trustManagerRef.set(loadTrustManager(path));    } catch (Exception ex) {            throw new RuntimeException(RELOAD_ERROR_MESSAGE, ex);    }    return this;  }  X509TrustManager loadTrustManager(Path path)  throws IOException, GeneralSecurityException {    X509TrustManager trustManager = null;    KeyStore ks = KeyStore.getInstance(type);    InputStream in = Files.newInputStream(path);    try {      ks.load(in, (password == null) ? null : password.toCharArray());      LOG.debug("Loaded truststore '" + path + "'");    } finally {      in.close();    }    TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(        SSLFactory.TRUST_MANAGER_SSLCERTIFICATE);    trustManagerFactory.init(ks);    TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();    for (TrustManager trustManager1 : trustManagers) {      if (trustManager1 instanceof X509TrustManager) {        trustManager = (X509TrustManager) trustManager1;        break;      }    }    return trustManager;  }}