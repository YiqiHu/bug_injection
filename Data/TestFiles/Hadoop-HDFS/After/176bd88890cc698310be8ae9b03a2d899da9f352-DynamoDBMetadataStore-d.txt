

package org.apache.hadoop.fs.s3a.s3guard;

import javax.annotation.Nullable;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.UncheckedIOException;
import java.net.URI;
import java.nio.file.AccessDeniedException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import java.util.stream.Collectors;

import com.amazonaws.AmazonServiceException;
import com.amazonaws.auth.AWSCredentialsProvider;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.document.BatchWriteItemOutcome;
import com.amazonaws.services.dynamodbv2.document.DynamoDB;
import com.amazonaws.services.dynamodbv2.document.Item;
import com.amazonaws.services.dynamodbv2.document.ItemCollection;
import com.amazonaws.services.dynamodbv2.document.PrimaryKey;
import com.amazonaws.services.dynamodbv2.document.PutItemOutcome;
import com.amazonaws.services.dynamodbv2.document.QueryOutcome;
import com.amazonaws.services.dynamodbv2.document.ScanOutcome;
import com.amazonaws.services.dynamodbv2.document.Table;
import com.amazonaws.services.dynamodbv2.document.TableWriteItems;
import com.amazonaws.services.dynamodbv2.document.internal.IteratorSupport;
import com.amazonaws.services.dynamodbv2.document.spec.GetItemSpec;
import com.amazonaws.services.dynamodbv2.document.spec.QuerySpec;
import com.amazonaws.services.dynamodbv2.document.utils.ValueMap;
import com.amazonaws.services.dynamodbv2.model.AmazonDynamoDBException;
import com.amazonaws.services.dynamodbv2.model.ProvisionedThroughputDescription;
import com.amazonaws.services.dynamodbv2.model.TableDescription;
import com.amazonaws.services.dynamodbv2.model.WriteRequest;
import org.apache.hadoop.thirdparty.com.google.common.annotations.VisibleForTesting;
import org.apache.hadoop.thirdparty.com.google.common.base.Preconditions;
import org.apache.hadoop.thirdparty.com.google.common.collect.Lists;
import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.ListeningExecutorService;
import org.apache.hadoop.thirdparty.com.google.common.util.concurrent.MoreExecutors;;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.tuple.Pair;
import org.apache.hadoop.classification.InterfaceAudience;
import org.apache.hadoop.classification.InterfaceStability;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileStatus;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.fs.PathIOException;
import org.apache.hadoop.fs.RemoteIterator;
import org.apache.hadoop.util.functional.CallableRaisingIOE;
import org.apache.hadoop.util.functional.RemoteIterators;
import org.apache.hadoop.fs.s3a.AWSCredentialProviderList;
import org.apache.hadoop.fs.s3a.AWSServiceThrottledException;
import org.apache.hadoop.fs.s3a.Constants;
import org.apache.hadoop.fs.s3a.Invoker;
import org.apache.hadoop.fs.s3a.Retries;
import org.apache.hadoop.fs.s3a.S3AFileStatus;
import org.apache.hadoop.fs.s3a.S3AFileSystem;
import org.apache.hadoop.fs.s3a.S3AUtils;
import org.apache.hadoop.fs.s3a.Tristate;
import org.apache.hadoop.fs.s3a.auth.RoleModel;
import org.apache.hadoop.fs.s3a.auth.RolePolicies;
import org.apache.hadoop.fs.s3a.auth.delegation.AWSPolicyProvider;
import org.apache.hadoop.fs.s3a.impl.StoreContext;
import org.apache.hadoop.io.retry.RetryPolicies;
import org.apache.hadoop.io.retry.RetryPolicy;
import org.apache.hadoop.security.UserGroupInformation;
import org.apache.hadoop.util.BlockingThreadPoolExecutorService;
import org.apache.hadoop.util.DurationInfo;
import org.apache.hadoop.util.ReflectionUtils;

import static org.apache.hadoop.fs.s3a.Constants.*;
import static org.apache.hadoop.fs.s3a.S3AUtils.*;
import static org.apache.hadoop.fs.s3a.auth.RolePolicies.allowAllDynamoDBOperations;
import static org.apache.hadoop.fs.s3a.auth.RolePolicies.allowS3GuardClientOperations;
import static org.apache.hadoop.fs.s3a.impl.CallableSupplier.submit;
import static org.apache.hadoop.fs.s3a.impl.CallableSupplier.waitForCompletion;
import static org.apache.hadoop.fs.s3a.s3guard.PathMetadataDynamoDBTranslation.*;
import static org.apache.hadoop.fs.s3a.s3guard.PathOrderComparators.TOPMOST_PM_LAST;
import static org.apache.hadoop.fs.s3a.s3guard.S3Guard.*;


@SuppressWarnings("SynchronizationOnLocalVariableOrMethodParameter")
@InterfaceAudience.Private
@InterfaceStability.Evolving
public class DynamoDBMetadataStore implements MetadataStore,
    AWSPolicyProvider {
  public static final Logger LOG = LoggerFactory.getLogger(
      DynamoDBMetadataStore.class);

  
  public static final String OPERATIONS_LOG_NAME =
      "org.apache.hadoop.fs.s3a.s3guard.Operations";

  
  public static final Logger OPERATIONS_LOG = LoggerFactory.getLogger(
      OPERATIONS_LOG_NAME);

  
  public static final String VERSION_MARKER_ITEM_NAME = "../VERSION";

  
  public static final String VERSION_MARKER_TAG_NAME = "s3guard_version";

  
  public static final int VERSION = 100;

  @VisibleForTesting
  static final String BILLING_MODE
      = "billing-mode";

  @VisibleForTesting
  static final String BILLING_MODE_PER_REQUEST
      = "per-request";

  @VisibleForTesting
  static final String BILLING_MODE_PROVISIONED
      = "provisioned";

  @VisibleForTesting
  static final String DESCRIPTION
      = "S3Guard metadata store in DynamoDB";
  @VisibleForTesting
  static final String READ_CAPACITY = "read-capacity";
  @VisibleForTesting
  static final String WRITE_CAPACITY = "write-capacity";
  @VisibleForTesting
  static final String STATUS = "status";
  @VisibleForTesting
  static final String TABLE = "table";

  @VisibleForTesting
  static final String HINT_DDB_IOPS_TOO_LOW
      = " This may be because the write threshold of DynamoDB is set too low.";

  @VisibleForTesting
  static final String THROTTLING = "Throttling";

  public static final String E_ON_DEMAND_NO_SET_CAPACITY
      = "Neither ReadCapacityUnits nor WriteCapacityUnits can be specified when BillingMode is PAY_PER_REQUEST";

  @VisibleForTesting
  static final String E_INCONSISTENT_UPDATE
      = "Duplicate and inconsistent entry in update operation";

  private static final ValueMap DELETE_TRACKING_VALUE_MAP =
      new ValueMap().withBoolean(":false", false);

  
  private static final int S3GUARD_DDB_SUBMITTED_TASK_LIMIT = 50;

  private AmazonDynamoDB amazonDynamoDB;
  private DynamoDB dynamoDB;
  private AWSCredentialProviderList credentials;
  private String region;
  private Table table;
  private String tableName;
  private Configuration conf;
  private String username;

  
  private RetryPolicy batchWriteRetryPolicy;

  
  private MetastoreInstrumentation instrumentation
      = new MetastoreInstrumentationImpl();

  
  private S3AFileSystem owner;

  
  private Invoker invoker = new Invoker(RetryPolicies.TRY_ONCE_THEN_FAIL,
      Invoker.NO_OP
  );

  
  private Invoker readOp;

  
  private Invoker writeOp;

  
  private Invoker scanOp;

  private final AtomicLong readThrottleEvents = new AtomicLong(0);
  private final AtomicLong writeThrottleEvents = new AtomicLong(0);
  private final AtomicLong scanThrottleEvents = new AtomicLong(0);
  private final AtomicLong batchWriteCapacityExceededEvents = new AtomicLong(0);

  
  private static final int THROTTLE_EVENT_LOG_LIMIT = 100;

  
  private AtomicInteger throttleEventCount = new AtomicInteger(0);

  
  private ListeningExecutorService executor;

  
  private ITtlTimeProvider ttlTimeProvider;

  private DynamoDBMetadataStoreTableManager tableHandler;

  
  private DynamoDB createDynamoDB(
      final Configuration conf,
      final String s3Region,
      final String bucket,
      final AWSCredentialsProvider credentials)
      throws IOException {
    if (amazonDynamoDB == null) {
      Preconditions.checkNotNull(conf);
      final Class<? extends DynamoDBClientFactory> cls =
          conf.getClass(S3GUARD_DDB_CLIENT_FACTORY_IMPL,
          S3GUARD_DDB_CLIENT_FACTORY_IMPL_DEFAULT, DynamoDBClientFactory.class);
      LOG.debug("Creating DynamoDB client {} with S3 region {}", cls, s3Region);
      amazonDynamoDB = ReflectionUtils.newInstance(cls, conf)
          .createDynamoDBClient(s3Region, bucket, credentials);
    }
    return new DynamoDB(amazonDynamoDB);
  }

  
  @Override
  @Retries.OnceRaw
  public void initialize(FileSystem fs, ITtlTimeProvider ttlTp)
      throws IOException {
    Preconditions.checkNotNull(fs, "Null filesystem");
    Preconditions.checkArgument(fs instanceof S3AFileSystem,
        "DynamoDBMetadataStore only supports S3A filesystem - not %s",
        fs);
    bindToOwnerFilesystem((S3AFileSystem) fs);
    final String bucket = owner.getBucket();
    String confRegion = conf.getTrimmed(S3GUARD_DDB_REGION_KEY);
    if (!StringUtils.isEmpty(confRegion)) {
      region = confRegion;
      LOG.debug("Overriding S3 region with configured DynamoDB region: {}",
          region);
    } else {
      try {
        region = owner.getBucketLocation();
      } catch (AccessDeniedException e) {
        
        URI uri = owner.getUri();
        String message =
            "Failed to get bucket location as client lacks permission "
                + RolePolicies.S3_GET_BUCKET_LOCATION + " for " + uri;
        LOG.error(message);
        throw (IOException)new AccessDeniedException(message).initCause(e);
      }
      LOG.debug("Inferring DynamoDB region from S3 bucket: {}", region);
    }
    credentials = owner.shareCredentials("s3guard");
    dynamoDB = createDynamoDB(conf, region, bucket, credentials);

    
    tableName = conf.getTrimmed(S3GUARD_DDB_TABLE_NAME_KEY, bucket);
    initDataAccessRetries(conf);

    this.ttlTimeProvider = ttlTp;

    tableHandler = new DynamoDBMetadataStoreTableManager(
        dynamoDB, tableName, region, amazonDynamoDB, conf, readOp,
        batchWriteRetryPolicy);
    this.table = tableHandler.initTable();

    instrumentation.initialized();
  }

  
  @VisibleForTesting
  void bindToOwnerFilesystem(final S3AFileSystem fs) {
    owner = fs;
    conf = owner.getConf();
    StoreContext context = owner.createStoreContext();
    instrumentation = context.getInstrumentation()
        .getS3GuardInstrumentation();
    username = context.getUsername();
    executor = MoreExecutors.listeningDecorator(
        context.createThrottledExecutor());
    ttlTimeProvider = Preconditions.checkNotNull(
        context.getTimeProvider(),
        "ttlTimeProvider must not be null");
  }

  
  @Override
  @Retries.OnceRaw
  public void initialize(Configuration config,
      ITtlTimeProvider ttlTp) throws IOException {
    conf = config;
    
    tableName = conf.getTrimmed(S3GUARD_DDB_TABLE_NAME_KEY);

    Preconditions.checkArgument(!StringUtils.isEmpty(tableName),
        "No DynamoDB table name configured");
    region = conf.getTrimmed(S3GUARD_DDB_REGION_KEY);
    Preconditions.checkArgument(!StringUtils.isEmpty(region),
        "No DynamoDB region configured");
    
    
    credentials = createAWSCredentialProviderSet(null, conf);
    dynamoDB = createDynamoDB(conf, region, null, credentials);

    username = UserGroupInformation.getCurrentUser().getShortUserName();
    
    
    int executorCapacity = intOption(conf,
        EXECUTOR_CAPACITY, DEFAULT_EXECUTOR_CAPACITY, 1);
    executor = MoreExecutors.listeningDecorator(
        BlockingThreadPoolExecutorService.newInstance(
            executorCapacity,
            executorCapacity * 2,
              longOption(conf, KEEPALIVE_TIME,
                  DEFAULT_KEEPALIVE_TIME, 0),
                  TimeUnit.SECONDS,
                  "s3a-ddb-" + tableName));
    initDataAccessRetries(conf);
    this.ttlTimeProvider = ttlTp;

    tableHandler = new DynamoDBMetadataStoreTableManager(
        dynamoDB, tableName, region, amazonDynamoDB, conf, readOp,
        batchWriteRetryPolicy);
    this.table = tableHandler.initTable();
  }

  
  private void initDataAccessRetries(Configuration config) {
    batchWriteRetryPolicy = RetryPolicies
        .exponentialBackoffRetry(
            config.getInt(S3GUARD_DDB_MAX_RETRIES,
                S3GUARD_DDB_MAX_RETRIES_DEFAULT),
            conf.getTimeDuration(S3GUARD_DDB_THROTTLE_RETRY_INTERVAL,
                S3GUARD_DDB_THROTTLE_RETRY_INTERVAL_DEFAULT,
                TimeUnit.MILLISECONDS),
            TimeUnit.MILLISECONDS);
    final RetryPolicy throttledRetryRetryPolicy
        = new S3GuardDataAccessRetryPolicy(config);
    readOp = new Invoker(throttledRetryRetryPolicy, this::readRetryEvent);
    writeOp = new Invoker(throttledRetryRetryPolicy, this::writeRetryEvent);
    scanOp = new Invoker(throttledRetryRetryPolicy, this::scanRetryEvent);
  }

  @Override
  @Retries.RetryTranslated
  public void delete(Path path,
      final BulkOperationState operationState)
      throws IOException {
    innerDelete(path, true,
        extractOrCreate(operationState,
            BulkOperationState.OperationType.Delete));
  }

  @Override
  @Retries.RetryTranslated
  public void forgetMetadata(Path path) throws IOException {
    LOG.debug("Forget metadata for {}", path);
    innerDelete(path, false, null);
  }

  
  @Retries.RetryTranslated
  private void innerDelete(final Path path,
      final boolean tombstone,
      final AncestorState ancestorState)
      throws IOException {
    checkPath(path);
    LOG.debug("Deleting from table {} in region {}: {}",
        tableName, region, path);

    
    if (path.isRoot()) {
      LOG.debug("Skip deleting root directory as it does not exist in table");
      return;
    }
    
    
    boolean idempotent = S3AFileSystem.DELETE_CONSIDERED_IDEMPOTENT;
    if (tombstone) {
      Preconditions.checkArgument(ttlTimeProvider != null, "ttlTimeProvider "
          + "must not be null");
      final PathMetadata pmTombstone = PathMetadata.tombstone(path,
          ttlTimeProvider.getNow());
      Item item = PathMetadataDynamoDBTranslation.pathMetadataToItem(
          new DDBPathMetadata(pmTombstone));
      writeOp.retry(
          "Put tombstone",
          path.toString(),
          idempotent,
          () -> {
            logPut(ancestorState, item);
            recordsWritten(1);
            table.putItem(item);
          });
    } else {
      PrimaryKey key = pathToKey(path);
      writeOp.retry(
          "Delete key",
          path.toString(),
          idempotent,
          () -> {
            
            logDelete(ancestorState, key);
            recordsDeleted(1);
            table.deleteItem(key);
          });
    }
  }

  @Override
  @Retries.RetryTranslated
  public void deleteSubtree(Path path,
      final BulkOperationState operationState)
      throws IOException {
    checkPath(path);
    LOG.debug("Deleting subtree from table {} in region {}: {}",
        tableName, region, path);

    final PathMetadata meta = get(path);
    if (meta == null) {
      LOG.debug("Subtree path {} does not exist; this will be a no-op", path);
      return;
    }
    if (meta.isDeleted()) {
      LOG.debug("Subtree path {} is deleted; this will be a no-op", path);
      return;
    }
    deleteEntries(RemoteIterators.mappingRemoteIterator(
        new DescendantsIterator(this, meta),
        FileStatus::getPath),
        operationState);
  }

  @Override
  @Retries.RetryTranslated
  public void deletePaths(Collection<Path> paths,
      final BulkOperationState operationState)
      throws IOException {
    deleteEntries(RemoteIterators.remoteIteratorFromIterable(paths),
        operationState);
  }

  
  @Retries.RetryTranslated
  private void deleteEntries(RemoteIterator<Path> entries,
      final BulkOperationState operationState)
      throws IOException {
    final List<CompletableFuture<Void>> futures = new ArrayList<>();
    AncestorState state = extractOrCreate(operationState,
        BulkOperationState.OperationType.Delete);

    while (entries.hasNext()) {
      final Path pathToDelete = entries.next();
      futures.add(submit(executor, () -> {
        innerDelete(pathToDelete, true, state);
        return null;
      }));
      if (futures.size() > S3GUARD_DDB_SUBMITTED_TASK_LIMIT) {
        
        waitForCompletion(futures);
        futures.clear();
      }
    }
    
    waitForCompletion(futures);
  }

  
  @Retries.RetryTranslated
  private Item getConsistentItem(final Path path) throws IOException {
    PrimaryKey key = pathToKey(path);
    final GetItemSpec spec = new GetItemSpec()
        .withPrimaryKey(key)
        .withConsistentRead(true); 
    return readOp.retry("get",
        path.toString(),
        true,
        () -> {
          recordsRead(1);
          return table.getItem(spec);
        });
  }

  @Override
  @Retries.RetryTranslated
  public DDBPathMetadata get(Path path) throws IOException {
    return get(path, false);
  }

  @Override
  @Retries.RetryTranslated
  public DDBPathMetadata get(Path path, boolean wantEmptyDirectoryFlag)
      throws IOException {
    checkPath(path);
    LOG.debug("Get from table {} in region {}: {} ; wantEmptyDirectory={}",
        tableName, region, path, wantEmptyDirectoryFlag);
    DDBPathMetadata result = innerGet(path, wantEmptyDirectoryFlag);
    LOG.debug("result of get {} is: {}", path, result);
    return result;
  }

  
  @Retries.RetryTranslated
  private DDBPathMetadata innerGet(Path path, boolean wantEmptyDirectoryFlag)
      throws IOException {
    final DDBPathMetadata meta;
    if (path.isRoot()) {
      
      meta =
          new DDBPathMetadata(makeDirStatus(username, path));
    } else {
      final Item item = getConsistentItem(path);
      meta = itemToPathMetadata(item, username);
      LOG.debug("Get from table {} in region {} returning for {}: {}",
          tableName, region, path, meta);
    }

    if (wantEmptyDirectoryFlag && meta != null && !meta.isDeleted()) {
      final FileStatus status = meta.getFileStatus();
      
      
      if (status.isDirectory()) {
        final QuerySpec spec = new QuerySpec()
            .withHashKey(pathToParentKeyAttribute(path))
            .withConsistentRead(true)
            .withFilterExpression(IS_DELETED + " = :false")
            .withValueMap(DELETE_TRACKING_VALUE_MAP);
        boolean hasChildren = readOp.retry("get/hasChildren",
            path.toString(),
            true,
            () -> {
              
              final IteratorSupport<Item, QueryOutcome> it = table.query(
                  spec).iterator();
              
              if (it.hasNext()) {
                if (LOG.isDebugEnabled()) {
                  LOG.debug("Dir {} is non-empty", status.getPath());
                  while(it.hasNext()) {
                    LOG.debug("{}", itemToPathMetadata(it.next(), username));
                  }
                }
                return true;
              } else {
                return false;
              }
          });

        
        
        if (meta.isAuthoritativeDir()) {
          meta.setIsEmptyDirectory(
              hasChildren ? Tristate.FALSE : Tristate.TRUE);
        } else {
          meta.setIsEmptyDirectory(
              hasChildren ? Tristate.FALSE : Tristate.UNKNOWN);
        }
      }
    }

    return meta;
  }

  
  private S3AFileStatus makeDirStatus(String dirOwner, Path path) {
    return new S3AFileStatus(Tristate.UNKNOWN, path, dirOwner);
  }

  @Override
  @Retries.RetryTranslated
  public DirListingMetadata listChildren(final Path path) throws IOException {
    checkPath(path);
    LOG.debug("Listing table {} in region {}: {}", tableName, region, path);

    final QuerySpec spec = new QuerySpec()
        .withHashKey(pathToParentKeyAttribute(path))
        .withConsistentRead(true); 
    final List<PathMetadata> metas = new ArrayList<>();
    
    final ItemCollection<QueryOutcome> items = scanOp.retry(
        "listChildren",
        path.toString(),
        true,
        () -> table.query(spec));
    
    try {
      for (Item item : wrapWithRetries(items)) {
        metas.add(itemToPathMetadata(item, username));
      }
    } catch (UncheckedIOException e) {
      
      throw e.getCause();
    }

    
    
    
    return getDirListingMetadataFromDirMetaAndList(path, metas,
        get(path));
  }

  DirListingMetadata getDirListingMetadataFromDirMetaAndList(Path path,
      List<PathMetadata> metas, DDBPathMetadata dirPathMeta) {
    boolean isAuthoritative = false;
    if (dirPathMeta != null) {
      isAuthoritative = dirPathMeta.isAuthoritativeDir();
    }

    LOG.trace("Listing table {} in region {} for {} returning {}",
        tableName, region, path, metas);

    if (!metas.isEmpty() && dirPathMeta == null) {
      
      LOG.warn("Directory marker is deleted, but the list of the directory "
          + "elements is not empty: {}. This case is handled as if the "
          + "directory was deleted.", metas);
      return null;
    }

    if(metas.isEmpty() && dirPathMeta == null) {
      return null;
    }

    return new DirListingMetadata(path, metas, isAuthoritative,
        dirPathMeta.getLastUpdated());
  }

  
  private enum EntryOrigin {
    Requested,  
    Retrieved,  
    Generated   
  }

  
  private Collection<DDBPathMetadata> completeAncestry(
      final Collection<DDBPathMetadata> pathsToCreate,
      final AncestorState ancestorState) throws IOException {
    
    Map<Path, Pair<EntryOrigin, DDBPathMetadata>> ancestry = new HashMap<>();
    LOG.debug("Completing ancestry for {} paths", pathsToCreate.size());
    
    
    
    
    List<DDBPathMetadata> sortedPaths = new ArrayList<>(pathsToCreate);
    sortedPaths.sort(PathOrderComparators.TOPMOST_PM_FIRST);
    
    for (DDBPathMetadata entry : sortedPaths) {
      Preconditions.checkArgument(entry != null);
      Path path = entry.getFileStatus().getPath();
      LOG.debug("Adding entry {}", path);
      if (path.isRoot()) {
        
        break;
      }
      
      
      DDBPathMetadata oldEntry = ancestorState.put(path, entry);
      boolean addAncestors = true;
      if (oldEntry != null) {
        
        
        
        
        
        
        boolean oldWasDir = oldEntry.getFileStatus().isDirectory();
        boolean newIsDir = entry.getFileStatus().isDirectory();
        if ((oldWasDir && !newIsDir)
            || (!oldWasDir && newIsDir)) {
          LOG.warn("Overwriting a S3Guard file created in the operation: {}",
              oldEntry);
          LOG.warn("With new entry: {}", entry);
          
          ancestorState.put(path, oldEntry);
          
          throw new PathIOException(path.toString(),
              String.format("%s old %s new %s",
                  E_INCONSISTENT_UPDATE,
                  oldEntry,
                  entry));
        } else {
          
          LOG.debug("Directory at {} being updated with value {}",
              path, entry);
          
          
          addAncestors = false;
        }
      }
      
      ancestry.put(path, Pair.of(EntryOrigin.Requested, entry));
      
      
      Path parent = path.getParent();
      while (addAncestors
          && !parent.isRoot() && !ancestry.containsKey(parent)) {
        if (!ancestorState.findEntry(parent, true)) {
          
          
          DDBPathMetadata md;
          Pair<EntryOrigin, DDBPathMetadata> newEntry;
          final Item item = getConsistentItem(parent);
          if (item != null && !itemToPathMetadata(item, username).isDeleted()) {
            
            
            
            md = itemToPathMetadata(item, username);
            LOG.debug("Found existing entry for parent: {}", md);
            newEntry = Pair.of(EntryOrigin.Retrieved, md);
            
            
            addAncestors = false;
          } else {
            
            LOG.debug("auto-create ancestor path {} for child path {}",
                parent, path);
            final S3AFileStatus status = makeDirStatus(parent, username);
            md = new DDBPathMetadata(status, Tristate.FALSE,
                false, false, ttlTimeProvider.getNow());
            
            newEntry =  Pair.of(EntryOrigin.Generated, md);
          }
          
          ancestorState.put(parent, md);
          ancestry.put(parent, newEntry);
        }
        parent = parent.getParent();
      }
    }
    
    
    
    
    return ancestry.values().stream()
        .filter(p -> p.getLeft() != EntryOrigin.Retrieved)
        .map(Pair::getRight)
        .collect(Collectors.toList());
  }

  
  @SuppressWarnings("SynchronizationOnLocalVariableOrMethodParameter")
  @Override
  @Retries.RetryTranslated
  public void addAncestors(final Path qualifiedPath,
      @Nullable final BulkOperationState operationState) throws IOException {

    Collection<DDBPathMetadata> newDirs = new ArrayList<>();
    final AncestorState ancestorState = extractOrCreate(operationState,
        BulkOperationState.OperationType.Put);
    Path parent = qualifiedPath.getParent();
    boolean entryFound = false;

    
    
    
    
    
    
    
    
    
    while (!parent.isRoot()) {
      synchronized (ancestorState) {
        if (ancestorState.contains(parent)) {
          
          break;
        }
      }
      
      
      PathMetadata directory = get(parent);
      if (directory == null || directory.isDeleted()) {
        if (entryFound) {
          LOG.warn("Inconsistent S3Guard table: adding directory {}", parent);
        }
        S3AFileStatus status = makeDirStatus(username, parent);
        LOG.debug("Adding new ancestor entry {}", status);
        DDBPathMetadata meta = new DDBPathMetadata(status, Tristate.FALSE,
            false, ttlTimeProvider.getNow());
        newDirs.add(meta);
        
        
        
        
      } else {
        
        entryFound = true;
        if (directory.getFileStatus().isFile()) {
          throw new PathIOException(parent.toString(),
              "Cannot overwrite parent file: metastore is"
                  + " in an inconsistent state");
        }
        
        synchronized (ancestorState) {
          ancestorState.put(parent, new DDBPathMetadata(directory));
        }
      }
      parent = parent.getParent();
    }
    
    
    if (!newDirs.isEmpty()) {
      
      patchLastUpdated(newDirs, ttlTimeProvider);
      innerPut(newDirs, operationState);
    }
  }

  
  @Override
  @Retries.RetryTranslated
  public void move(@Nullable Collection<Path> pathsToDelete,
      @Nullable Collection<PathMetadata> pathsToCreate,
      @Nullable final BulkOperationState operationState) throws IOException {
    if (pathsToDelete == null && pathsToCreate == null) {
      return;
    }

    LOG.debug("Moving paths of table {} in region {}: {} paths to delete and {}"
        + " paths to create", tableName, region,
        pathsToDelete == null ? 0 : pathsToDelete.size(),
        pathsToCreate == null ? 0 : pathsToCreate.size());
    LOG.trace("move: pathsToDelete = {}, pathsToCreate = {}", pathsToDelete,
        pathsToCreate);

    
    
    
    
    
    AncestorState ancestorState = extractOrCreate(operationState,
        BulkOperationState.OperationType.Rename);
    List<DDBPathMetadata> newItems = new ArrayList<>();
    if (pathsToCreate != null) {
      
      
      
      synchronized (ancestorState) {
        newItems.addAll(
            completeAncestry(
                pathMetaToDDBPathMeta(pathsToCreate),
                ancestorState));
      }
    }
    
    newItems.sort(PathOrderComparators.TOPMOST_PM_FIRST);

    
    if (pathsToDelete != null) {
      List<DDBPathMetadata> tombstones = new ArrayList<>(pathsToDelete.size());
      for (Path meta : pathsToDelete) {
        Preconditions.checkArgument(ttlTimeProvider != null, "ttlTimeProvider"
            + " must not be null");
        final PathMetadata pmTombstone = PathMetadata.tombstone(meta,
            ttlTimeProvider.getNow());
        tombstones.add(new DDBPathMetadata(pmTombstone));
      }
      
      tombstones.sort(TOPMOST_PM_LAST);
      newItems.addAll(tombstones);
    }

    processBatchWriteRequest(ancestorState,
        null, pathMetadataToItem(newItems));
  }

  
  @Retries.RetryTranslated("Outstanding batch items are updated with backoff")
  private int processBatchWriteRequest(
      @Nullable AncestorState ancestorState,
      PrimaryKey[] keysToDelete,
      Item[] itemsToPut) throws IOException {
    final int totalToDelete = (keysToDelete == null ? 0 : keysToDelete.length);
    final int totalToPut = (itemsToPut == null ? 0 : itemsToPut.length);
    if (totalToPut == 0 && totalToDelete == 0) {
      LOG.debug("Ignoring empty batch write request");
      return 0;
    }
    int count = 0;
    int batches = 0;
    while (count < totalToDelete + totalToPut) {
      final TableWriteItems writeItems = new TableWriteItems(tableName);
      int numToDelete = 0;
      if (keysToDelete != null
          && count < totalToDelete) {
        numToDelete = Math.min(S3GUARD_DDB_BATCH_WRITE_REQUEST_LIMIT,
            totalToDelete - count);
        PrimaryKey[] toDelete = Arrays.copyOfRange(keysToDelete,
            count, count + numToDelete);
        LOG.debug("Deleting {} entries: {}", toDelete.length, toDelete);
        writeItems.withPrimaryKeysToDelete(toDelete);
        count += numToDelete;
      }

      if (numToDelete < S3GUARD_DDB_BATCH_WRITE_REQUEST_LIMIT
          && itemsToPut != null
          && count < totalToDelete + totalToPut) {
        final int numToPut = Math.min(
            S3GUARD_DDB_BATCH_WRITE_REQUEST_LIMIT - numToDelete,
            totalToDelete + totalToPut - count);
        final int index = count - totalToDelete;
        writeItems.withItemsToPut(
            Arrays.copyOfRange(itemsToPut, index, index + numToPut));
        count += numToPut;
      }

      
      
      batches++;
      BatchWriteItemOutcome res = writeOp.retry(
          "batch write",
          "",
          true,
          () -> dynamoDB.batchWriteItem(writeItems));
      
      Map<String, List<WriteRequest>> unprocessed = res.getUnprocessedItems();
      int retryCount = 0;
      while (!unprocessed.isEmpty()) {
        batchWriteCapacityExceededEvents.incrementAndGet();
        batches++;
        retryBackoffOnBatchWrite(retryCount++);
        
        final Map<String, List<WriteRequest>> upx = unprocessed;
        res = writeOp.retry(
            "batch write",
            "",
            true,
            () -> dynamoDB.batchWriteItemUnprocessed(upx));
        unprocessed = res.getUnprocessedItems();
      }
    }
    if (itemsToPut != null) {
      recordsWritten(itemsToPut.length);
      logPut(ancestorState, itemsToPut);
    }
    if (keysToDelete != null) {
      recordsDeleted(keysToDelete.length);
      logDelete(ancestorState, keysToDelete);

    }
    return batches;
  }

  
  private void retryBackoffOnBatchWrite(int retryCount) throws IOException {
    try {
      
      RetryPolicy.RetryAction action = batchWriteRetryPolicy.shouldRetry(
          null,
          retryCount, 0, true);
      if (action.action == RetryPolicy.RetryAction.RetryDecision.FAIL) {
        
        
        
        AmazonServiceException cause = new AmazonServiceException(
            "Throttling");
        cause.setServiceName("S3Guard");
        cause.setStatusCode(AWSServiceThrottledException.STATUS_CODE);
        cause.setErrorCode(THROTTLING);  
        cause.setErrorType(AmazonServiceException.ErrorType.Service);
        cause.setErrorMessage(THROTTLING);
        cause.setRequestId("n/a");
        throw new AWSServiceThrottledException(
            String.format("Max retries during batch write exceeded"
                    + " (%d) for DynamoDB."
                    + HINT_DDB_IOPS_TOO_LOW,
                retryCount),
            cause);
      } else {
        LOG.debug("Sleeping {} msec before next retry", action.delayMillis);
        Thread.sleep(action.delayMillis);
      }
    } catch (InterruptedException e) {
      throw (IOException)new InterruptedIOException(e.toString()).initCause(e);
    } catch (IOException e) {
      throw e;
    } catch (Exception e) {
      throw new IOException("Unexpected exception " + e, e);
    }
  }

  @Override
  @Retries.RetryTranslated
  public void put(final PathMetadata meta) throws IOException {
    put(meta, null);
  }

  @Override
  @Retries.RetryTranslated
  public void put(
      final PathMetadata meta,
      @Nullable final BulkOperationState operationState) throws IOException {
    
    
    
    
    
    
    LOG.debug("Saving to table {} in region {}: {}", tableName, region, meta);

    Collection<PathMetadata> wrapper = new ArrayList<>(1);
    wrapper.add(meta);
    put(wrapper, operationState);
  }

  @Override
  @Retries.RetryTranslated
  public void put(
      final Collection<? extends PathMetadata> metas,
      @Nullable final BulkOperationState operationState) throws IOException {
    innerPut(pathMetaToDDBPathMeta(metas), operationState);
  }

  
  @SuppressWarnings("SynchronizationOnLocalVariableOrMethodParameter")
  @Retries.RetryTranslated
  private void innerPut(
      final Collection<DDBPathMetadata> metas,
      @Nullable final BulkOperationState operationState) throws IOException {
    if (metas.isEmpty()) {
      
      LOG.debug("Ignoring empty list of entries to put");
      return;
    }
    
    
    final AncestorState ancestorState = extractOrCreate(operationState,
        BulkOperationState.OperationType.Put);

    Item[] items;
    synchronized (ancestorState) {
      items = pathMetadataToItem(
          completeAncestry(metas, ancestorState));
    }
    LOG.debug("Saving batch of {} items to table {}, region {}", items.length,
        tableName, region);
    processBatchWriteRequest(ancestorState, null, items);
  }

  
  @SuppressWarnings("SynchronizationOnLocalVariableOrMethodParameter")
  @VisibleForTesting
  @Retries.RetryTranslated
  List<DDBPathMetadata> fullPathsToPut(DDBPathMetadata meta,
      @Nullable BulkOperationState operationState)
      throws IOException {
    checkPathMetadata(meta);
    final List<DDBPathMetadata> metasToPut = new ArrayList<>();
    
    if (!meta.getFileStatus().getPath().isRoot()) {
      metasToPut.add(meta);
    }

    
    
    final AncestorState ancestorState = extractOrCreate(operationState,
        BulkOperationState.OperationType.Put);
    Path path = meta.getFileStatus().getPath().getParent();
    while (path != null && !path.isRoot()) {
      synchronized (ancestorState) {
        if (ancestorState.findEntry(path, true)) {
          break;
        }
      }
      final Item item = getConsistentItem(path);
      if (!itemExists(item)) {
        final S3AFileStatus status = makeDirStatus(path, username);
        metasToPut.add(new DDBPathMetadata(status, Tristate.FALSE, false,
            meta.isAuthoritativeDir(), meta.getLastUpdated()));
        path = path.getParent();
      } else {
        
        synchronized (ancestorState) {
          ancestorState.put(path, itemToPathMetadata(item, username));
        }
        
        break;
      }
    }
    return metasToPut;
  }

  
  private static boolean itemExists(Item item) {
    if (item == null) {
      return false;
    }
    if (item.hasAttribute(IS_DELETED) &&
        item.getBoolean(IS_DELETED)) {
      return false;
    }
    return true;
  }

  
  private static boolean getBoolAttribute(Item item,
      String attrName,
      boolean defVal) {
    return item.hasAttribute(attrName) ? item.getBoolean(attrName) : defVal;
  }

  
  static S3AFileStatus makeDirStatus(Path f, String owner) {
    return new S3AFileStatus(Tristate.UNKNOWN, f, owner);
  }

  
  @Override
  @Retries.RetryTranslated
  public void put(
      final DirListingMetadata meta,
      final List<Path> unchangedEntries,
      @Nullable final BulkOperationState operationState) throws IOException {
    LOG.debug("Saving {} dir meta for {} to table {} in region {}: {}",
        meta.isAuthoritative() ? "auth" : "nonauth",
        meta.getPath(),
        tableName, region, meta);
    
    Path path = meta.getPath();
    DDBPathMetadata ddbPathMeta =
        new DDBPathMetadata(makeDirStatus(path, username), meta.isEmpty(),
            false, meta.isAuthoritative(), meta.getLastUpdated());
    
    final AncestorState ancestorState = extractOrCreate(operationState,
        BulkOperationState.OperationType.Put);
    
    final List<DDBPathMetadata> metasToPut = fullPathsToPut(ddbPathMeta,
        ancestorState);

    
    
    final Collection<PathMetadata> children = meta.getListing()
        .stream()
        .filter(e -> !unchangedEntries.contains(e.getFileStatus().getPath()))
        .collect(Collectors.toList());

    metasToPut.addAll(pathMetaToDDBPathMeta(children));

    
    
    metasToPut.sort(PathOrderComparators.TOPMOST_PM_FIRST);
    processBatchWriteRequest(ancestorState,
        null,
        pathMetadataToItem(metasToPut));
    
    synchronized (ancestorState) {
      metasToPut.forEach(ancestorState::put);
    }
  }

  @Override
  public synchronized void close() {
    instrumentation.storeClosed();
    try {
      if (dynamoDB != null) {
        LOG.debug("Shutting down {}", this);
        dynamoDB.shutdown();
        dynamoDB = null;
      }
    } finally {
      closeAutocloseables(LOG, credentials);
      credentials = null;
    }
  }

  @Override
  @Retries.RetryTranslated
  public void destroy() throws IOException {
    tableHandler.destroy();
  }

  @Retries.RetryTranslated
  private ItemCollection<ScanOutcome> expiredFiles(PruneMode pruneMode,
      long cutoff, String keyPrefix) throws IOException {

    String filterExpression;
    String projectionExpression;
    ValueMap map;

    switch (pruneMode) {
    case ALL_BY_MODTIME:
      
      
      
      
      
      
      
      filterExpression =
          "mod_time < :mod_time and begins_with(parent, :parent)"
              + " and not is_dir = :is_dir";
      projectionExpression = "parent,child";
      map = new ValueMap()
          .withLong(":mod_time", cutoff)
          .withString(":parent", keyPrefix)
          .withBoolean(":is_dir", true);
      break;
    case TOMBSTONES_BY_LASTUPDATED:
      filterExpression =
          "last_updated < :last_updated and begins_with(parent, :parent) "
              + "and is_deleted = :is_deleted";
      projectionExpression = "parent,child,is_deleted";
      map = new ValueMap()
          .withLong(":last_updated", cutoff)
          .withString(":parent", keyPrefix)
          .withBoolean(":is_deleted", true);
      break;
    default:
      throw new UnsupportedOperationException("Unsupported prune mode: "
          + pruneMode);
    }

    return readOp.retry(
        "scan",
        keyPrefix,
        true,
        () -> table.scan(filterExpression, projectionExpression, null, map));
  }

  @Override
  @Retries.RetryTranslated
  public void prune(PruneMode pruneMode, long cutoff) throws IOException {
    prune(pruneMode, cutoff, "/");
  }

  
  @Override
  @Retries.RetryTranslated
  public long prune(PruneMode pruneMode, long cutoff, String keyPrefix)
      throws IOException {
    LOG.debug("Prune {} under {} with age {}",
        pruneMode == PruneMode.ALL_BY_MODTIME
            ? "files and tombstones" : "tombstones",
        keyPrefix, cutoff);
    final ItemCollection<ScanOutcome> items =
        expiredFiles(pruneMode, cutoff, keyPrefix);
    return innerPrune(pruneMode, cutoff, keyPrefix, items);
  }

  
  private int innerPrune(
      final PruneMode pruneMode, final long cutoff, final String keyPrefix,
      final ItemCollection<ScanOutcome> items)
      throws IOException {
    int itemCount = 0;
    try (AncestorState state = initiateBulkWrite(
        BulkOperationState.OperationType.Prune, null);
         DurationInfo ignored =
             new DurationInfo(LOG, "Pruning DynamoDB Store")) {
      ArrayList<Path> deletionBatch =
          new ArrayList<>(S3GUARD_DDB_BATCH_WRITE_REQUEST_LIMIT);
      long delay = conf.getTimeDuration(
          S3GUARD_DDB_BACKGROUND_SLEEP_MSEC_KEY,
          S3GUARD_DDB_BACKGROUND_SLEEP_MSEC_DEFAULT,
          TimeUnit.MILLISECONDS);
      Set<Path> parentPathSet = new HashSet<>();
      Set<Path> clearedParentPathSet = new HashSet<>();
      
      
      CallableRaisingIOE<Void> deleteBatchOperation =
          () -> {
            
            deletionBatch.sort(PathOrderComparators.TOPMOST_PATH_LAST);
            processBatchWriteRequest(state, pathToKey(deletionBatch), null);

            
            
            removeAuthoritativeDirFlag(parentPathSet, state);
            
            clearedParentPathSet.addAll(parentPathSet);
            parentPathSet.clear();
            return null;
          };
      for (Item item : items) {
        DDBPathMetadata md = PathMetadataDynamoDBTranslation
            .itemToPathMetadata(item, username);
        Path path = md.getFileStatus().getPath();
        boolean tombstone = md.isDeleted();
        LOG.debug("Prune entry {}", path);
        deletionBatch.add(path);

        
        
        
        
        
        Path parentPath = path.getParent();
        if (!tombstone
            && parentPath != null
            && !parentPath.isRoot()
            && !clearedParentPathSet.contains(parentPath)) {
          parentPathSet.add(parentPath);
        }

        itemCount++;
        if (deletionBatch.size() == S3GUARD_DDB_BATCH_WRITE_REQUEST_LIMIT) {
          deleteBatchOperation.apply();
          deletionBatch.clear();
          if (delay > 0) {
            Thread.sleep(delay);
          }
        }
      }
      
      if (!deletionBatch.isEmpty()) {
        deleteBatchOperation.apply();
      }
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new InterruptedIOException("Pruning was interrupted");
    } catch (AmazonDynamoDBException e) {
      throw translateDynamoDBException(keyPrefix,
          "Prune of " + keyPrefix + " failed", e);
    }
    LOG.info("Finished pruning {} items in batches of {}", itemCount,
        S3GUARD_DDB_BATCH_WRITE_REQUEST_LIMIT);
    return itemCount;
  }

  
  private void removeAuthoritativeDirFlag(
      final Set<Path> pathSet,
      final AncestorState state) throws IOException {

    AtomicReference<IOException> rIOException = new AtomicReference<>();

    Set<DDBPathMetadata> metas = pathSet.stream().map(path -> {
      try {
        if (path.isRoot()) {
          LOG.debug("ignoring root path");
          return null;
        }
        if (state != null && state.get(path) != null) {
          
          LOG.debug("Ignoring update of entry already in the state map");
          return null;
        }
        DDBPathMetadata ddbPathMetadata = get(path);
        if (ddbPathMetadata == null) {
          
          LOG.debug("No parent {}; skipping", path);
          return null;
        }
        if (ddbPathMetadata.isDeleted()) {
          
          LOG.debug("Parent has been deleted {}; skipping", path);
          return null;
        }
        if (!ddbPathMetadata.getFileStatus().isDirectory()) {
          
          LOG.debug("Parent is not a directory {}; skipping", path);
          return null;
        }
        LOG.debug("Setting isAuthoritativeDir==false on {}", ddbPathMetadata);
        ddbPathMetadata.setAuthoritativeDir(false);
        ddbPathMetadata.setLastUpdated(ttlTimeProvider.getNow());
        return ddbPathMetadata;
      } catch (IOException e) {
        String msg = String.format("IOException while getting PathMetadata "
            + "on path: %s.", path);
        LOG.error(msg, e);
        rIOException.set(e);
        return null;
      }
    }).filter(Objects::nonNull).collect(Collectors.toSet());

    try {
      LOG.debug("innerPut on metas: {}", metas);
      if (!metas.isEmpty()) {
        innerPut(metas, state);
      }
    } catch (IOException e) {
      String msg = String.format("IOException while setting false "
          + "authoritative directory flag on: %s.", metas);
      LOG.error(msg, e);
      rIOException.set(e);
    }

    if (rIOException.get() != null) {
      throw rIOException.get();
    }
  }

  @VisibleForTesting
  public AmazonDynamoDB getAmazonDynamoDB() {
    return amazonDynamoDB;
  }

  @Override
  public String toString() {
    return getClass().getSimpleName() + '{'
        + "region=" + region
        + ", tableName=" + tableName
        + ", tableArn=" + tableHandler.getTableArn()
        + '}';
  }

  
  @Override
  public List<RoleModel.Statement> listAWSPolicyRules(
      final Set<AccessLevel> access) {
    Preconditions.checkState(tableHandler.getTableArn() != null,
        "TableARN not known");
    if (access.isEmpty()) {
      return Collections.emptyList();
    }
    RoleModel.Statement stat;
    if (access.contains(AccessLevel.ADMIN)) {
      stat = allowAllDynamoDBOperations(tableHandler.getTableArn());
    } else {
      stat = allowS3GuardClientOperations(tableHandler.getTableArn());
    }
    return Lists.newArrayList(stat);
  }

  
  @Retries.OnceRaw
  private PutItemOutcome putItem(Item item) {
    LOG.debug("Putting item {}", item);
    return table.putItem(item);
  }

  @VisibleForTesting
  Table getTable() {
    return table;
  }

  String getRegion() {
    return region;
  }

  @VisibleForTesting
  public String getTableName() {
    return tableName;
  }

  @VisibleForTesting
  DynamoDB getDynamoDB() {
    return dynamoDB;
  }

  
  private Path checkPath(Path path) {
    Preconditions.checkNotNull(path);
    Preconditions.checkArgument(path.isAbsolute(), "Path %s is not absolute",
        path);
    URI uri = path.toUri();
    Preconditions.checkNotNull(uri.getScheme(), "Path %s missing scheme", path);
    Preconditions.checkArgument(uri.getScheme().equals(Constants.FS_S3A),
        "Path %s scheme must be %s", path, Constants.FS_S3A);
    Preconditions.checkArgument(!StringUtils.isEmpty(uri.getHost()), "Path %s" +
        " is missing bucket.", path);
    return path;
  }

  
  private static void checkPathMetadata(PathMetadata meta) {
    Preconditions.checkNotNull(meta);
    Preconditions.checkNotNull(meta.getFileStatus());
    Preconditions.checkNotNull(meta.getFileStatus().getPath());
  }

  @Override
  @Retries.OnceRaw
  public Map<String, String> getDiagnostics() throws IOException {
    Map<String, String> map = new TreeMap<>();
    if (table != null) {
      TableDescription desc = getTableDescription(true);
      map.put("name", desc.getTableName());
      map.put(STATUS, desc.getTableStatus());
      map.put("ARN", desc.getTableArn());
      map.put("size", desc.getTableSizeBytes().toString());
      map.put(TABLE, desc.toString());
      ProvisionedThroughputDescription throughput
          = desc.getProvisionedThroughput();
      map.put(READ_CAPACITY, throughput.getReadCapacityUnits().toString());
      map.put(WRITE_CAPACITY, throughput.getWriteCapacityUnits().toString());
      map.put(BILLING_MODE,
          throughput.getWriteCapacityUnits() == 0
              ? BILLING_MODE_PER_REQUEST
              : BILLING_MODE_PROVISIONED);
      map.put("sse", desc.getSSEDescription() == null
          ? "DISABLED"
          : desc.getSSEDescription().toString());
      map.put(MetadataStoreCapabilities.PERSISTS_AUTHORITATIVE_BIT,
          Boolean.toString(true));
    } else {
      map.put("name", "DynamoDB Metadata Store");
      map.put(TABLE, "none");
      map.put(STATUS, "undefined");
    }
    map.put("description", DESCRIPTION);
    map.put("region", region);
    if (batchWriteRetryPolicy != null) {
      map.put("retryPolicy", batchWriteRetryPolicy.toString());
    }
    return map;
  }

  @Retries.OnceRaw
  private TableDescription getTableDescription(boolean forceUpdate) {
    TableDescription desc = table.getDescription();
    if (desc == null || forceUpdate) {
      desc = table.describe();
    }
    return desc;
  }

  @Override
  @Retries.OnceRaw
  public void updateParameters(Map<String, String> parameters)
      throws IOException {
    Preconditions.checkNotNull(table, "Not initialized");
    TableDescription desc = getTableDescription(true);
    ProvisionedThroughputDescription current
        = desc.getProvisionedThroughput();

    long currentRead = current.getReadCapacityUnits();
    long newRead = getLongParam(parameters,
        S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,
        currentRead);
    long currentWrite = current.getWriteCapacityUnits();
    long newWrite = getLongParam(parameters,
            S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,
            currentWrite);

    if (currentRead == 0 || currentWrite == 0) {
      
      throw new IOException(E_ON_DEMAND_NO_SET_CAPACITY);
    }

    if (newRead != currentRead || newWrite != currentWrite) {
      LOG.info("Current table capacity is read: {}, write: {}",
          currentRead, currentWrite);
      LOG.info("Changing capacity of table to read: {}, write: {}",
          newRead, newWrite);
      tableHandler.provisionTableBlocking(newRead, newWrite);
    } else {
      LOG.info("Table capacity unchanged at read: {}, write: {}",
          newRead, newWrite);
    }
  }

  private long getLongParam(Map<String, String> parameters,
      String key,
      long defVal) {
    String k = parameters.get(key);
    if (k != null) {
      return Long.parseLong(k);
    } else {
      return defVal;
    }
  }

  
  void readRetryEvent(
      String text,
      IOException ex,
      int attempts,
      boolean idempotent) {
    readThrottleEvents.incrementAndGet();
    retryEvent(text, ex, attempts, true);
  }

  
  void writeRetryEvent(
      String text,
      IOException ex,
      int attempts,
      boolean idempotent) {
    writeThrottleEvents.incrementAndGet();
    retryEvent(text, ex, attempts, idempotent);
  }

  
  void scanRetryEvent(
      String text,
      IOException ex,
      int attempts,
      boolean idempotent) {
    scanThrottleEvents.incrementAndGet();
    retryEvent(text, ex, attempts, idempotent);
  }

  
  void retryEvent(
      String text,
      IOException ex,
      int attempts,
      boolean idempotent) {
    if (S3AUtils.isThrottleException(ex)) {
      
      instrumentation.throttled();
      int eventCount = throttleEventCount.addAndGet(1);
      if (attempts == 1 && eventCount < THROTTLE_EVENT_LOG_LIMIT) {
        LOG.warn("DynamoDB IO limits reached in {};"
                + " consider increasing capacity: {}", text, ex.toString());
        LOG.debug("Throttled", ex);
      } else {
        
        LOG.debug("DynamoDB IO limits reached in {};"
                + " consider increasing capacity: {}", text, ex.toString());
      }
    } else if (attempts == 1) {
      
      LOG.info("Retrying {}: {}", text, ex.toString());
      LOG.debug("Retrying {}", text, ex);
    }

    
    instrumentation.retrying();
    if (owner != null) {
      owner.metastoreOperationRetried(ex, attempts, idempotent);
    }
  }

  
  @VisibleForTesting
  public long getReadThrottleEventCount() {
    return readThrottleEvents.get();
  }

  
  @VisibleForTesting
  public long getWriteThrottleEventCount() {
    return writeThrottleEvents.get();
  }

  
  @VisibleForTesting
  public long getScanThrottleEventCount() {
    return scanThrottleEvents.get();
  }

  @VisibleForTesting
  public long getBatchWriteCapacityExceededCount() {
    return batchWriteCapacityExceededEvents.get();
  }

  
  public Invoker getInvoker() {
    return writeOp;
  }

  
  public <T> Iterable<T> wrapWithRetries(
      final Iterable<T> source) {
    return new RetryingCollection<>("scan dynamoDB table", scanOp, source);
  }

  
  private void recordsWritten(final int count) {
    instrumentation.recordsWritten(count);
  }

  
  private void recordsRead(final int count) {
    instrumentation.recordsRead(count);
  }
  
  private void recordsDeleted(final int count) {
    instrumentation.recordsDeleted(count);
  }

  
  @Override
  public RenameTracker initiateRenameOperation(
      final StoreContext storeContext,
      final Path source,
      final S3AFileStatus sourceStatus,
      final Path dest) {
    return new ProgressiveRenameTracker(storeContext, this, source, dest,
        new AncestorState(this, BulkOperationState.OperationType.Rename, dest));
  }

  
  @Override
  public int markAsAuthoritative(
      final Path dest,
      final BulkOperationState operationState) throws IOException {
    if (operationState == null) {
      return 0;
    }
    Preconditions.checkArgument(operationState instanceof AncestorState,
        "Not an AncestorState %s", operationState);
    final AncestorState state = (AncestorState)operationState;
    
    final String simpleDestKey = pathToParentKey(dest);
    final String destPathKey = simpleDestKey + "/";
    final String opId = AncestorState.stateAsString(state);
    LOG.debug("{}: marking directories under {} as authoritative",
        opId, destPathKey);

    
    final List<DDBPathMetadata> dirsToUpdate = new ArrayList<>();
    synchronized (state) {
      for (Map.Entry<Path, DDBPathMetadata> entry :
          state.getAncestry().entrySet()) {
        final Path path = entry.getKey();
        final DDBPathMetadata md = entry.getValue();
        final String key = pathToParentKey(path);
        if (md.getFileStatus().isDirectory()
            && (key.equals(simpleDestKey) || key.startsWith(destPathKey))) {
          
          md.setAuthoritativeDir(true);
          md.setLastUpdated(ttlTimeProvider.getNow());
          LOG.debug("{}: added {}", opId, key);
          dirsToUpdate.add(md);
        }
      }
      processBatchWriteRequest(state,
          null, pathMetadataToItem(dirsToUpdate));
    }
    return dirsToUpdate.size();
  }

  @Override
  public AncestorState initiateBulkWrite(
      final BulkOperationState.OperationType operation,
      final Path dest) {
    return new AncestorState(this, operation, dest);
  }

  @Override
  public void setTtlTimeProvider(ITtlTimeProvider ttlTimeProvider) {
    this.ttlTimeProvider = ttlTimeProvider;
  }

  
  String getUsername() {
    return username;
  }

  
  private static void logPut(
      @Nullable AncestorState state,
      Item[] items) {
    if (OPERATIONS_LOG.isDebugEnabled()) {
      
      String stateStr = AncestorState.stateAsString(state);
      for (Item item : items) {
        boolean tombstone = !itemExists(item);
        boolean isDir = getBoolAttribute(item, IS_DIR, false);
        boolean auth = getBoolAttribute(item, IS_AUTHORITATIVE, false);
        OPERATIONS_LOG.debug("{} {} {}{}{}",
            stateStr,
            tombstone ? "TOMBSTONE" : "PUT",
            itemPrimaryKeyToString(item),
            auth ? " [auth]" : "",
            isDir ? " directory" : "");
      }
    }
  }

  
  private static void logPut(
      @Nullable AncestorState state,
      Item item) {
    if (OPERATIONS_LOG.isDebugEnabled()) {
      
      logPut(state, new Item[]{item});
    }
  }

  
  private static void logDelete(
      @Nullable AncestorState state,
      PrimaryKey[] keysDeleted) {
    if (OPERATIONS_LOG.isDebugEnabled()) {
      
      String stateStr = AncestorState.stateAsString(state);
      for (PrimaryKey key : keysDeleted) {
        OPERATIONS_LOG.debug("{} DELETE {}",
            stateStr, primaryKeyToString(key));
      }
    }
  }

  
  private static void logDelete(
      @Nullable AncestorState state,
      PrimaryKey key) {
    if (OPERATIONS_LOG.isDebugEnabled()) {
      logDelete(state, new PrimaryKey[]{key});
    }
  }

  
  private AncestorState extractOrCreate(@Nullable BulkOperationState state,
      BulkOperationState.OperationType operation) {
    if (state != null) {
      return (AncestorState) state;
    } else {
      return new AncestorState(this, operation, null);
    }
  }

  @Override
  public MetastoreInstrumentation getInstrumentation() {
    return instrumentation;
  }

  
  @VisibleForTesting
  static final class AncestorState extends BulkOperationState {

    
    private static final AtomicLong ID_COUNTER = new AtomicLong(0);

    
    private final DynamoDBMetadataStore store;

    
    private final long id;

    
    private final Map<Path, DDBPathMetadata> ancestry = new HashMap<>();

    
    private final Path dest;

    
    AncestorState(
        @Nullable final DynamoDBMetadataStore store,
        final OperationType operation,
        @Nullable final Path dest) {
      super(operation);
      this.store = store;
      this.dest = dest;
      this.id = ID_COUNTER.addAndGet(1);
    }

    int size() {
      return ancestry.size();
    }

    
    Map<Path, DDBPathMetadata> getAncestry() {
      return ancestry;
    }

    public Path getDest() {
      return dest;
    }

    long getId() {
      return id;
    }

    @Override
    public String toString() {
      final StringBuilder sb = new StringBuilder(
          "AncestorState{");
      sb.append("operation=").append(getOperation());
      sb.append("id=").append(id);
      sb.append("; dest=").append(dest);
      sb.append("; size=").append(size());
      sb.append("; paths={")
          .append(StringUtils.join(ancestry.keySet(), " "))
          .append('}');
      sb.append('}');
      return sb.toString();
    }

    
    boolean contains(Path p) {
      return get(p) != null;
    }

    DDBPathMetadata put(Path p, DDBPathMetadata md) {
      return ancestry.put(p, md);
    }

    DDBPathMetadata put(DDBPathMetadata md) {
      return ancestry.put(md.getFileStatus().getPath(), md);
    }

    DDBPathMetadata get(Path p) {
      return ancestry.get(p);
    }

    
    boolean findEntry(
        final Path path,
        final boolean failOnFile) throws PathIOException {
      final DDBPathMetadata ancestor = get(path);
      if (ancestor != null) {
        
        if (!ancestor.getFileStatus().isDirectory()) {
          
          final String message = E_INCONSISTENT_UPDATE + " entry is " + ancestor
              .getFileStatus();
          LOG.error(message);
          if (failOnFile) {
            
            throw new PathIOException(path.toString(), message);
          }
        }
        return true;
      } else {
        return false;
      }
    }

    
    @Override
    public void close() throws IOException {
      if (LOG.isDebugEnabled() && store != null) {
        LOG.debug("Auditing {}", stateAsString(this));
        for (Map.Entry<Path, DDBPathMetadata> entry : ancestry
            .entrySet()) {
          Path path = entry.getKey();
          DDBPathMetadata expected = entry.getValue();
          if (expected.isDeleted()) {
            
            
            continue;
          }
          DDBPathMetadata actual;
          try {
            actual = store.get(path);
          } catch (IOException e) {
            LOG.debug("Retrieving {}", path, e);
            
            return;
          }
          if (actual == null || actual.isDeleted()) {
            String message = "Metastore entry for path "
                + path + " deleted during bulk "
                + getOperation() + " operation";
            LOG.debug(message);
          } else {
            if (actual.getFileStatus().isDirectory() !=
                expected.getFileStatus().isDirectory()) {
              
              String message = "Metastore entry for path "
                  + path + " changed during bulk "
                  + getOperation() + " operation"
                  + " from " + expected
                  + " to " + actual;
              LOG.debug(message);
            }
          }

        }
      }
    }

    
    private static String stateAsString(@Nullable AncestorState state) {
      String stateStr;
      if (state != null) {
        stateStr = String.format("#(%s-%04d)",
            state.getOperation(),
            state.getId());
      } else {
        stateStr = "#()";
      }
      return stateStr;
    }
  }

  protected DynamoDBMetadataStoreTableManager getTableHandler() {
    Preconditions.checkNotNull(tableHandler, "Not initialized");
    return tableHandler;
  }
}
