public class DefaultS3ClientFactory extends Configured    implements S3ClientFactory {  private static final String S3_SERVICE_NAME = "s3";    protected static final Logger LOG =      LoggerFactory.getLogger(DefaultS3ClientFactory.class);    private static final LogExactlyOnce WARN_OF_DEFAULT_REGION_CHAIN =      new LogExactlyOnce(LOG);    private static final String SDK_REGION_CHAIN_IN_USE =      "S3A filesystem client is using"          + " the SDK region resolution chain.";    private static final LogExactlyOnce IGNORE_CSE_WARN = new LogExactlyOnce(LOG);    private String bucket;    @Override  public AmazonS3 createS3Client(      final URI uri,      final S3ClientCreationParameters parameters) throws IOException {    Configuration conf = getConf();    bucket = uri.getHost();    final ClientConfiguration awsConf = S3AUtils        .createAwsConf(conf,            bucket,            Constants.AWS_SERVICE_IDENTIFIER_S3);        parameters.getHeaders().forEach((h, v) ->        awsConf.addHeader(h, v));                        awsConf.setUseThrottleRetries(        conf.getBoolean(EXPERIMENTAL_AWS_INTERNAL_THROTTLING,            EXPERIMENTAL_AWS_INTERNAL_THROTTLING_DEFAULT));    if (!StringUtils.isEmpty(parameters.getUserAgentSuffix())) {      awsConf.setUserAgentSuffix(parameters.getUserAgentSuffix());    }        S3AEncryptionMethods encryptionMethods =        getEncryptionAlgorithm(bucket, conf);    try {            if (S3AEncryptionMethods.CSE_KMS.getMethod()          .equals(encryptionMethods.getMethod())) {        return buildAmazonS3EncryptionClient(            awsConf,            parameters);      } else {        return buildAmazonS3Client(            awsConf,            parameters);      }    } catch (SdkClientException e) {            throw translateException("creating AWS S3 client", uri.toString(), e);    }  }    protected AmazonS3 buildAmazonS3EncryptionClient(      final ClientConfiguration awsConf,      final S3ClientCreationParameters parameters) throws IOException {    AmazonS3 client;    AmazonS3EncryptionClientV2Builder builder =        new AmazonS3EncryptionClientV2Builder();    Configuration conf = getConf();        String kmsKeyId = getS3EncryptionKey(bucket, conf, true);        Preconditions.checkArgument(!StringUtils.isBlank(kmsKeyId), "CSE-KMS "        + "method requires KMS key ID. Use " + S3_ENCRYPTION_KEY        + " property to set it. ");    EncryptionMaterialsProvider materialsProvider =        new KMSEncryptionMaterialsProvider(kmsKeyId);    builder.withEncryptionMaterialsProvider(materialsProvider);        configureBasicParams(builder, awsConf, parameters);        AmazonS3EncryptionClientV2Builder.EndpointConfiguration epr        = createEndpointConfiguration(parameters.getEndpoint(),        awsConf, getConf().getTrimmed(AWS_REGION));    configureEndpoint(builder, epr);        CryptoConfigurationV2 cryptoConfigurationV2 =        new CryptoConfigurationV2(CryptoMode.AuthenticatedEncryption)            .withRangeGetMode(CryptoRangeGetMode.ALL);    if (epr != null) {      cryptoConfigurationV2          .withAwsKmsRegion(RegionUtils.getRegion(epr.getSigningRegion()));      LOG.debug("KMS region used: {}", cryptoConfigurationV2.getAwsKmsRegion());    }    builder.withCryptoConfiguration(cryptoConfigurationV2);    client = builder.build();    IGNORE_CSE_WARN.info("S3 client-side encryption enabled: Ignore S3-CSE "        + "Warnings.");    return client;  }    protected AmazonS3 buildAmazonS3Client(      final ClientConfiguration awsConf,      final S3ClientCreationParameters parameters) {    AmazonS3ClientBuilder b = AmazonS3Client.builder();    configureBasicParams(b, awsConf, parameters);        AwsClientBuilder.EndpointConfiguration epr        = createEndpointConfiguration(parameters.getEndpoint(),        awsConf, getConf().getTrimmed(AWS_REGION));    configureEndpoint(b, epr);    final AmazonS3 client = b.build();    return client;  }    private void configureBasicParams(AmazonS3Builder builder,      ClientConfiguration awsConf, S3ClientCreationParameters parameters) {    builder.withCredentials(parameters.getCredentialSet());    builder.withClientConfiguration(awsConf);    builder.withPathStyleAccessEnabled(parameters.isPathStyleAccess());    if (parameters.getMetrics() != null) {      builder.withMetricsCollector(          new AwsStatisticsCollector(parameters.getMetrics()));    }    if (parameters.getRequestHandlers() != null) {      builder.withRequestHandlers(          parameters.getRequestHandlers().toArray(new RequestHandler2[0]));    }    if (parameters.getMonitoringListener() != null) {      builder.withMonitoringListener(parameters.getMonitoringListener());    }  }    private void configureEndpoint(      AmazonS3Builder builder,      AmazonS3Builder.EndpointConfiguration epr) {    if (epr != null) {            builder.withEndpointConfiguration(epr);    } else {                  builder.withForceGlobalBucketAccessEnabled(true);            String region = getConf().getTrimmed(AWS_REGION, AWS_S3_CENTRAL_REGION);      LOG.debug("fs.s3a.endpoint.region=\"{}\"", region);      if (!region.isEmpty()) {                        LOG.debug("Using default endpoint; setting region to {}", region);        builder.setRegion(region);      } else {                                WARN_OF_DEFAULT_REGION_CHAIN.warn(SDK_REGION_CHAIN_IN_USE);        LOG.debug(SDK_REGION_CHAIN_IN_USE);      }    }  }    protected static AmazonS3 configureAmazonS3Client(AmazonS3 s3,      final String endPoint,      final boolean pathStyleAccess)      throws IllegalArgumentException {    if (!endPoint.isEmpty()) {      try {        s3.setEndpoint(endPoint);      } catch (IllegalArgumentException e) {        String msg = "Incorrect endpoint: "  + e.getMessage();        LOG.error(msg);        throw new IllegalArgumentException(msg, e);      }    }    if (pathStyleAccess) {      LOG.debug("Enabling path style access!");      s3.setS3ClientOptions(S3ClientOptions.builder()          .setPathStyleAccess(true)          .build());    }    return s3;  }    @VisibleForTesting  public static AwsClientBuilder.EndpointConfiguration      createEndpointConfiguration(      final String endpoint, final ClientConfiguration awsConf,      String awsRegion) {    LOG.debug("Creating endpoint configuration for \"{}\"", endpoint);    if (endpoint == null || endpoint.isEmpty()) {            LOG.debug("Using default endpoint -no need to generate a configuration");      return null;    }    final URI epr = RuntimeHttpUtils.toUri(endpoint, awsConf);    LOG.debug("Endpoint URI = {}", epr);    String region = awsRegion;    if (StringUtils.isBlank(region)) {      if (!ServiceUtils.isS3USStandardEndpoint(endpoint)) {        LOG.debug("Endpoint {} is not the default; parsing", epr);        region = AwsHostNameUtils.parseRegion(            epr.getHost(),            S3_SERVICE_NAME);      } else {                LOG.debug("Endpoint {} is the standard one; declare region as null",            epr);        region = null;      }    }    LOG.debug("Region for endpoint {}, URI {} is determined as {}",        endpoint, epr, region);    return new AwsClientBuilder.EndpointConfiguration(endpoint, region);  }}