
package org.apache.hadoop.yarn.appcatalog.application;

import org.apache.commons.io.FileUtils;
import org.apache.solr.client.solrj.SolrClient;
import org.apache.solr.client.solrj.SolrServerException;
import org.apache.solr.client.solrj.embedded.EmbeddedSolrServer;
import org.apache.solr.client.solrj.request.CoreAdminRequest;
import org.apache.solr.core.NodeConfig;
import org.apache.solr.core.SolrResourceLoader;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;


public final class EmbeddedSolrServerFactory {

  private EmbeddedSolrServerFactory() {
  }

  
  public static SolrClient create(final String solrHome,
      final String configSetHome, final String coreName)
      throws IOException, SolrServerException {
    return create(solrHome, configSetHome, coreName, true);
  }

  
  public static SolrClient create(final String solrHome,
      final String configSetHome, final String coreName,
      final boolean cleanSolrHome) throws IOException, SolrServerException {

    final File solrHomeDir = new File(solrHome);
    if (solrHomeDir.exists()) {
      FileUtils.deleteDirectory(solrHomeDir);
      solrHomeDir.mkdirs();
    } else {
      solrHomeDir.mkdirs();
    }

    final Path configSetPath = Paths.get(configSetHome).toAbsolutePath();

    final NodeConfig config = new NodeConfig.NodeConfigBuilder(
        "embeddedSolrServerNode", solrHomeDir.toPath())
            .setConfigSetBaseDirectory(configSetPath.toString()).build();

    final EmbeddedSolrServer embeddedSolrServer = new EmbeddedSolrServer(config,
        coreName);

    final CoreAdminRequest.Create createRequest = new CoreAdminRequest.Create();
    createRequest.setCoreName(coreName);
    createRequest.setConfigSet(coreName);
    embeddedSolrServer.request(createRequest);

    return embeddedSolrServer;
  }

}
