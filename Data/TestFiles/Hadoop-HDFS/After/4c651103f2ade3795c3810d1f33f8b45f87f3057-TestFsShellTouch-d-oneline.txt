public class TestFsShellTouch {  static final Logger LOG = LoggerFactory.getLogger(TestFsShellTouch.class);  static FsShell shell;  static LocalFileSystem lfs;  static Path testRootDir;  @BeforeClass  public static void setup() throws Exception {    Configuration conf = new Configuration();    shell = new FsShell(conf);    lfs = FileSystem.getLocal(conf);    testRootDir = lfs.makeQualified(        new Path(GenericTestUtils.getTempPath("testFsShell")));    lfs.mkdirs(testRootDir);    lfs.setWorkingDirectory(testRootDir);  }  @Before  public void prepFiles() throws Exception {    lfs.setVerifyChecksum(true);    lfs.setWriteChecksum(true);  }  private int shellRun(String... args) throws Exception {    int exitCode = shell.run(args);    LOG.info("exit " + exitCode + " - " + StringUtils.join(" ", args));    return exitCode;  }  @Test  public void testTouchz() throws Exception {        final String newFileName = "newFile";    final Path newFile = new Path(newFileName);    lfs.delete(newFile, true);    assertThat(lfs.exists(newFile), is(false));    assertThat("Expected successful touchz on a new file",        shellRun("-touchz", newFileName), is(0));    shellRun("-ls", newFileName);    assertThat("Expected successful touchz on an existing zero-length file",        shellRun("-touchz", newFileName), is(0));        final String noDirName = "noDir";    final Path noDir = new Path(noDirName);    lfs.delete(noDir, true);    assertThat(lfs.exists(noDir), is(false));    assertThat("Expected failed touchz in a non-existent directory",        shellRun("-touchz", noDirName + "/foo"), is(not(0)));  }  @Test  public void testTouch() throws Exception {        final String newFileName = "newFile2";    final Path newFile = new Path(newFileName);    lfs.delete(newFile, true);    assertThat(lfs.exists(newFile), is(false));    {      assertThat(          "Expected successful touch on a non-existent file with -c option",          shellRun("-touch", "-c", newFileName), is(0));      assertThat(lfs.exists(newFile), is(false));    }    {      String strTime = formatTimestamp(System.currentTimeMillis());      Date dateObj = parseTimestamp(strTime);      assertThat(          "Expected successful touch on a new file with a specified timestamp",          shellRun("-touch", "-t", strTime, newFileName), is(0));      FileStatus new_status = lfs.getFileStatus(newFile);      assertThat(new_status.getAccessTime(), is(dateObj.getTime()));      assertThat(new_status.getModificationTime(), is(dateObj.getTime()));    }    FileStatus fstatus = lfs.getFileStatus(newFile);    {      String strTime = formatTimestamp(System.currentTimeMillis());      Date dateObj = parseTimestamp(strTime);      assertThat("Expected successful touch with a specified access time",          shellRun("-touch", "-a", "-t", strTime, newFileName), is(0));      FileStatus new_status = lfs.getFileStatus(newFile);                  assertThat(new_status.getAccessTime(), is(dateObj.getTime()));      assertThat(new_status.getModificationTime(),          is(fstatus.getModificationTime()));    }    fstatus = lfs.getFileStatus(newFile);    {      String strTime = formatTimestamp(System.currentTimeMillis());      Date dateObj = parseTimestamp(strTime);      assertThat(          "Expected successful touch with a specified modification time",          shellRun("-touch", "-m", "-t", strTime, newFileName), is(0));                  FileStatus new_status = lfs.getFileStatus(newFile);      assertThat(new_status.getAccessTime(), is(fstatus.getAccessTime()));      assertThat(new_status.getModificationTime(), is(dateObj.getTime()));    }    {      String strTime = formatTimestamp(System.currentTimeMillis());      Date dateObj = parseTimestamp(strTime);      assertThat("Expected successful touch with a specified timestamp",          shellRun("-touch", "-t", strTime, newFileName), is(0));            FileStatus new_status = lfs.getFileStatus(newFile);      assertThat(new_status.getAccessTime(), is(dateObj.getTime()));      assertThat(new_status.getModificationTime(), is(dateObj.getTime()));    }    {      String strTime = formatTimestamp(System.currentTimeMillis());      Date dateObj = parseTimestamp(strTime);      assertThat("Expected successful touch with a specified timestamp",          shellRun("-touch", "-a", "-m", "-t", strTime, newFileName), is(0));            FileStatus new_status = lfs.getFileStatus(newFile);      assertThat(new_status.getAccessTime(), is(dateObj.getTime()));      assertThat(new_status.getModificationTime(), is(dateObj.getTime()));    }    {      assertThat("Expected failed touch with a missing timestamp",          shellRun("-touch", "-t", newFileName), is(not(0)));    }        String strTime = formatTimestamp(System.currentTimeMillis());    Date dateObj = parseTimestamp(strTime);    assertThat(        "Expected successful touch on a non-existent file with -c option",        shellRun("-touch", "-c", "-t", strTime, newFileName), is(0));    FileStatus fileStatus = lfs.getFileStatus(newFile);    assertThat(fileStatus.getAccessTime(), is(dateObj.getTime()));    assertThat(fileStatus.getModificationTime(), is(dateObj.getTime()));  }  private String formatTimestamp(long timeInMillis) {    return (new Touch()).getDateFormat().format(new Date(timeInMillis));  }  private Date parseTimestamp(String tstamp) throws ParseException {    return (new Touch()).getDateFormat().parse(tstamp);  }}