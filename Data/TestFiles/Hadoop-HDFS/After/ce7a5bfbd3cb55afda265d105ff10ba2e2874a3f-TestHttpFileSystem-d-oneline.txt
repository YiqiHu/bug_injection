public class TestHttpFileSystem {  private final Configuration conf = new Configuration(false);  @Before  public void setUp() {    conf.set("fs.http.impl", HttpFileSystem.class.getCanonicalName());  }  @Test  public void testHttpFileSystem() throws IOException, URISyntaxException,      InterruptedException {    final String data = "foo";    try (MockWebServer server = new MockWebServer()) {      IntStream.rangeClosed(1, 3).forEach(i -> server.enqueue(new MockResponse().setBody(data)));      server.start();      URI uri = URI.create(String.format("http://%s:%d", server.getHostName(),          server.getPort()));      FileSystem fs = FileSystem.get(uri, conf);      assertSameData(fs, new Path(new URL(uri.toURL(), "/foo").toURI()), data);      assertSameData(fs, new Path("/foo"), data);      assertSameData(fs, new Path("foo"), data);      RecordedRequest req = server.takeRequest();      assertEquals("/foo", req.getPath());    }  }  @Test  public void testHttpFileStatus() throws IOException, URISyntaxException, InterruptedException {    URI uri = new URI("http://www.example.com");    FileSystem fs = FileSystem.get(uri, conf);    URI expectedUri = uri.resolve("/foo");    assertEquals(fs.getFileStatus(new Path(new Path(uri), "/foo")).getPath().toUri(), expectedUri);    assertEquals(fs.getFileStatus(new Path("/foo")).getPath().toUri(), expectedUri);    assertEquals(fs.getFileStatus(new Path("foo")).getPath().toUri(), expectedUri);  }  private void assertSameData(FileSystem fs, Path path, String data) throws IOException {    try (InputStream is = fs.open(            path,            4096)) {      byte[] buf = new byte[data.length()];      IOUtils.readFully(is, buf, 0, buf.length);      assertEquals(data, new String(buf, StandardCharsets.UTF_8));    }  }}