public class AbfsClient implements Closeable {  public static final Logger LOG = LoggerFactory.getLogger(AbfsClient.class);  private final URL baseUrl;  private final SharedKeyCredentials sharedKeyCredentials;  private final String xMsVersion = "2019-12-12";  private final ExponentialRetryPolicy retryPolicy;  private final String filesystem;  private final AbfsConfiguration abfsConfiguration;  private final String userAgent;  private final AbfsPerfTracker abfsPerfTracker;  private final String clientProvidedEncryptionKey;  private final String clientProvidedEncryptionKeySHA;  private final String accountName;  private final AuthType authType;  private AccessTokenProvider tokenProvider;  private SASTokenProvider sasTokenProvider;  private final AbfsCounters abfsCounters;  private final ListeningScheduledExecutorService executorService;    private static final LogExactlyOnce ABFS_METADATA_INCOMPLETE_RENAME_FAILURE =      new LogExactlyOnce(LOG);  private AbfsClient(final URL baseUrl, final SharedKeyCredentials sharedKeyCredentials,                    final AbfsConfiguration abfsConfiguration,                    final AbfsClientContext abfsClientContext)      throws IOException {    this.baseUrl = baseUrl;    this.sharedKeyCredentials = sharedKeyCredentials;    String baseUrlString = baseUrl.toString();    this.filesystem = baseUrlString.substring(baseUrlString.lastIndexOf(FORWARD_SLASH) + 1);    this.abfsConfiguration = abfsConfiguration;    this.retryPolicy = abfsClientContext.getExponentialRetryPolicy();    this.accountName = abfsConfiguration.getAccountName().substring(0, abfsConfiguration.getAccountName().indexOf(AbfsHttpConstants.DOT));    this.authType = abfsConfiguration.getAuthType(accountName);    String encryptionKey = this.abfsConfiguration        .getClientProvidedEncryptionKey();    if (encryptionKey != null) {      this.clientProvidedEncryptionKey = getBase64EncodedString(encryptionKey);      this.clientProvidedEncryptionKeySHA = getBase64EncodedString(          getSHA256Hash(encryptionKey));    } else {      this.clientProvidedEncryptionKey = null;      this.clientProvidedEncryptionKeySHA = null;    }    String sslProviderName = null;    if (this.baseUrl.toString().startsWith(HTTPS_SCHEME)) {      try {        LOG.trace("Initializing DelegatingSSLSocketFactory with {} SSL "                + "Channel Mode", this.abfsConfiguration.getPreferredSSLFactoryOption());        DelegatingSSLSocketFactory.initializeDefaultFactory(this.abfsConfiguration.getPreferredSSLFactoryOption());        sslProviderName = DelegatingSSLSocketFactory.getDefaultFactory().getProviderName();      } catch (IOException e) {                LOG.trace("NonCritFailure: DelegatingSSLSocketFactory Init failed : "            + "{}", e.getMessage());      }    }    this.userAgent = initializeUserAgent(abfsConfiguration, sslProviderName);    this.abfsPerfTracker = abfsClientContext.getAbfsPerfTracker();    this.abfsCounters = abfsClientContext.getAbfsCounters();    ThreadFactory tf =        new ThreadFactoryBuilder().setNameFormat("AbfsClient Lease Ops").setDaemon(true).build();    this.executorService = MoreExecutors.listeningDecorator(        HadoopExecutors.newScheduledThreadPool(this.abfsConfiguration.getNumLeaseThreads(), tf));  }  public AbfsClient(final URL baseUrl, final SharedKeyCredentials sharedKeyCredentials,                    final AbfsConfiguration abfsConfiguration,                    final AccessTokenProvider tokenProvider,                    final AbfsClientContext abfsClientContext)      throws IOException {    this(baseUrl, sharedKeyCredentials, abfsConfiguration, abfsClientContext);    this.tokenProvider = tokenProvider;  }  public AbfsClient(final URL baseUrl, final SharedKeyCredentials sharedKeyCredentials,                    final AbfsConfiguration abfsConfiguration,                    final SASTokenProvider sasTokenProvider,                    final AbfsClientContext abfsClientContext)      throws IOException {    this(baseUrl, sharedKeyCredentials, abfsConfiguration, abfsClientContext);    this.sasTokenProvider = sasTokenProvider;  }  private byte[] getSHA256Hash(String key) throws IOException {    try {      final MessageDigest digester = MessageDigest.getInstance("SHA-256");      return digester.digest(key.getBytes(StandardCharsets.UTF_8));    } catch (NoSuchAlgorithmException e) {      throw new IOException(e);    }  }  private String getBase64EncodedString(String key) {    return getBase64EncodedString(key.getBytes(StandardCharsets.UTF_8));  }  private String getBase64EncodedString(byte[] bytes) {    return Base64.getEncoder().encodeToString(bytes);  }  @Override  public void close() throws IOException {    if (tokenProvider instanceof Closeable) {      IOUtils.cleanupWithLogger(LOG, (Closeable) tokenProvider);    }    HadoopExecutors.shutdown(executorService, LOG, 0, TimeUnit.SECONDS);  }  public String getFileSystem() {    return filesystem;  }  protected AbfsPerfTracker getAbfsPerfTracker() {    return abfsPerfTracker;  }  ExponentialRetryPolicy getRetryPolicy() {    return retryPolicy;  }  SharedKeyCredentials getSharedKeyCredentials() {    return sharedKeyCredentials;  }  List<AbfsHttpHeader> createDefaultHeaders() {    final List<AbfsHttpHeader> requestHeaders = new ArrayList<AbfsHttpHeader>();    requestHeaders.add(new AbfsHttpHeader(X_MS_VERSION, xMsVersion));    requestHeaders.add(new AbfsHttpHeader(ACCEPT, APPLICATION_JSON            + COMMA + SINGLE_WHITE_SPACE + APPLICATION_OCTET_STREAM));    requestHeaders.add(new AbfsHttpHeader(ACCEPT_CHARSET,            UTF_8));    requestHeaders.add(new AbfsHttpHeader(CONTENT_TYPE, EMPTY_STRING));    requestHeaders.add(new AbfsHttpHeader(USER_AGENT, userAgent));    return requestHeaders;  }  private void addCustomerProvidedKeyHeaders(      final List<AbfsHttpHeader> requestHeaders) {    if (clientProvidedEncryptionKey != null) {      requestHeaders.add(          new AbfsHttpHeader(X_MS_ENCRYPTION_KEY, clientProvidedEncryptionKey));      requestHeaders.add(new AbfsHttpHeader(X_MS_ENCRYPTION_KEY_SHA256,          clientProvidedEncryptionKeySHA));      requestHeaders.add(new AbfsHttpHeader(X_MS_ENCRYPTION_ALGORITHM,          SERVER_SIDE_ENCRYPTION_ALGORITHM));    }  }  AbfsUriQueryBuilder createDefaultUriQueryBuilder() {    final AbfsUriQueryBuilder abfsUriQueryBuilder = new AbfsUriQueryBuilder();    abfsUriQueryBuilder.addQuery(QUERY_PARAM_TIMEOUT, DEFAULT_TIMEOUT);    return abfsUriQueryBuilder;  }  public AbfsRestOperation createFilesystem(TracingContext tracingContext) throws AzureBlobFileSystemException {    final List<AbfsHttpHeader> requestHeaders = createDefaultHeaders();    final AbfsUriQueryBuilder abfsUriQueryBuilder = new AbfsUriQueryBuilder();    abfsUriQueryBuilder.addQuery(QUERY_PARAM_RESOURCE, FILESYSTEM);    final URL url = createRequestUrl(abfsUriQueryBuilder.toString());    final AbfsRestOperation op = new AbfsRestOperation(            AbfsRestOperationType.CreateFileSystem,            this,            HTTP_METHOD_PUT,            url,            requestHeaders);    op.execute(tracingContext);    return op;  }  public AbfsRestOperation setFilesystemProperties(final String properties, TracingContext tracingContext) throws AzureBlobFileSystemException {    final List<AbfsHttpHeader> requestHeaders = createDefaultHeaders();            requestHeaders.add(new AbfsHttpHeader(X_HTTP_METHOD_OVERRIDE,            HTTP_METHOD_PATCH));    requestHeaders.add(new AbfsHttpHeader(X_MS_PROPERTIES,            properties));    final AbfsUriQueryBuilder abfsUriQueryBuilder = createDefaultUriQueryBuilder();    abfsUriQueryBuilder.addQuery(QUERY_PARAM_RESOURCE, FILESYSTEM);    final URL url = createRequestUrl(abfsUriQueryBuilder.toString());    final AbfsRestOperation op = new AbfsRestOperation(            AbfsRestOperationType.SetFileSystemProperties,            this,            HTTP_METHOD_PUT,            url,            requestHeaders);    op.execute(tracingContext);    return op;  }  public AbfsRestOperation listPath(final String relativePath, final boolean recursive, final int listMaxResults,                                    final String continuation, TracingContext tracingContext)          throws AzureBlobFileSystemException {    final List<AbfsHttpHeader> requestHeaders = createDefaultHeaders();    final AbfsUriQueryBuilder abfsUriQueryBuilder = createDefaultUriQueryBuilder();    abfsUriQueryBuilder.addQuery(QUERY_PARAM_RESOURCE, FILESYSTEM);    abfsUriQueryBuilder.addQuery(QUERY_PARAM_DIRECTORY, getDirectoryQueryParameter(relativePath));    abfsUriQueryBuilder.addQuery(QUERY_PARAM_RECURSIVE, String.valueOf(recursive));    abfsUriQueryBuilder.addQuery(QUERY_PARAM_CONTINUATION, continuation);    abfsUriQueryBuilder.addQuery(QUERY_PARAM_MAXRESULTS, String.valueOf(listMaxResults));    abfsUriQueryBuilder.addQuery(HttpQueryParams.QUERY_PARAM_UPN, String.valueOf(abfsConfiguration.isUpnUsed()));    appendSASTokenToQuery(relativePath, SASTokenProvider.LIST_OPERATION, abfsUriQueryBuilder);    final URL url = createRequestUrl(abfsUriQueryBuilder.toString());    final AbfsRestOperation op = new AbfsRestOperation(            AbfsRestOperationType.ListPaths,            this,            HTTP_METHOD_GET,            url,            requestHeaders);    op.execute(tracingContext);    return op;  }  public AbfsRestOperation getFilesystemProperties(TracingContext tracingContext) throws AzureBlobFileSystemException {    final List<AbfsHttpHeader> requestHeaders = createDefaultHeaders();    final AbfsUriQueryBuilder abfsUriQueryBuilder = createDefaultUriQueryBuilder();    abfsUriQueryBuilder.addQuery(QUERY_PARAM_RESOURCE, FILESYSTEM);    final URL url = createRequestUrl(abfsUriQueryBuilder.toString());    final AbfsRestOperation op = new AbfsRestOperation(            AbfsRestOperationType.GetFileSystemProperties,            this,            HTTP_METHOD_HEAD,            url,            requestHeaders);    op.execute(tracingContext);    return op;  }  public AbfsRestOperation deleteFilesystem(TracingContext tracingContext) throws AzureBlobFileSystemException {    final List<AbfsHttpHeader> requestHeaders = createDefaultHeaders();    final AbfsUriQueryBuilder abfsUriQueryBuilder = createDefaultUriQueryBuilder();    abfsUriQueryBuilder.addQuery(QUERY_PARAM_RESOURCE, FILESYSTEM);    final URL url = createRequestUrl(abfsUriQueryBuilder.toString());    final AbfsRestOperation op = new AbfsRestOperation(            AbfsRestOperationType.DeleteFileSystem,            this,            HTTP_METHOD_DELETE,            url,            requestHeaders);    op.execute(tracingContext);    return op;  }  public AbfsRestOperation createPath(final String path, final boolean isFile, final boolean overwrite,                                      final String permission, final String umask,                                      final boolean isAppendBlob, final String eTag,                                      TracingContext tracingContext) throws AzureBlobFileSystemException {    final List<AbfsHttpHeader> requestHeaders = createDefaultHeaders();    if (isFile) {      addCustomerProvidedKeyHeaders(requestHeaders);    }    if (!overwrite) {      requestHeaders.add(new AbfsHttpHeader(IF_NONE_MATCH, AbfsHttpConstants.STAR));    }    if (permission != null && !permission.isEmpty()) {      requestHeaders.add(new AbfsHttpHeader(HttpHeaderConfigurations.X_MS_PERMISSIONS, permission));    }    if (umask != null && !umask.isEmpty()) {      requestHeaders.add(new AbfsHttpHeader(HttpHeaderConfigurations.X_MS_UMASK, umask));    }    if (eTag != null && !eTag.isEmpty()) {      requestHeaders.add(new AbfsHttpHeader(HttpHeaderConfigurations.IF_MATCH, eTag));    }    final AbfsUriQueryBuilder abfsUriQueryBuilder = createDefaultUriQueryBuilder();    abfsUriQueryBuilder.addQuery(QUERY_PARAM_RESOURCE, isFile ? FILE : DIRECTORY);    if (isAppendBlob) {      abfsUriQueryBuilder.addQuery(QUERY_PARAM_BLOBTYPE, APPEND_BLOB_TYPE);    }    String operation = isFile        ? SASTokenProvider.CREATE_FILE_OPERATION        : SASTokenProvider.CREATE_DIRECTORY_OPERATION;    appendSASTokenToQuery(path, operation, abfsUriQueryBuilder);    final URL url = createRequestUrl(path, abfsUriQueryBuilder.toString());    final AbfsRestOperation op = new AbfsRestOperation(            AbfsRestOperationType.CreatePath,            this,            HTTP_METHOD_PUT,            url,            requestHeaders);    try {      op.execute(tracingContext);    } catch (AzureBlobFileSystemException ex) {            if (!op.hasResult()) {        throw ex;      }      if (!isFile && op.getResult().getStatusCode() == HttpURLConnection.HTTP_CONFLICT) {        String existingResource =            op.getResult().getResponseHeader(X_MS_EXISTING_RESOURCE_TYPE);        if (existingResource != null && existingResource.equals(DIRECTORY)) {          return op;         }      }      throw ex;    }    return op;  }  public AbfsRestOperation acquireLease(final String path, int duration, TracingContext tracingContext) throws AzureBlobFileSystemException {    final List<AbfsHttpHeader> requestHeaders = createDefaultHeaders();    requestHeaders.add(new AbfsHttpHeader(X_MS_LEASE_ACTION, ACQUIRE_LEASE_ACTION));    requestHeaders.add(new AbfsHttpHeader(X_MS_LEASE_DURATION, Integer.toString(duration)));    requestHeaders.add(new AbfsHttpHeader(X_MS_PROPOSED_LEASE_ID, UUID.randomUUID().toString()));    final AbfsUriQueryBuilder abfsUriQueryBuilder = createDefaultUriQueryBuilder();    final URL url = createRequestUrl(path, abfsUriQueryBuilder.toString());    final AbfsRestOperation op = new AbfsRestOperation(        AbfsRestOperationType.LeasePath,        this,        HTTP_METHOD_POST,        url,        requestHeaders);    op.execute(tracingContext);    return op;  }  public AbfsRestOperation renewLease(final String path, final String leaseId,      TracingContext tracingContext) throws AzureBlobFileSystemException {    final List<AbfsHttpHeader> requestHeaders = createDefaultHeaders();    requestHeaders.add(new AbfsHttpHeader(X_MS_LEASE_ACTION, RENEW_LEASE_ACTION));    requestHeaders.add(new AbfsHttpHeader(X_MS_LEASE_ID, leaseId));    final AbfsUriQueryBuilder abfsUriQueryBuilder = createDefaultUriQueryBuilder();    final URL url = createRequestUrl(path, abfsUriQueryBuilder.toString());    final AbfsRestOperation op = new AbfsRestOperation(        AbfsRestOperationType.LeasePath,        this,        HTTP_METHOD_POST,        url,        requestHeaders);    op.execute(tracingContext);    return op;  }  public AbfsRestOperation releaseLease(final String path,      final String leaseId, TracingContext tracingContext) throws AzureBlobFileSystemException {    final List<AbfsHttpHeader> requestHeaders = createDefaultHeaders();    requestHeaders.add(new AbfsHttpHeader(X_MS_LEASE_ACTION, RELEASE_LEASE_ACTION));    requestHeaders.add(new AbfsHttpHeader(X_MS_LEASE_ID, leaseId));    final AbfsUriQueryBuilder abfsUriQueryBuilder = createDefaultUriQueryBuilder();    final URL url = createRequestUrl(path, abfsUriQueryBuilder.toString());    final AbfsRestOperation op = new AbfsRestOperation(        AbfsRestOperationType.LeasePath,        this,        HTTP_METHOD_POST,        url,        requestHeaders);    op.execute(tracingContext);    return op;  }  public AbfsRestOperation breakLease(final String path,      TracingContext tracingContext) throws AzureBlobFileSystemException {    final List<AbfsHttpHeader> requestHeaders = createDefaultHeaders();    requestHeaders.add(new AbfsHttpHeader(X_MS_LEASE_ACTION, BREAK_LEASE_ACTION));    requestHeaders.add(new AbfsHttpHeader(X_MS_LEASE_BREAK_PERIOD, DEFAULT_LEASE_BREAK_PERIOD));    final AbfsUriQueryBuilder abfsUriQueryBuilder = createDefaultUriQueryBuilder();    final URL url = createRequestUrl(path, abfsUriQueryBuilder.toString());    final AbfsRestOperation op = new AbfsRestOperation(        AbfsRestOperationType.LeasePath,        this,        HTTP_METHOD_POST,        url,        requestHeaders);    op.execute(tracingContext);    return op;  }    public AbfsClientRenameResult renamePath(      final String source,      final String destination,      final String continuation,      final TracingContext tracingContext,      final String sourceEtag,      boolean isMetadataIncompleteState)      throws AzureBlobFileSystemException {    final List<AbfsHttpHeader> requestHeaders = createDefaultHeaders();    String encodedRenameSource = urlEncode(FORWARD_SLASH + this.getFileSystem() + source);    if (authType == AuthType.SAS) {      final AbfsUriQueryBuilder srcQueryBuilder = new AbfsUriQueryBuilder();      appendSASTokenToQuery(source, SASTokenProvider.RENAME_SOURCE_OPERATION, srcQueryBuilder);      encodedRenameSource += srcQueryBuilder.toString();    }    LOG.trace("Rename source queryparam added {}", encodedRenameSource);    requestHeaders.add(new AbfsHttpHeader(X_MS_RENAME_SOURCE, encodedRenameSource));    requestHeaders.add(new AbfsHttpHeader(IF_NONE_MATCH, STAR));    final AbfsUriQueryBuilder abfsUriQueryBuilder = createDefaultUriQueryBuilder();    abfsUriQueryBuilder.addQuery(QUERY_PARAM_CONTINUATION, continuation);    appendSASTokenToQuery(destination, SASTokenProvider.RENAME_DESTINATION_OPERATION, abfsUriQueryBuilder);    final URL url = createRequestUrl(destination, abfsUriQueryBuilder.toString());    final AbfsRestOperation op = new AbfsRestOperation(            AbfsRestOperationType.RenamePath,            this,            HTTP_METHOD_PUT,            url,            requestHeaders);    try {      incrementAbfsRenamePath();      op.execute(tracingContext);                                    return new AbfsClientRenameResult(op, isMetadataIncompleteState, isMetadataIncompleteState);    } catch (AzureBlobFileSystemException e) {                if (!op.hasResult()) {          throw e;        }                        if (op.getResult().getStorageErrorCode()            .equals(RENAME_DESTINATION_PARENT_PATH_NOT_FOUND.getErrorCode())            && !isMetadataIncompleteState) {                    ABFS_METADATA_INCOMPLETE_RENAME_FAILURE              .info("Rename Failure attempting to resolve tracking metadata state and retrying.");                              AbfsRestOperation sourceStatusOp = getPathStatus(source, false,              tracingContext);          isMetadataIncompleteState = true;                              AbfsHttpOperation sourceStatusResult = sourceStatusOp.getResult();          String sourceEtagAfterFailure = extractEtagHeader(sourceStatusResult);          renamePath(source, destination, continuation, tracingContext,              sourceEtagAfterFailure, isMetadataIncompleteState);        }                        isMetadataIncompleteState = false;        boolean etagCheckSucceeded = renameIdempotencyCheckOp(            source,            sourceEtag, op, destination, tracingContext);        if (!etagCheckSucceeded) {                              throw e;        }      return new AbfsClientRenameResult(op, true, isMetadataIncompleteState);    }  }  private void incrementAbfsRenamePath() {    abfsCounters.incrementCounter(RENAME_PATH_ATTEMPTS, 1);  }    public boolean renameIdempotencyCheckOp(      final String source,      final String sourceEtag,      final AbfsRestOperation op,      final String destination,      TracingContext tracingContext) {    Preconditions.checkArgument(op.hasResult(), "Operations has null HTTP response");    if ((op.isARetriedRequest())        && (op.getResult().getStatusCode() == HttpURLConnection.HTTP_NOT_FOUND)        && isNotEmpty(sourceEtag)) {                        LOG.debug("rename {} to {} failed, checking etag of destination",          source, destination);      try {        final AbfsRestOperation destStatusOp = getPathStatus(destination,            false, tracingContext);        final AbfsHttpOperation result = destStatusOp.getResult();        return result.getStatusCode() == HttpURLConnection.HTTP_OK            && sourceEtag.equals(extractEtagHeader(result));      } catch (AzureBlobFileSystemException ignored) {              }    }    return false;  }  public AbfsRestOperation append(final String path, final byte[] buffer,      AppendRequestParameters reqParams, final String cachedSasToken, TracingContext tracingContext)      throws AzureBlobFileSystemException {    final List<AbfsHttpHeader> requestHeaders = createDefaultHeaders();    addCustomerProvidedKeyHeaders(requestHeaders);            requestHeaders.add(new AbfsHttpHeader(X_HTTP_METHOD_OVERRIDE,        HTTP_METHOD_PATCH));    if (reqParams.getLeaseId() != null) {      requestHeaders.add(new AbfsHttpHeader(X_MS_LEASE_ID, reqParams.getLeaseId()));    }    final AbfsUriQueryBuilder abfsUriQueryBuilder = createDefaultUriQueryBuilder();    abfsUriQueryBuilder.addQuery(QUERY_PARAM_ACTION, APPEND_ACTION);    abfsUriQueryBuilder.addQuery(QUERY_PARAM_POSITION, Long.toString(reqParams.getPosition()));    if ((reqParams.getMode() == AppendRequestParameters.Mode.FLUSH_MODE) || (        reqParams.getMode() == AppendRequestParameters.Mode.FLUSH_CLOSE_MODE)) {      abfsUriQueryBuilder.addQuery(QUERY_PARAM_FLUSH, TRUE);      if (reqParams.getMode() == AppendRequestParameters.Mode.FLUSH_CLOSE_MODE) {        abfsUriQueryBuilder.addQuery(QUERY_PARAM_CLOSE, TRUE);      }    }        String sasTokenForReuse = appendSASTokenToQuery(path, SASTokenProvider.WRITE_OPERATION,        abfsUriQueryBuilder, cachedSasToken);    final URL url = createRequestUrl(path, abfsUriQueryBuilder.toString());    final AbfsRestOperation op = new AbfsRestOperation(        AbfsRestOperationType.Append,        this,        HTTP_METHOD_PUT,        url,        requestHeaders,        buffer,        reqParams.getoffset(),        reqParams.getLength(),        sasTokenForReuse);    try {      op.execute(tracingContext);    } catch (AzureBlobFileSystemException e) {            if (!op.hasResult()) {        throw e;      }      if (reqParams.isAppendBlob()          && appendSuccessCheckOp(op, path,          (reqParams.getPosition() + reqParams.getLength()), tracingContext)) {        final AbfsRestOperation successOp = new AbfsRestOperation(            AbfsRestOperationType.Append,            this,            HTTP_METHOD_PUT,            url,            requestHeaders,            buffer,            reqParams.getoffset(),            reqParams.getLength(),            sasTokenForReuse);        successOp.hardSetResult(HttpURLConnection.HTTP_OK);        return successOp;      }      throw e;    }    return op;  }            public boolean appendSuccessCheckOp(AbfsRestOperation op, final String path,                                       final long length, TracingContext tracingContext) throws AzureBlobFileSystemException {    if ((op.isARetriedRequest())        && (op.getResult().getStatusCode() == HttpURLConnection.HTTP_BAD_REQUEST)) {      final AbfsRestOperation destStatusOp = getPathStatus(path, false, tracingContext);      if (destStatusOp.getResult().getStatusCode() == HttpURLConnection.HTTP_OK) {        String fileLength = destStatusOp.getResult().getResponseHeader(            HttpHeaderConfigurations.CONTENT_LENGTH);        if (length <= Long.parseLong(fileLength)) {          LOG.debug("Returning success response from append blob idempotency code");          return true;        }      }    }    return false;  }  public AbfsRestOperation flush(final String path, final long position,      boolean retainUncommittedData, boolean isClose,      final String cachedSasToken, final String leaseId,      TracingContext tracingContext) throws AzureBlobFileSystemException {    final List<AbfsHttpHeader> requestHeaders = createDefaultHeaders();    addCustomerProvidedKeyHeaders(requestHeaders);            requestHeaders.add(new AbfsHttpHeader(X_HTTP_METHOD_OVERRIDE,            HTTP_METHOD_PATCH));    if (leaseId != null) {      requestHeaders.add(new AbfsHttpHeader(X_MS_LEASE_ID, leaseId));    }    final AbfsUriQueryBuilder abfsUriQueryBuilder = createDefaultUriQueryBuilder();    abfsUriQueryBuilder.addQuery(QUERY_PARAM_ACTION, FLUSH_ACTION);    abfsUriQueryBuilder.addQuery(QUERY_PARAM_POSITION, Long.toString(position));    abfsUriQueryBuilder.addQuery(QUERY_PARAM_RETAIN_UNCOMMITTED_DATA, String.valueOf(retainUncommittedData));    abfsUriQueryBuilder.addQuery(QUERY_PARAM_CLOSE, String.valueOf(isClose));        String sasTokenForReuse = appendSASTokenToQuery(path, SASTokenProvider.WRITE_OPERATION,        abfsUriQueryBuilder, cachedSasToken);    final URL url = createRequestUrl(path, abfsUriQueryBuilder.toString());    final AbfsRestOperation op = new AbfsRestOperation(            AbfsRestOperationType.Flush,            this,            HTTP_METHOD_PUT,            url,            requestHeaders, sasTokenForReuse);    op.execute(tracingContext);    return op;  }  public AbfsRestOperation setPathProperties(final String path, final String properties,                                             TracingContext tracingContext)      throws AzureBlobFileSystemException {    final List<AbfsHttpHeader> requestHeaders = createDefaultHeaders();    addCustomerProvidedKeyHeaders(requestHeaders);            requestHeaders.add(new AbfsHttpHeader(X_HTTP_METHOD_OVERRIDE,            HTTP_METHOD_PATCH));    requestHeaders.add(new AbfsHttpHeader(X_MS_PROPERTIES, properties));    final AbfsUriQueryBuilder abfsUriQueryBuilder = createDefaultUriQueryBuilder();    abfsUriQueryBuilder.addQuery(QUERY_PARAM_ACTION, SET_PROPERTIES_ACTION);    appendSASTokenToQuery(path, SASTokenProvider.SET_PROPERTIES_OPERATION, abfsUriQueryBuilder);    final URL url = createRequestUrl(path, abfsUriQueryBuilder.toString());    final AbfsRestOperation op = new AbfsRestOperation(            AbfsRestOperationType.SetPathProperties,            this,            HTTP_METHOD_PUT,            url,            requestHeaders);    op.execute(tracingContext);    return op;  }  public AbfsRestOperation getPathStatus(final String path, final boolean includeProperties,                                         TracingContext tracingContext) throws AzureBlobFileSystemException {    final List<AbfsHttpHeader> requestHeaders = createDefaultHeaders();    final AbfsUriQueryBuilder abfsUriQueryBuilder = createDefaultUriQueryBuilder();    String operation = SASTokenProvider.GET_PROPERTIES_OPERATION;    if (!includeProperties) {                        abfsUriQueryBuilder.addQuery(HttpQueryParams.QUERY_PARAM_ACTION, AbfsHttpConstants.GET_STATUS);      operation = SASTokenProvider.GET_STATUS_OPERATION;    } else {      addCustomerProvidedKeyHeaders(requestHeaders);    }    abfsUriQueryBuilder.addQuery(HttpQueryParams.QUERY_PARAM_UPN, String.valueOf(abfsConfiguration.isUpnUsed()));    appendSASTokenToQuery(path, operation, abfsUriQueryBuilder);    final URL url = createRequestUrl(path, abfsUriQueryBuilder.toString());    final AbfsRestOperation op = new AbfsRestOperation(            AbfsRestOperationType.GetPathStatus,            this,            HTTP_METHOD_HEAD,            url,            requestHeaders);    op.execute(tracingContext);    return op;  }  public AbfsRestOperation read(final String path, final long position, final byte[] buffer, final int bufferOffset,                                final int bufferLength, final String eTag, String cachedSasToken,      TracingContext tracingContext) throws AzureBlobFileSystemException {    final List<AbfsHttpHeader> requestHeaders = createDefaultHeaders();    addCustomerProvidedKeyHeaders(requestHeaders);    requestHeaders.add(new AbfsHttpHeader(RANGE,            String.format("bytes=%d-%d", position, position + bufferLength - 1)));    requestHeaders.add(new AbfsHttpHeader(IF_MATCH, eTag));    final AbfsUriQueryBuilder abfsUriQueryBuilder = createDefaultUriQueryBuilder();        String sasTokenForReuse = appendSASTokenToQuery(path, SASTokenProvider.READ_OPERATION,        abfsUriQueryBuilder, cachedSasToken);    final URL url = createRequestUrl(path, abfsUriQueryBuilder.toString());    final AbfsRestOperation op = new AbfsRestOperation(            AbfsRestOperationType.ReadFile,            this,            HTTP_METHOD_GET,            url,            requestHeaders,            buffer,            bufferOffset,            bufferLength, sasTokenForReuse);    op.execute(tracingContext);    return op;  }  public AbfsRestOperation deletePath(final String path, final boolean recursive, final String continuation,                                      TracingContext tracingContext)          throws AzureBlobFileSystemException {    final List<AbfsHttpHeader> requestHeaders = createDefaultHeaders();    final AbfsUriQueryBuilder abfsUriQueryBuilder = createDefaultUriQueryBuilder();    abfsUriQueryBuilder.addQuery(QUERY_PARAM_RECURSIVE, String.valueOf(recursive));    abfsUriQueryBuilder.addQuery(QUERY_PARAM_CONTINUATION, continuation);    String operation = recursive ? SASTokenProvider.DELETE_RECURSIVE_OPERATION : SASTokenProvider.DELETE_OPERATION;    appendSASTokenToQuery(path, operation, abfsUriQueryBuilder);    final URL url = createRequestUrl(path, abfsUriQueryBuilder.toString());    final AbfsRestOperation op = new AbfsRestOperation(            AbfsRestOperationType.DeletePath,            this,            HTTP_METHOD_DELETE,            url,            requestHeaders);    try {    op.execute(tracingContext);    } catch (AzureBlobFileSystemException e) {            if (!op.hasResult()) {        throw e;      }      final AbfsRestOperation idempotencyOp = deleteIdempotencyCheckOp(op);      if (idempotencyOp.getResult().getStatusCode()          == op.getResult().getStatusCode()) {                        throw e;      } else {        return idempotencyOp;      }    }    return op;  }    public AbfsRestOperation deleteIdempotencyCheckOp(final AbfsRestOperation op) {    Preconditions.checkArgument(op.hasResult(), "Operations has null HTTP response");    if ((op.isARetriedRequest())        && (op.getResult().getStatusCode() == HttpURLConnection.HTTP_NOT_FOUND)        && DEFAULT_DELETE_CONSIDERED_IDEMPOTENT) {                  final AbfsRestOperation successOp = new AbfsRestOperation(          AbfsRestOperationType.DeletePath,          this,          HTTP_METHOD_DELETE,          op.getUrl(),          op.getRequestHeaders());      successOp.hardSetResult(HttpURLConnection.HTTP_OK);      LOG.debug("Returning success response from delete idempotency logic");      return successOp;    }    return op;  }  public AbfsRestOperation setOwner(final String path, final String owner, final String group,                                    TracingContext tracingContext)      throws AzureBlobFileSystemException {    final List<AbfsHttpHeader> requestHeaders = createDefaultHeaders();            requestHeaders.add(new AbfsHttpHeader(X_HTTP_METHOD_OVERRIDE,            HTTP_METHOD_PATCH));    if (owner != null && !owner.isEmpty()) {      requestHeaders.add(new AbfsHttpHeader(HttpHeaderConfigurations.X_MS_OWNER, owner));    }    if (group != null && !group.isEmpty()) {      requestHeaders.add(new AbfsHttpHeader(HttpHeaderConfigurations.X_MS_GROUP, group));    }    final AbfsUriQueryBuilder abfsUriQueryBuilder = createDefaultUriQueryBuilder();    abfsUriQueryBuilder.addQuery(HttpQueryParams.QUERY_PARAM_ACTION, AbfsHttpConstants.SET_ACCESS_CONTROL);    appendSASTokenToQuery(path, SASTokenProvider.SET_OWNER_OPERATION, abfsUriQueryBuilder);    final URL url = createRequestUrl(path, abfsUriQueryBuilder.toString());    final AbfsRestOperation op = new AbfsRestOperation(        AbfsRestOperationType.SetOwner,        this,        AbfsHttpConstants.HTTP_METHOD_PUT,        url,        requestHeaders);    op.execute(tracingContext);    return op;  }  public AbfsRestOperation setPermission(final String path, final String permission,                                         TracingContext tracingContext)      throws AzureBlobFileSystemException {    final List<AbfsHttpHeader> requestHeaders = createDefaultHeaders();            requestHeaders.add(new AbfsHttpHeader(X_HTTP_METHOD_OVERRIDE,            HTTP_METHOD_PATCH));    requestHeaders.add(new AbfsHttpHeader(HttpHeaderConfigurations.X_MS_PERMISSIONS, permission));    final AbfsUriQueryBuilder abfsUriQueryBuilder = createDefaultUriQueryBuilder();    abfsUriQueryBuilder.addQuery(HttpQueryParams.QUERY_PARAM_ACTION, AbfsHttpConstants.SET_ACCESS_CONTROL);    appendSASTokenToQuery(path, SASTokenProvider.SET_PERMISSION_OPERATION, abfsUriQueryBuilder);    final URL url = createRequestUrl(path, abfsUriQueryBuilder.toString());    final AbfsRestOperation op = new AbfsRestOperation(        AbfsRestOperationType.SetPermissions,        this,        AbfsHttpConstants.HTTP_METHOD_PUT,        url,        requestHeaders);    op.execute(tracingContext);    return op;  }  public AbfsRestOperation setAcl(final String path, final String aclSpecString,                                  TracingContext tracingContext) throws AzureBlobFileSystemException {    return setAcl(path, aclSpecString, AbfsHttpConstants.EMPTY_STRING, tracingContext);  }  public AbfsRestOperation setAcl(final String path, final String aclSpecString, final String eTag,                                  TracingContext tracingContext)      throws AzureBlobFileSystemException {    final List<AbfsHttpHeader> requestHeaders = createDefaultHeaders();            requestHeaders.add(new AbfsHttpHeader(X_HTTP_METHOD_OVERRIDE,            HTTP_METHOD_PATCH));    requestHeaders.add(new AbfsHttpHeader(HttpHeaderConfigurations.X_MS_ACL, aclSpecString));    if (eTag != null && !eTag.isEmpty()) {      requestHeaders.add(new AbfsHttpHeader(HttpHeaderConfigurations.IF_MATCH, eTag));    }    final AbfsUriQueryBuilder abfsUriQueryBuilder = createDefaultUriQueryBuilder();    abfsUriQueryBuilder.addQuery(HttpQueryParams.QUERY_PARAM_ACTION, AbfsHttpConstants.SET_ACCESS_CONTROL);    appendSASTokenToQuery(path, SASTokenProvider.SET_ACL_OPERATION, abfsUriQueryBuilder);    final URL url = createRequestUrl(path, abfsUriQueryBuilder.toString());    final AbfsRestOperation op = new AbfsRestOperation(        AbfsRestOperationType.SetAcl,        this,        AbfsHttpConstants.HTTP_METHOD_PUT,        url,        requestHeaders);    op.execute(tracingContext);    return op;  }  public AbfsRestOperation getAclStatus(final String path, TracingContext tracingContext)          throws AzureBlobFileSystemException {    return getAclStatus(path, abfsConfiguration.isUpnUsed(), tracingContext);  }  public AbfsRestOperation getAclStatus(final String path, final boolean useUPN,                                        TracingContext tracingContext) throws AzureBlobFileSystemException {    final List<AbfsHttpHeader> requestHeaders = createDefaultHeaders();    final AbfsUriQueryBuilder abfsUriQueryBuilder = createDefaultUriQueryBuilder();    abfsUriQueryBuilder.addQuery(HttpQueryParams.QUERY_PARAM_ACTION, AbfsHttpConstants.GET_ACCESS_CONTROL);    abfsUriQueryBuilder.addQuery(HttpQueryParams.QUERY_PARAM_UPN, String.valueOf(useUPN));    appendSASTokenToQuery(path, SASTokenProvider.GET_ACL_OPERATION, abfsUriQueryBuilder);    final URL url = createRequestUrl(path, abfsUriQueryBuilder.toString());    final AbfsRestOperation op = new AbfsRestOperation(        AbfsRestOperationType.GetAcl,        this,        AbfsHttpConstants.HTTP_METHOD_HEAD,        url,        requestHeaders);    op.execute(tracingContext);    return op;  }    public AbfsRestOperation checkAccess(String path, String rwx, TracingContext tracingContext)      throws AzureBlobFileSystemException {    AbfsUriQueryBuilder abfsUriQueryBuilder = createDefaultUriQueryBuilder();    abfsUriQueryBuilder.addQuery(QUERY_PARAM_ACTION, CHECK_ACCESS);    abfsUriQueryBuilder.addQuery(QUERY_FS_ACTION, rwx);    appendSASTokenToQuery(path, SASTokenProvider.CHECK_ACCESS_OPERATION, abfsUriQueryBuilder);    URL url = createRequestUrl(path, abfsUriQueryBuilder.toString());    AbfsRestOperation op = new AbfsRestOperation(        AbfsRestOperationType.CheckAccess, this,        AbfsHttpConstants.HTTP_METHOD_HEAD, url, createDefaultHeaders());    op.execute(tracingContext);    return op;  }    public static String getDirectoryQueryParameter(final String path) {    String directory = path;    if (Strings.isNullOrEmpty(directory)) {      directory = AbfsHttpConstants.EMPTY_STRING;    } else if (directory.charAt(0) == '/') {      directory = directory.substring(1);    }    return directory;  }    private String appendSASTokenToQuery(String path, String operation, AbfsUriQueryBuilder queryBuilder) throws SASTokenProviderException {    return appendSASTokenToQuery(path, operation, queryBuilder, null);  }    private String appendSASTokenToQuery(String path,                                       String operation,                                       AbfsUriQueryBuilder queryBuilder,                                       String cachedSasToken)      throws SASTokenProviderException {    String sasToken = null;    if (this.authType == AuthType.SAS) {      try {        LOG.trace("Fetch SAS token for {} on {}", operation, path);        if (cachedSasToken == null) {          sasToken = sasTokenProvider.getSASToken(this.accountName,              this.filesystem, path, operation);          if ((sasToken == null) || sasToken.isEmpty()) {            throw new UnsupportedOperationException("SASToken received is empty or null");          }        } else {          sasToken = cachedSasToken;          LOG.trace("Using cached SAS token.");        }        queryBuilder.setSASToken(sasToken);        LOG.trace("SAS token fetch complete for {} on {}", operation, path);      } catch (Exception ex) {        throw new SASTokenProviderException(String.format("Failed to acquire a SAS token for %s on %s due to %s",            operation,            path,            ex.toString()));      }    }    return sasToken;  }  private URL createRequestUrl(final String query) throws AzureBlobFileSystemException {    return createRequestUrl(EMPTY_STRING, query);  }  @VisibleForTesting  protected URL createRequestUrl(final String path, final String query)          throws AzureBlobFileSystemException {    final String base = baseUrl.toString();    String encodedPath = path;    try {      encodedPath = urlEncode(path);    } catch (AzureBlobFileSystemException ex) {      LOG.debug("Unexpected error.", ex);      throw new InvalidUriException(path);    }    final StringBuilder sb = new StringBuilder();    sb.append(base);    sb.append(encodedPath);    sb.append(query);    final URL url;    try {      url = new URL(sb.toString());    } catch (MalformedURLException ex) {      throw new InvalidUriException(sb.toString());    }    return url;  }  public static String urlEncode(final String value) throws AzureBlobFileSystemException {    String encodedString;    try {      encodedString =  URLEncoder.encode(value, UTF_8)          .replace(PLUS, PLUS_ENCODE)          .replace(FORWARD_SLASH_ENCODE, FORWARD_SLASH);    } catch (UnsupportedEncodingException ex) {        throw new InvalidUriException(value);    }    return encodedString;  }  public synchronized String getAccessToken() throws IOException {    if (tokenProvider != null) {      return "Bearer " + tokenProvider.getToken().getAccessToken();    } else {      return null;    }  }  public AuthType getAuthType() {    return authType;  }  @VisibleForTesting  String initializeUserAgent(final AbfsConfiguration abfsConfiguration,      final String sslProviderName) {    StringBuilder sb = new StringBuilder();    sb.append(APN_VERSION);    sb.append(SINGLE_WHITE_SPACE);    sb.append(CLIENT_VERSION);    sb.append(SINGLE_WHITE_SPACE);    sb.append("(");    sb.append(System.getProperty(JAVA_VENDOR)        .replaceAll(SINGLE_WHITE_SPACE, EMPTY_STRING));    sb.append(SINGLE_WHITE_SPACE);    sb.append("JavaJRE");    sb.append(SINGLE_WHITE_SPACE);    sb.append(System.getProperty(JAVA_VERSION));    sb.append(SEMICOLON);    sb.append(SINGLE_WHITE_SPACE);    sb.append(System.getProperty(OS_NAME)        .replaceAll(SINGLE_WHITE_SPACE, EMPTY_STRING));    sb.append(SINGLE_WHITE_SPACE);    sb.append(System.getProperty(OS_VERSION));    sb.append(FORWARD_SLASH);    sb.append(System.getProperty(OS_ARCH));    sb.append(SEMICOLON);    appendIfNotEmpty(sb, sslProviderName, true);    appendIfNotEmpty(sb,        ExtensionHelper.getUserAgentSuffix(tokenProvider, EMPTY_STRING), true);    sb.append(SINGLE_WHITE_SPACE);    sb.append(abfsConfiguration.getClusterName());    sb.append(FORWARD_SLASH);    sb.append(abfsConfiguration.getClusterType());    sb.append(")");    appendIfNotEmpty(sb, abfsConfiguration.getCustomUserAgentPrefix(), false);    return String.format(Locale.ROOT, sb.toString());  }  private void appendIfNotEmpty(StringBuilder sb, String regEx,      boolean shouldAppendSemiColon) {    if (regEx == null || regEx.trim().isEmpty()) {      return;    }    sb.append(SINGLE_WHITE_SPACE);    sb.append(regEx);    if (shouldAppendSemiColon) {      sb.append(SEMICOLON);    }  }  @VisibleForTesting  URL getBaseUrl() {    return baseUrl;  }  @VisibleForTesting  public SASTokenProvider getSasTokenProvider() {    return this.sasTokenProvider;  }    protected AbfsCounters getAbfsCounters() {    return abfsCounters;  }  public int getNumLeaseThreads() {    return abfsConfiguration.getNumLeaseThreads();  }  public <V> ListenableScheduledFuture<V> schedule(Callable<V> callable, long delay,      TimeUnit timeUnit) {    return executorService.schedule(callable, delay, timeUnit);  }  public ListenableFuture<?> submit(Runnable runnable) {    return executorService.submit(runnable);  }  public <V> void addCallback(ListenableFuture<V> future, FutureCallback<V> callback) {    Futures.addCallback(future, callback, executorService);  }}