

package org.apache.hadoop.fs.impl;

import java.lang.ref.WeakReference;
import java.util.function.Consumer;
import java.util.function.Function;
import javax.annotation.Nullable;

import org.apache.hadoop.util.WeakReferenceMap;

import static java.util.Objects.requireNonNull;


public class WeakReferenceThreadMap<V> extends WeakReferenceMap<Long, V> {

  public WeakReferenceThreadMap(final Function<? super Long, ? extends V> factory,
      @Nullable final Consumer<? super Long> referenceLost) {
    super(factory, referenceLost);
  }

  
  public V getForCurrentThread() {
    return get(currentThreadId());
  }

  
  public V removeForCurrentThread() {
    return remove(currentThreadId());
  }

  
  public long currentThreadId() {
    return Thread.currentThread().getId();
  }

  
  public V setForCurrentThread(V newVal) {
    requireNonNull(newVal);
    long id = currentThreadId();

    
    WeakReference<V> existingWeakRef = lookup(id);

    
    
    
    
    
    if (resolve(existingWeakRef) == newVal) {
      
      return newVal;
    } else {
      
      return put(id, newVal);
    }

  }

}
