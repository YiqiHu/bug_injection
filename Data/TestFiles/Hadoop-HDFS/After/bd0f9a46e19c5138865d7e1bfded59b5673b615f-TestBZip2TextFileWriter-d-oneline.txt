public final class TestBZip2TextFileWriter {  private static final byte[] DELIMITER = new byte[] {'\0'};  private ByteArrayOutputStream rawOut;  private BZip2TextFileWriter writer;  @Before  public void setUp() throws Exception {    rawOut = new ByteArrayOutputStream();    writer = new BZip2TextFileWriter(rawOut);  }  @After  public void tearDown() throws Exception {    rawOut = null;    writer.close();  }  @Test  public void writingSingleBlockSizeOfData() throws Exception {    writer.writeRecord(BLOCK_SIZE, DELIMITER);    writer.close();    List<Long> nextBlocks = getNextBlockMarkerOffsets();    assertEquals(0, nextBlocks.size());  }  @Test  public void justExceedingBeyondBlockSize() throws Exception {    writer.writeRecord(BLOCK_SIZE + 1, DELIMITER);    writer.close();    List<Long> nextBlocks = getNextBlockMarkerOffsets();    assertEquals(1, nextBlocks.size());  }  @Test  public void writingTwoBlockSizesOfData() throws Exception {    writer.writeRecord(2 * BLOCK_SIZE, DELIMITER);    writer.close();    List<Long> nextBlocks = getNextBlockMarkerOffsets();    assertEquals(1, nextBlocks.size());  }  @Test  public void justExceedingBeyondTwoBlocks() throws Exception {    writer.writeRecord(2 * BLOCK_SIZE + 1, DELIMITER);    writer.close();    List<Long> nextBlocks = getNextBlockMarkerOffsets();    assertEquals(2, nextBlocks.size());  }  private List<Long> getNextBlockMarkerOffsets() throws IOException {    ByteArrayInputStream in = new ByteArrayInputStream(rawOut.toByteArray());    return BZip2Utils.getNextBlockMarkerOffsets(in);  }}