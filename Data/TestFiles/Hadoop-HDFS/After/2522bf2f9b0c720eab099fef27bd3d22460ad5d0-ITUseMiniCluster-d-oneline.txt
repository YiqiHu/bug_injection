public class ITUseMiniCluster {  private static final Logger LOG =      LoggerFactory.getLogger(ITUseMiniCluster.class);  private MiniDFSCluster cluster;  private MiniYARNCluster yarnCluster;  private static final String TEST_PATH = "/foo/bar/cats/dee";  private static final String FILENAME = "test.file";  private static final String TEXT = "Lorem ipsum dolor sit amet, consectetur "      + "adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore "      + "magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation "      + "ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute "      + "irure dolor in reprehenderit in voluptate velit esse cillum dolore eu "      + "fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident,"      + " sunt in culpa qui officia deserunt mollit anim id est laborum.";  @Before  public void clusterUp() throws IOException {    final Configuration conf = new HdfsConfiguration();    cluster = new MiniDFSCluster.Builder(conf)        .numDataNodes(3)        .build();    cluster.waitActive();    conf.set("yarn.scheduler.capacity.root.queues", "default");    conf.setInt("yarn.scheduler.capacity.root.default.capacity", 100);    yarnCluster = new MiniYARNCluster(getClass().getName(), 1, 1, 1, 1);    yarnCluster.init(conf);    yarnCluster.start();  }  @After  public void clusterDown() {    if (cluster != null) {      cluster.close();    }    IOUtils.cleanupWithLogger(LOG, yarnCluster);  }  @Test  public void useHdfsFileSystem() throws IOException {    try (FileSystem fs = cluster.getFileSystem()) {      simpleReadAfterWrite(fs);    }  }  public void simpleReadAfterWrite(final FileSystem fs) throws IOException {    LOG.info("Testing read-after-write with FS implementation: {}", fs);    final Path path = new Path(TEST_PATH, FILENAME);    if (!fs.mkdirs(path.getParent())) {      throw new IOException("Mkdirs failed to create " +          TEST_PATH);    }    try (FSDataOutputStream out = fs.create(path)) {      out.writeUTF(TEXT);    }    try (FSDataInputStream in = fs.open(path)) {      final String result = in.readUTF();      Assert.assertEquals("Didn't read back text we wrote.", TEXT, result);    }  }  @Test  public void useWebHDFS() throws IOException, URISyntaxException {    try (FileSystem fs = WebHdfsTestUtil.getWebHdfsFileSystem(        cluster.getConfiguration(0), WebHdfsConstants.WEBHDFS_SCHEME)) {      simpleReadAfterWrite(fs);    }  }}