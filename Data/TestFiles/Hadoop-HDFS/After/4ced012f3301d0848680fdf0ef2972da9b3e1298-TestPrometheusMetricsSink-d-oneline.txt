public class TestPrometheusMetricsSink {  @Test  public void testPublish() throws IOException {        MetricsSystem metrics = DefaultMetricsSystem.instance();    metrics.init("test");    PrometheusMetricsSink sink = new PrometheusMetricsSink();    metrics.register("Prometheus", "Prometheus", sink);    TestMetrics testMetrics = metrics        .register("TestMetrics", "Testing metrics", new TestMetrics());    testMetrics.numBucketCreateFails.incr();    metrics.publishMetricsNow();    ByteArrayOutputStream stream = new ByteArrayOutputStream();    OutputStreamWriter writer = new OutputStreamWriter(stream, UTF_8);        sink.writeMetrics(writer);    writer.flush();        String writtenMetrics = stream.toString(UTF_8.name());    System.out.println(writtenMetrics);    Assert.assertTrue(        "The expected metric line is missing from prometheus metrics output",        writtenMetrics.contains(            "test_metrics_num_bucket_create_fails{context=\"dfs\"")    );    metrics.unregisterSource("TestMetrics");    metrics.stop();    metrics.shutdown();  }    @Test  public void testPublishMultiple() throws IOException {        MetricsSystem metrics = DefaultMetricsSystem.instance();    metrics.init("test");    PrometheusMetricsSink sink = new PrometheusMetricsSink();    metrics.register("Prometheus", "Prometheus", sink);    TestMetrics testMetrics1 = metrics        .register("TestMetrics1", "Testing metrics", new TestMetrics("1"));    TestMetrics testMetrics2 = metrics        .register("TestMetrics2", "Testing metrics", new TestMetrics("2"));    testMetrics1.numBucketCreateFails.incr();    testMetrics2.numBucketCreateFails.incr();    metrics.publishMetricsNow();    ByteArrayOutputStream stream = new ByteArrayOutputStream();    OutputStreamWriter writer = new OutputStreamWriter(stream, UTF_8);        sink.writeMetrics(writer);    writer.flush();        String writtenMetrics = stream.toString(UTF_8.name());    System.out.println(writtenMetrics);    Assert.assertTrue(        "The expected first metric line is missing from prometheus metrics output",        writtenMetrics.contains(            "test_metrics_num_bucket_create_fails{context=\"dfs\",testtag=\"testTagValue1\"")    );    Assert.assertTrue(        "The expected second metric line is missing from prometheus metrics output",        writtenMetrics.contains(            "test_metrics_num_bucket_create_fails{context=\"dfs\",testtag=\"testTagValue2\"")    );    metrics.unregisterSource("TestMetrics1");    metrics.unregisterSource("TestMetrics2");    metrics.stop();    metrics.shutdown();  }    @Test  public void testPublishFlush() throws IOException {        MetricsSystem metrics = DefaultMetricsSystem.instance();    metrics.init("test");    PrometheusMetricsSink sink = new PrometheusMetricsSink();    metrics.register("Prometheus", "Prometheus", sink);    TestMetrics testMetrics = metrics        .register("TestMetrics", "Testing metrics", new TestMetrics("1"));    testMetrics.numBucketCreateFails.incr();    metrics.publishMetricsNow();    metrics.unregisterSource("TestMetrics");    testMetrics = metrics        .register("TestMetrics", "Testing metrics", new TestMetrics("2"));    testMetrics.numBucketCreateFails.incr();    metrics.publishMetricsNow();    ByteArrayOutputStream stream = new ByteArrayOutputStream();    OutputStreamWriter writer = new OutputStreamWriter(stream, UTF_8);        sink.writeMetrics(writer);    writer.flush();        String writtenMetrics = stream.toString(UTF_8.name());    System.out.println(writtenMetrics);    Assert.assertFalse(        "The first metric should not exist after flushing",        writtenMetrics.contains(            "test_metrics_num_bucket_create_fails{context=\"dfs\",testtag=\"testTagValue1\"")    );    Assert.assertTrue(        "The expected metric line is missing from prometheus metrics output",        writtenMetrics.contains(            "test_metrics_num_bucket_create_fails{context=\"dfs\",testtag=\"testTagValue2\"")    );    metrics.unregisterSource("TestMetrics");    metrics.stop();    metrics.shutdown();  }  @Test  public void testNamingCamelCase() {    PrometheusMetricsSink sink = new PrometheusMetricsSink();    Assert.assertEquals("rpc_time_some_metrics",        sink.prometheusName("RpcTime", "SomeMetrics"));    Assert.assertEquals("om_rpc_time_om_info_keys",        sink.prometheusName("OMRpcTime", "OMInfoKeys"));    Assert.assertEquals("rpc_time_small",        sink.prometheusName("RpcTime", "small"));  }  @Test  public void testNamingPipeline() {    PrometheusMetricsSink sink = new PrometheusMetricsSink();    String recordName = "SCMPipelineMetrics";    String metricName = "NumBlocksAllocated-"        + "RATIS-THREE-47659e3d-40c9-43b3-9792-4982fc279aba";    Assert.assertEquals(        "scm_pipeline_metrics_"            + "num_blocks_allocated_"            + "ratis_three_47659e3d_40c9_43b3_9792_4982fc279aba",        sink.prometheusName(recordName, metricName));  }  @Test  public void testNamingPeriods() {    PrometheusMetricsSink sink = new PrometheusMetricsSink();    String recordName = "org.apache.hadoop.hdfs.server.datanode.fsdataset.impl.FsDatasetImpl";    String metricName = "DfsUsed";    Assert.assertEquals(        "org_apache_hadoop_hdfs_server_datanode_fsdataset_impl_fs_dataset_impl_dfs_used",        sink.prometheusName(recordName, metricName));  }  @Test  public void testNamingWhitespaces() {    PrometheusMetricsSink sink = new PrometheusMetricsSink();    String recordName = "JvmMetrics";    String metricName = "GcCount" + "G1 Old Generation";    Assert.assertEquals(        "jvm_metrics_gc_count_g1_old_generation",        sink.prometheusName(recordName, metricName));  }    @Metrics(about = "Test Metrics", context = "dfs")  private static class TestMetrics {    private String id;    TestMetrics() {      this("1");    }    TestMetrics(String id) {      this.id = id;    }    @Metric(value={"testTag", ""}, type=Type.TAG)    String testTag1() {      return "testTagValue" + id;    }    @Metric    private MutableCounterLong numBucketCreateFails;  }}