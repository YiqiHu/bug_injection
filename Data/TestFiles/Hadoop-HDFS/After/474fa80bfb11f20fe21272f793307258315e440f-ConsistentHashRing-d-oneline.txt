public class ConsistentHashRing {  private static final String SEPARATOR = "/";  private static final String VIRTUAL_NODE_FORMAT = "%s" + SEPARATOR + "%d";    private SortedMap<String, String> ring = new TreeMap<String, String>();    private Map<String, Integer> entryToVirtualNodes =      new HashMap<String, Integer>();    private final ReadWriteLock readWriteLock = new ReentrantReadWriteLock();  private final Lock readLock = readWriteLock.readLock();  private final Lock writeLock = readWriteLock.writeLock();  public ConsistentHashRing(Set<String> locations) {    for (String location : locations) {      addLocation(location);    }  }    public void addLocation(String location) {    addLocation(location, 100);  }    public void addLocation(String location, int numVirtualNodes) {    writeLock.lock();    try {      entryToVirtualNodes.put(location, numVirtualNodes);      for (int i = 0; i < numVirtualNodes; i++) {        String key = String.format(VIRTUAL_NODE_FORMAT, location, i);        String hash = getHash(key);        ring.put(hash, key);      }    } finally {      writeLock.unlock();    }  }    public void removeLocation(String location) {    writeLock.lock();    try {      Integer numVirtualNodes = entryToVirtualNodes.remove(location);      for (int i = 0; i < numVirtualNodes; i++) {        String key = String.format(VIRTUAL_NODE_FORMAT, location, i);        String hash = getHash(key);        ring.remove(hash);      }    } finally {      writeLock.unlock();    }  }    public String getLocation(String item) {    readLock.lock();    try {      if (ring.isEmpty()) {        return null;      }      String hash = getHash(item);      if (!ring.containsKey(hash)) {        SortedMap<String, String> tailMap = ring.tailMap(hash);        hash = tailMap.isEmpty() ? ring.firstKey() : tailMap.firstKey();      }      String virtualNode = ring.get(hash);      int index = virtualNode.lastIndexOf(SEPARATOR);      if (index >= 0) {        return virtualNode.substring(0, index);      } else {        return virtualNode;      }    } finally {      readLock.unlock();    }  }  public String getHash(String key) {    return MD5Hash.digest(key).toString();  }    public Set<String> getLocations() {    return entryToVirtualNodes.keySet();  }}