public class WeakReferenceThreadMap<V> extends WeakReferenceMap<Long, V> {  public WeakReferenceThreadMap(final Function<? super Long, ? extends V> factory,      @Nullable final Consumer<? super Long> referenceLost) {    super(factory, referenceLost);  }    public V getForCurrentThread() {    return get(currentThreadId());  }    public V removeForCurrentThread() {    return remove(currentThreadId());  }    public long currentThreadId() {    return Thread.currentThread().getId();  }    public V setForCurrentThread(V newVal) {    requireNonNull(newVal);    long id = currentThreadId();        WeakReference<V> existingWeakRef = lookup(id);                        if (resolve(existingWeakRef) == newVal) {            return newVal;    } else {            return put(id, newVal);    }  }}