

package org.apache.hadoop.security;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;

import javax.naming.NamingEnumeration;
import javax.naming.NamingException;
import javax.naming.directory.Attribute;
import javax.naming.directory.DirContext;
import javax.naming.directory.SearchControls;
import javax.naming.directory.SearchResult;

import org.apache.hadoop.conf.Configuration;
import org.junit.Assert;
import org.junit.Test;
import org.mockito.stubbing.Stubber;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;


@SuppressWarnings("unchecked")
public class TestLdapGroupsMappingWithOneQuery
    extends TestLdapGroupsMappingBase {

  public void setupMocks(List<String> listOfDNs) throws NamingException {
    Attribute groupDN = mock(Attribute.class);

    NamingEnumeration<SearchResult> groupNames = getGroupNames();
    doReturn(groupNames).when(groupDN).getAll();
    buildListOfGroupDNs(listOfDNs).when(groupNames).next();
    when(groupNames.hasMore()).
      thenReturn(true).thenReturn(true).
      thenReturn(true).thenReturn(false);

    when(getAttributes().get(eq("memberOf"))).thenReturn(groupDN);
  }

  
  private Stubber buildListOfGroupDNs(List<String> listOfDNs) {
    Stubber stubber = null;
    for (String s : listOfDNs) {
      if (stubber != null) {
        stubber.doReturn(s);
      } else {
        stubber = doReturn(s);
      }
    }
    return stubber;
  }

  @Test
  public void testGetGroups() throws NamingException {
    
    
    String[] testGroups = new String[] {"abc", "xyz", "sss"};
    doTestGetGroups(Arrays.asList(testGroups));

    
    doTestGetGroupsWithFallback();
  }

  private void doTestGetGroups(List<String> expectedGroups)
      throws NamingException {
    List<String> groupDns = new ArrayList<>();
    groupDns.add("CN=abc,DC=foo,DC=bar,DC=com");
    groupDns.add("CN=xyz,DC=foo,DC=bar,DC=com");
    groupDns.add("CN=sss,DC=foo,DC=bar,DC=com");

    setupMocks(groupDns);
    String ldapUrl = "ldap://test";
    Configuration conf = getBaseConf(ldapUrl);
    
    conf.set(LdapGroupsMapping.MEMBEROF_ATTR_KEY, "memberOf");

    TestLdapGroupsMapping groupsMapping = new TestLdapGroupsMapping();
    groupsMapping.setConf(conf);
    
    
    List<String> groups = groupsMapping.getGroups("some_user");

    Assert.assertEquals(expectedGroups, groups);
    Assert.assertFalse("Second LDAP query should NOT have been called.",
            groupsMapping.isSecondaryQueryCalled());

    
    verify(getContext(), times(1)).search(anyString(), anyString(),
        any(Object[].class), any(SearchControls.class));
  }

  private void doTestGetGroupsWithFallback()
          throws NamingException {
    List<String> groupDns = new ArrayList<>();
    groupDns.add("CN=abc,DC=foo,DC=bar,DC=com");
    groupDns.add("CN=xyz,DC=foo,DC=bar,DC=com");
    groupDns.add("ipaUniqueID=e4a9a634-bb24-11ec-aec1-06ede52b5fe1," +
            "CN=sudo,DC=foo,DC=bar,DC=com");
    setupMocks(groupDns);
    String ldapUrl = "ldap://test";
    Configuration conf = getBaseConf(ldapUrl);
    
    conf.set(LdapGroupsMapping.MEMBEROF_ATTR_KEY, "memberOf");
    conf.set(LdapGroupsMapping.LDAP_NUM_ATTEMPTS_KEY, "1");

    TestLdapGroupsMapping groupsMapping = new TestLdapGroupsMapping();
    groupsMapping.setConf(conf);
    
    
    List<String> groups = groupsMapping.getGroups("some_user");

    
    Assert.assertEquals(0, groups.size());

    
    Assert.assertTrue("Second LDAP query should have been called.",
            groupsMapping.isSecondaryQueryCalled());

    
    
    
    
    verify(getContext(), times(3)).search(anyString(), anyString(),
            any(Object[].class), any(SearchControls.class));
  }

  private static final class TestLdapGroupsMapping extends LdapGroupsMapping {
    private boolean secondaryQueryCalled = false;
    public boolean isSecondaryQueryCalled() {
      return secondaryQueryCalled;
    }
    Set<String> lookupGroup(SearchResult result, DirContext c,
                                    int goUpHierarchy) throws NamingException {
      secondaryQueryCalled = true;
      return super.lookupGroup(result, c, goUpHierarchy);
    }
  }
}
