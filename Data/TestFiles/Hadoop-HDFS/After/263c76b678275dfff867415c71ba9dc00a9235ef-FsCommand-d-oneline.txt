abstract public class FsCommand extends Command {    public static void registerCommands(CommandFactory factory) {    factory.registerCommands(AclCommands.class);    factory.registerCommands(CopyCommands.class);    factory.registerCommands(Count.class);    factory.registerCommands(Delete.class);    factory.registerCommands(Display.class);    factory.registerCommands(Find.class);    factory.registerCommands(FsShellPermissions.class);    factory.registerCommands(FsUsage.class);    factory.registerCommands(Ls.class);    factory.registerCommands(Mkdir.class);    factory.registerCommands(MoveCommands.class);    factory.registerCommands(SetReplication.class);    factory.registerCommands(Stat.class);    factory.registerCommands(Tail.class);    factory.registerCommands(Head.class);    factory.registerCommands(Test.class);    factory.registerCommands(TouchCommands.class);    factory.registerCommands(Truncate.class);    factory.registerCommands(SnapshotCommands.class);    factory.registerCommands(XAttrCommands.class);  }  protected FsCommand() {}    protected FsCommand(Configuration conf) {    super(conf);  }    @Override  public String getCommandName() {     return getName();   }        @Override  protected void run(Path path) throws IOException {    throw new RuntimeException("not supposed to get here");  }      @Deprecated  @Override  public int runAll() {    return run(args);  }  @Override  protected void processRawArguments(LinkedList<String> args)      throws IOException {    LinkedList<PathData> expendedArgs = expandArguments(args);            final boolean displayWarnings = getConf().getBoolean(        HADOOP_SHELL_MISSING_DEFAULT_FS_WARNING_KEY,        HADOOP_SHELL_MISSING_DEFAULT_FS_WARNING_DEFAULT);    if (displayWarnings) {      final String defaultFs = getConf().getTrimmed(FS_DEFAULT_NAME_KEY);      final boolean missingDefaultFs =          defaultFs == null || defaultFs.equals(FS_DEFAULT_NAME_DEFAULT);      if (missingDefaultFs) {        err.printf(            "Warning: fs.defaultFS is not set when running \"%s\" command.%n",            getCommandName());      }    }    processArguments(expendedArgs);  }}