
package org.apache.hadoop.net;

import org.apache.hadoop.classification.InterfaceAudience;
import org.apache.hadoop.classification.InterfaceStability;

import java.util.regex.Pattern;



@InterfaceAudience.LimitedPrivate({"HDFS", "MapReduce"})
@InterfaceStability.Unstable
public class NodeBase implements Node {
  
  public final static char PATH_SEPARATOR = '/';
  
  public final static String PATH_SEPARATOR_STR = "/";
  
  public final static String ROOT = "";
  
  protected String name; 
  protected String location; 
  protected int level; 
  protected Node parent; 
  private static final Pattern SLASHES = Pattern.compile("/+");
  
  
  public NodeBase() {
  }
  
  
  public NodeBase(String path) {
    path = normalize(path);
    int index = path.lastIndexOf(PATH_SEPARATOR);
    if (index== -1) {
      set(ROOT, path);
    } else {
      set(path.substring(index+1), path.substring(0, index));
    }
  }
  
  
  public NodeBase(String name, String location) {
    set(name, normalize(location));
  }
  
  
  public NodeBase(String name, String location, Node parent, int level) {
    set(name, normalize(location));
    this.parent = parent;
    this.level = level;
  }

  
  private void set(String name, String location) {
    if (name != null && name.contains(PATH_SEPARATOR_STR))
      throw new IllegalArgumentException(
                                         "Network location name contains /: "+name);
    this.name = (name==null)?"":name;
    this.location = location;      
  }
  
  
  @Override
  public String getName() { return name; }
  
  
  @Override
  public String getNetworkLocation() { return location; }
  
  
  @Override
  public void setNetworkLocation(String location) { this.location = location; }
  
  
  public static String getPath(Node node) {
    return node.getNetworkLocation() + PATH_SEPARATOR_STR + node.getName();
  }

  
  public static String[] getPathComponents(Node node) {
    return getPath(node).split(PATH_SEPARATOR_STR);
  }

  @Override
  public boolean equals(Object to) {
    if (this == to) {
      return true;
    }
    if (!(to instanceof NodeBase)) {
      return false;
    }
    return getPath(this).equals(getPath((NodeBase)to));
  }

  @Override
  public int hashCode() {
    return getPath(this).hashCode();
  }

  
  @Override
  public String toString() {
    return getPath(this);
  }

  
  public static String normalize(String path) {
    if (path == null) {
      throw new IllegalArgumentException(
          "Network Location is null ");
    }

    if (path.length() == 0) {
      return ROOT;
    }

    if (path.charAt(0) != PATH_SEPARATOR) {
      throw new IllegalArgumentException(
                                         "Network Location path does not start with "
                                         +PATH_SEPARATOR_STR+ ": "+path);
    }

    
    path = SLASHES.matcher(path).replaceAll("/");
    
    int len = path.length();
    if (path.charAt(len-1) == PATH_SEPARATOR) {
      return path.substring(0, len-1);
    }
    return path;
  }
  
  
  @Override
  public Node getParent() { return parent; }
  
  
  @Override
  public void setParent(Node parent) {
    this.parent = parent;
  }
  
  
  @Override
  public int getLevel() { return level; }
  
  
  @Override
  public void setLevel(int level) {
    this.level = level;
  }
  
  public static int locationToDepth(String location) {
    String normalizedLocation = normalize(location);
    int length = normalizedLocation.length();
    int depth = 0;
    for (int i = 0; i < length; i++) {
      if (normalizedLocation.charAt(i) == PATH_SEPARATOR) {
        depth++;
      }
    }
    return depth;
  }
}
