public class TestDecayRpcScheduler {  private Schedulable mockCall(String id) {    Schedulable mockCall = mock(Schedulable.class);    UserGroupInformation ugi = UserGroupInformation.createRemoteUser(id);    when(mockCall.getUserGroupInformation()).thenReturn(ugi);    return mockCall;  }  private DecayRpcScheduler scheduler;  @Test(expected=IllegalArgumentException.class)  public void testNegativeScheduler() {    scheduler = new DecayRpcScheduler(-1, "", new Configuration());  }  @Test(expected=IllegalArgumentException.class)  public void testZeroScheduler() {    scheduler = new DecayRpcScheduler(0, "", new Configuration());  }  @Test  @SuppressWarnings("deprecation")  public void testParsePeriod() {        scheduler = new DecayRpcScheduler(1, "ipc.1", new Configuration());    assertEquals(DecayRpcScheduler.IPC_SCHEDULER_DECAYSCHEDULER_PERIOD_DEFAULT,      scheduler.getDecayPeriodMillis());        Configuration conf = new Configuration();    conf.setLong("ipc.2." + DecayRpcScheduler.IPC_FCQ_DECAYSCHEDULER_PERIOD_KEY,      1058);    scheduler = new DecayRpcScheduler(1, "ipc.2", conf);    assertEquals(1058L, scheduler.getDecayPeriodMillis());  }  @Test  @SuppressWarnings("deprecation")  public void testParseFactor() {        scheduler = new DecayRpcScheduler(1, "ipc.3", new Configuration());    assertEquals(DecayRpcScheduler.IPC_SCHEDULER_DECAYSCHEDULER_FACTOR_DEFAULT,      scheduler.getDecayFactor(), 0.00001);        Configuration conf = new Configuration();    conf.set("ipc.4." + DecayRpcScheduler.IPC_FCQ_DECAYSCHEDULER_FACTOR_KEY,      "0.125");    scheduler = new DecayRpcScheduler(1, "ipc.4", conf);    assertEquals(0.125, scheduler.getDecayFactor(), 0.00001);  }  public void assertEqualDecimalArrays(double[] a, double[] b) {    assertEquals(a.length, b.length);    for(int i = 0; i < a.length; i++) {      assertEquals(a[i], b[i], 0.00001);    }  }  @Test  @SuppressWarnings("deprecation")  public void testParseThresholds() {        Configuration conf = new Configuration();    scheduler = new DecayRpcScheduler(1, "ipc.5", conf);    assertEqualDecimalArrays(new double[]{}, scheduler.getThresholds());    scheduler = new DecayRpcScheduler(2, "ipc.6", conf);    assertEqualDecimalArrays(new double[]{0.5}, scheduler.getThresholds());    scheduler = new DecayRpcScheduler(3, "ipc.7", conf);    assertEqualDecimalArrays(new double[]{0.25, 0.5}, scheduler.getThresholds());    scheduler = new DecayRpcScheduler(4, "ipc.8", conf);    assertEqualDecimalArrays(new double[]{0.125, 0.25, 0.5}, scheduler.getThresholds());        conf = new Configuration();    conf.set("ipc.9." + DecayRpcScheduler.IPC_FCQ_DECAYSCHEDULER_THRESHOLDS_KEY,      "1, 10, 20, 50, 85");    scheduler = new DecayRpcScheduler(6, "ipc.9", conf);    assertEqualDecimalArrays(new double[]{0.01, 0.1, 0.2, 0.5, 0.85}, scheduler.getThresholds());  }  @Test  @SuppressWarnings("deprecation")  public void testAccumulate() {    Configuration conf = new Configuration();    conf.set("ipc.10." + DecayRpcScheduler.IPC_FCQ_DECAYSCHEDULER_PERIOD_KEY,        "99999999");     scheduler = new DecayRpcScheduler(1, "ipc.10", conf);    assertEquals(0, scheduler.getCallCostSnapshot().size());     getPriorityIncrementCallCount("A");    assertEquals(1, scheduler.getCallCostSnapshot().get("A").longValue());    assertEquals(1, scheduler.getCallCostSnapshot().get("A").longValue());    getPriorityIncrementCallCount("A");    getPriorityIncrementCallCount("B");    getPriorityIncrementCallCount("A");    assertEquals(3, scheduler.getCallCostSnapshot().get("A").longValue());    assertEquals(1, scheduler.getCallCostSnapshot().get("B").longValue());  }  @Test  @SuppressWarnings("deprecation")  public void testDecay() throws Exception {    Configuration conf = new Configuration();    conf.setLong("ipc.11."         + DecayRpcScheduler.IPC_SCHEDULER_DECAYSCHEDULER_PERIOD_KEY, 999999999);    conf.setDouble("ipc.11."        + DecayRpcScheduler.IPC_SCHEDULER_DECAYSCHEDULER_FACTOR_KEY, 0.5);    scheduler = new DecayRpcScheduler(1, "ipc.11", conf);    assertEquals(0, scheduler.getTotalCallSnapshot());    for (int i = 0; i < 4; i++) {      getPriorityIncrementCallCount("A");    }    sleep(1000);    for (int i = 0; i < 8; i++) {      getPriorityIncrementCallCount("B");    }    assertEquals(12, scheduler.getTotalCallSnapshot());    assertEquals(4, scheduler.getCallCostSnapshot().get("A").longValue());    assertEquals(8, scheduler.getCallCostSnapshot().get("B").longValue());    scheduler.forceDecay();    assertEquals(6, scheduler.getTotalCallSnapshot());    assertEquals(2, scheduler.getCallCostSnapshot().get("A").longValue());    assertEquals(4, scheduler.getCallCostSnapshot().get("B").longValue());    scheduler.forceDecay();    assertEquals(3, scheduler.getTotalCallSnapshot());    assertEquals(1, scheduler.getCallCostSnapshot().get("A").longValue());    assertEquals(2, scheduler.getCallCostSnapshot().get("B").longValue());    scheduler.forceDecay();    assertEquals(1, scheduler.getTotalCallSnapshot());    assertEquals(null, scheduler.getCallCostSnapshot().get("A"));    assertEquals(1, scheduler.getCallCostSnapshot().get("B").longValue());    scheduler.forceDecay();    assertEquals(0, scheduler.getTotalCallSnapshot());    assertEquals(null, scheduler.getCallCostSnapshot().get("A"));    assertEquals(null, scheduler.getCallCostSnapshot().get("B"));  }  @Test  @SuppressWarnings("deprecation")  public void testPriority() throws Exception {    Configuration conf = new Configuration();    final String namespace = "ipc.12";    conf.set(namespace + "." + DecayRpcScheduler        .IPC_FCQ_DECAYSCHEDULER_PERIOD_KEY, "99999999");     conf.set(namespace + "." + DecayRpcScheduler        .IPC_FCQ_DECAYSCHEDULER_THRESHOLDS_KEY, "25, 50, 75");    scheduler = new DecayRpcScheduler(4, namespace, conf);    assertEquals(0, getPriorityIncrementCallCount("A"));     assertEquals(3, getPriorityIncrementCallCount("A"));     assertEquals(0, getPriorityIncrementCallCount("B"));     assertEquals(1, getPriorityIncrementCallCount("B"));     assertEquals(0, getPriorityIncrementCallCount("C"));     assertEquals(0, getPriorityIncrementCallCount("C"));     assertEquals(1, getPriorityIncrementCallCount("A"));     assertEquals(1, getPriorityIncrementCallCount("A"));     assertEquals(2, getPriorityIncrementCallCount("A"));     assertEquals(2, getPriorityIncrementCallCount("A"));     MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();    ObjectName mxbeanName = new ObjectName(        "Hadoop:service="+ namespace + ",name=DecayRpcScheduler");    String cvs1 = (String) mbs.getAttribute(mxbeanName, "CallVolumeSummary");    assertTrue("Get expected JMX of CallVolumeSummary before decay",        cvs1.equals("{\"A\":6,\"B\":2,\"C\":2}"));    scheduler.forceDecay();    String cvs2 = (String) mbs.getAttribute(mxbeanName, "CallVolumeSummary");    assertTrue("Get expected JMX for CallVolumeSummary after decay",        cvs2.equals("{\"A\":3,\"B\":1,\"C\":1}"));  }  @Test(timeout=2000)  @SuppressWarnings("deprecation")  public void testPeriodic() throws InterruptedException {    Configuration conf = new Configuration();    conf.set(        "ipc.13." + DecayRpcScheduler.IPC_FCQ_DECAYSCHEDULER_PERIOD_KEY, "10");    conf.set(        "ipc.13." + DecayRpcScheduler.IPC_FCQ_DECAYSCHEDULER_FACTOR_KEY, "0.5");    scheduler = new DecayRpcScheduler(1, "ipc.13", conf);    assertEquals(10, scheduler.getDecayPeriodMillis());    assertEquals(0, scheduler.getTotalCallSnapshot());    for (int i = 0; i < 64; i++) {      getPriorityIncrementCallCount("A");    }        while (scheduler.getTotalCallSnapshot() > 0) {      sleep(10);    }  }  @Test(timeout=60000)  public void testNPEatInitialization() throws InterruptedException {            PrintStream output = System.out;    try {      ByteArrayOutputStream bytes = new ByteArrayOutputStream();      System.setOut(new PrintStream(bytes));                  DefaultMetricsSystem.initialize("NameNode");      Configuration conf = new Configuration();      scheduler = new DecayRpcScheduler(1, "ipc.14", conf);            assertFalse(bytes.toString().contains("NullPointerException"));    } finally {            System.setOut(output);    }  }  @Test  public void testUsingWeightedTimeCostProvider() {    scheduler = getSchedulerWithWeightedTimeCostProvider(3, "ipc.15");            ProcessingDetails callDetailsLow =        new ProcessingDetails(TimeUnit.MILLISECONDS);    callDetailsLow.set(ProcessingDetails.Timing.LOCKFREE, 1);    ProcessingDetails callDetailsMedium =        new ProcessingDetails(TimeUnit.MILLISECONDS);    callDetailsMedium.set(ProcessingDetails.Timing.LOCKSHARED, 500);    ProcessingDetails callDetailsHigh =        new ProcessingDetails(TimeUnit.MILLISECONDS);    callDetailsHigh.set(ProcessingDetails.Timing.LOCKEXCLUSIVE, 100);    for (int i = 0; i < 10; i++) {      scheduler.addResponseTime("ignored", mockCall("LOW"), callDetailsLow);    }    scheduler.addResponseTime("ignored", mockCall("MED"), callDetailsMedium);    scheduler.addResponseTime("ignored", mockCall("HIGH"), callDetailsHigh);    assertEquals(0, scheduler.getPriorityLevel(mockCall("LOW")));    assertEquals(1, scheduler.getPriorityLevel(mockCall("MED")));    assertEquals(2, scheduler.getPriorityLevel(mockCall("HIGH")));    assertEquals(3, scheduler.getUniqueIdentityCount());    long totalCallInitial = scheduler.getTotalRawCallVolume();    assertEquals(totalCallInitial, scheduler.getTotalCallVolume());    scheduler.forceDecay();        assertEquals(0, scheduler.getPriorityLevel(mockCall("LOW")));    assertEquals(1, scheduler.getPriorityLevel(mockCall("MED")));    assertEquals(2, scheduler.getPriorityLevel(mockCall("HIGH")));    assertEquals(3, scheduler.getUniqueIdentityCount());    assertEquals(totalCallInitial, scheduler.getTotalRawCallVolume());    assertTrue(scheduler.getTotalCallVolume() < totalCallInitial);    for (int i = 0; i < 100; i++) {      scheduler.forceDecay();    }        assertEquals(0, scheduler.getPriorityLevel(mockCall("LOW")));    assertEquals(0, scheduler.getPriorityLevel(mockCall("MED")));    assertEquals(0, scheduler.getPriorityLevel(mockCall("HIGH")));  }  @Test  public void testUsingWeightedTimeCostProviderWithZeroCostCalls() {    scheduler = getSchedulerWithWeightedTimeCostProvider(2, "ipc.16");    ProcessingDetails emptyDetails =        new ProcessingDetails(TimeUnit.MILLISECONDS);    for (int i = 0; i < 1000; i++) {      scheduler.addResponseTime("ignored", mockCall("MANY"), emptyDetails);    }    scheduler.addResponseTime("ignored", mockCall("FEW"), emptyDetails);        assertEquals(0, scheduler.getPriorityLevel(mockCall("MANY")));    assertEquals(0, scheduler.getPriorityLevel(mockCall("FEW")));  }  @Test  public void testUsingWeightedTimeCostProviderNoRequests() {    scheduler = getSchedulerWithWeightedTimeCostProvider(2, "ipc.18");    assertEquals(0, scheduler.getPriorityLevel(mockCall("A")));  }    private static DecayRpcScheduler getSchedulerWithWeightedTimeCostProvider(      int priorityLevels, String ns) {    Configuration conf = new Configuration();    conf.setClass(ns + "." + CommonConfigurationKeys.IPC_COST_PROVIDER_KEY,        WeightedTimeCostProvider.class, CostProvider.class);    conf.setLong(ns + "."        + DecayRpcScheduler.IPC_SCHEDULER_DECAYSCHEDULER_PERIOD_KEY, 999999);    return new DecayRpcScheduler(priorityLevels, ns, conf);  }    private int getPriorityIncrementCallCount(String callId) {    Schedulable mockCall = mockCall(callId);    int priority = scheduler.getPriorityLevel(mockCall);            ProcessingDetails emptyProcessingDetails =        new ProcessingDetails(TimeUnit.MILLISECONDS);    scheduler.addResponseTime("ignored", mockCall, emptyProcessingDetails);    return priority;  }    @Test  public void testServiceUsersCase1() {    Configuration conf = new Configuration();    conf.setLong("ipc.19."        + DecayRpcScheduler.IPC_SCHEDULER_DECAYSCHEDULER_PERIOD_KEY, 999999);    conf.set("ipc.19." + DecayRpcScheduler.IPC_DECAYSCHEDULER_SERVICE_USERS_KEY,        "service1,service2");    scheduler = new DecayRpcScheduler(4, "ipc.19", conf);    assertTrue(scheduler.getServiceUserNames().contains("service1"));    assertTrue(scheduler.getServiceUserNames().contains("service2"));    for (int i = 0; i < 10; i++) {      getPriorityIncrementCallCount("user1");      getPriorityIncrementCallCount("service1");      getPriorityIncrementCallCount("service2");    }    assertNotEquals(0, scheduler.getPriorityLevel(mockCall("user1")));        assertEquals(0, scheduler.getPriorityLevel(mockCall("service1")));    assertEquals(0, scheduler.getPriorityLevel(mockCall("service2")));        scheduler.forceDecay();        String summary = scheduler.getSchedulingDecisionSummary();    Map<String, Object> summaryMap = (Map<String, Object>) JSON.parse(summary);    assertNotEquals(0L, summaryMap.get("user1"));    assertEquals(0L, summaryMap.get("service1"));    assertEquals(0L, summaryMap.get("service2"));  }    @Test  public void testServiceUsersCase2() {    final int level = 4;    Configuration conf = new Configuration();    conf.setLong("ipc.20."        + DecayRpcScheduler.IPC_SCHEDULER_DECAYSCHEDULER_PERIOD_KEY, 999999);    conf.set("ipc.20." + DecayRpcScheduler.IPC_DECAYSCHEDULER_SERVICE_USERS_KEY,        "service");    conf.set(IPC_DECAYSCHEDULER_THRESHOLDS_KEY, "0.125,0.25,0.5");    scheduler = new DecayRpcScheduler(level, "ipc.20", conf);        for (int i = 0; i < 10; i++) {      getPriorityIncrementCallCount("user1");    }    for (int i = 0; i < 50; i++) {      getPriorityIncrementCallCount("service");    }    assertEquals(10, scheduler.getTotalCallVolume());    assertEquals(10, scheduler.getTotalRawCallVolume());    assertEquals(50, scheduler.getTotalServiceUserCallVolume());    assertEquals(50, scheduler.getTotalServiceUserRawCallVolume());        assertEquals(level - 1, scheduler.getPriorityLevel(mockCall("user1")));        scheduler.forceDecay();    assertEquals(5, scheduler.getTotalCallVolume());    assertEquals(10, scheduler.getTotalRawCallVolume());    assertEquals(25, scheduler.getTotalServiceUserCallVolume());    assertEquals(50, scheduler.getTotalServiceUserRawCallVolume());        assertEquals(level - 1, scheduler.getPriorityLevel(mockCall("user1")));        for (int i = 0; i < 10; i++) {      getPriorityIncrementCallCount("user1");    }    for (int i = 0; i < 50; i++) {      getPriorityIncrementCallCount("service");    }    assertEquals(15, scheduler.getTotalCallVolume());    assertEquals(20, scheduler.getTotalRawCallVolume());    assertEquals(75, scheduler.getTotalServiceUserCallVolume());    assertEquals(100, scheduler.getTotalServiceUserRawCallVolume());        assertEquals(level - 1, scheduler.getPriorityLevel(mockCall("user1")));  }}