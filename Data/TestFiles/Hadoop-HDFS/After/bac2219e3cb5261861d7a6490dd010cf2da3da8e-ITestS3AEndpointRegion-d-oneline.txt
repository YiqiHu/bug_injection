public class ITestS3AEndpointRegion extends AbstractS3ATestBase {  private static final String AWS_REGION_TEST = "test-region";  private static final String AWS_ENDPOINT_TEST = "test-endpoint";  private static final String AWS_ENDPOINT_TEST_WITH_REGION =      "test-endpoint.some-region.amazonaws.com";  public static final String MARS_NORTH_2 = "mars-north-2";    @Test  public void testWithRegionConfig() {    getFileSystem().getConf().set(AWS_REGION, AWS_REGION_TEST);        AwsClientBuilder.EndpointConfiguration epr = createEpr(AWS_ENDPOINT_TEST,        getFileSystem().getConf().getTrimmed(AWS_REGION));        Assertions.assertThat(epr.getSigningRegion())        .describedAs("There is a region mismatch")        .isEqualTo(getFileSystem().getConf().get(AWS_REGION));  }    @Test  public void testWithoutRegionConfig() {    getFileSystem().getConf().unset(AWS_REGION);        AwsClientBuilder.EndpointConfiguration eprRandom =        createEpr(AWS_ENDPOINT_TEST_WITH_REGION,            getFileSystem().getConf().getTrimmed(AWS_REGION));    String regionFromEndpoint =        AwsHostNameUtils            .parseRegionFromAwsPartitionPattern(AWS_ENDPOINT_TEST_WITH_REGION);            Assertions.assertThat(eprRandom.getSigningRegion())        .describedAs("There is a region mismatch")        .isNotEqualTo(getFileSystem().getConf().get(AWS_REGION))        .isEqualTo(regionFromEndpoint);  }    private AwsClientBuilder.EndpointConfiguration createEpr(String endpoint,      String awsRegion) {    return DefaultS3ClientFactory.createEndpointConfiguration(endpoint,        new ClientConfiguration(), awsRegion);  }  @Test  public void testInvalidRegionDefaultEndpoint() throws Throwable {    describe("Create a client with an invalid region and the default endpoint");    Configuration conf = getConfiguration();                    conf.set(AWS_REGION, MARS_NORTH_2);    createMarsNorth2Client(conf);  }  @Test  public void testUnsetRegionDefaultEndpoint() throws Throwable {    describe("Create a client with no region and the default endpoint");    Configuration conf = getConfiguration();    conf.unset(AWS_REGION);    createS3Client(conf, DEFAULT_ENDPOINT, AWS_S3_CENTRAL_REGION);  }    @Test  public void testBlankRegionTriggersSDKResolution() throws Throwable {    describe("Create a client with a blank region and the default endpoint."        + " This will trigger the SDK Resolution chain");    Configuration conf = getConfiguration();    conf.set(AWS_REGION, "");    System.setProperty(AWS_REGION_SYSPROP, MARS_NORTH_2);    try {      createMarsNorth2Client(conf);    } finally {      System.clearProperty(AWS_REGION_SYSPROP);    }  }    private void createMarsNorth2Client(Configuration conf) throws Exception {    AmazonS3 client = createS3Client(conf, DEFAULT_ENDPOINT, MARS_NORTH_2);    intercept(IllegalArgumentException.class, MARS_NORTH_2, client::getRegion);  }    private AmazonS3 createS3Client(Configuration conf,      String endpoint,      String expectedRegion)      throws URISyntaxException, IOException {    DefaultS3ClientFactory factory        = new DefaultS3ClientFactory();    factory.setConf(conf);    S3ClientFactory.S3ClientCreationParameters parameters        = new S3ClientFactory.S3ClientCreationParameters()        .withCredentialSet(new AnonymousAWSCredentialsProvider())        .withPathUri(new URI("s3a://localhost/"))        .withEndpoint(endpoint)        .withMetrics(new EmptyS3AStatisticsContext()            .newStatisticsFromAwsSdk());    AmazonS3 client = factory.createS3Client(        new URI("s3a://localhost/"),        parameters);    Assertions.assertThat(client.getRegionName())        .describedAs("Client region name")        .isEqualTo(expectedRegion);    return client;  }}