public class Trash extends Configured {  private static final Logger LOG =      LoggerFactory.getLogger(Trash.class);  private TrashPolicy trashPolicy;     public Trash(Configuration conf) throws IOException {    this(FileSystem.get(conf), conf);  }    public Trash(FileSystem fs, Configuration conf) throws IOException {    super(conf);    trashPolicy = TrashPolicy.getInstance(conf, fs);  }    public static boolean moveToAppropriateTrash(FileSystem fs, Path p,      Configuration conf) throws IOException {    Path fullyResolvedPath = fs.resolvePath(p);    FileSystem fullyResolvedFs =        FileSystem.get(fullyResolvedPath.toUri(), conf);            try {      long trashInterval = fullyResolvedFs.getServerDefaults(          fullyResolvedPath).getTrashInterval();      if (0 != trashInterval) {        Configuration confCopy = new Configuration(conf);        confCopy.setLong(CommonConfigurationKeysPublic.FS_TRASH_INTERVAL_KEY,            trashInterval);        conf = confCopy;      }    } catch (Exception e) {                  LOG.warn("Failed to get server trash configuration", e);      throw new IOException("Failed to get server trash configuration", e);    }        if (conf.getBoolean(CONFIG_VIEWFS_TRASH_FORCE_INSIDE_MOUNT_POINT,        CONFIG_VIEWFS_TRASH_FORCE_INSIDE_MOUNT_POINT_DEFAULT)) {      Trash trash = new Trash(fs, conf);      return trash.moveToTrash(p);    }    Trash trash = new Trash(fullyResolvedFs, conf);    return trash.moveToTrash(fullyResolvedPath);  }      public boolean isEnabled() {    return trashPolicy.isEnabled();  }     public boolean moveToTrash(Path path) throws IOException {    return trashPolicy.moveToTrash(path);  }    public void checkpoint() throws IOException {    trashPolicy.createCheckpoint();  }    public void expunge() throws IOException {    trashPolicy.deleteCheckpoint();  }    public void expungeImmediately() throws IOException {    trashPolicy.createCheckpoint();    trashPolicy.deleteCheckpointsImmediately();  }    Path getCurrentTrashDir() throws IOException {    return trashPolicy.getCurrentTrashDir();  }    TrashPolicy getTrashPolicy() {    return trashPolicy;  }    public Runnable getEmptier() throws IOException {    return trashPolicy.getEmptier();  }  public Path getCurrentTrashDir(Path path) throws IOException {    return trashPolicy.getCurrentTrashDir(path);  }}