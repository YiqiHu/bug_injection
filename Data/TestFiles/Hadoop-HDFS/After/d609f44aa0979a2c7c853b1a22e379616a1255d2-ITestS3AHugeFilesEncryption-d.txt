

package org.apache.hadoop.fs.s3a.scale;

import java.io.IOException;

import org.apache.commons.lang.StringUtils;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.fs.s3a.Constants;
import org.apache.hadoop.fs.s3a.EncryptionTestUtils;
import org.apache.hadoop.fs.s3a.S3AFileSystem;

import static org.apache.hadoop.fs.s3a.S3AEncryptionMethods.SSE_KMS;
import static org.apache.hadoop.fs.s3a.S3ATestUtils.getTestBucketName;
import static org.apache.hadoop.fs.s3a.S3ATestUtils.skipIfEncryptionNotSet;
import static org.apache.hadoop.fs.s3a.S3AUtils.getS3EncryptionKey;


public class ITestS3AHugeFilesEncryption extends AbstractSTestS3AHugeFiles {

  @Override
  public void setup() throws Exception {
    Configuration c = new Configuration();
    skipIfEncryptionNotSet(c, SSE_KMS);
    super.setup();
  }

  @Override
  protected String getBlockOutputBufferName() {
    return Constants.FAST_UPLOAD_BUFFER_ARRAY;
  }

  
  @Override
  protected boolean isEncrypted(S3AFileSystem fileSystem) {
    Configuration c = new Configuration();
    return StringUtils.isNotBlank(getS3EncryptionKey(getTestBucketName(c), c));
  }

  @Override
  protected void assertEncrypted(Path hugeFile) throws IOException {
    Configuration c = new Configuration();
    String kmsKey = getS3EncryptionKey(getTestBucketName(c), c);
    EncryptionTestUtils.assertEncrypted(getFileSystem(), hugeFile,
            SSE_KMS, kmsKey);
  }
}
