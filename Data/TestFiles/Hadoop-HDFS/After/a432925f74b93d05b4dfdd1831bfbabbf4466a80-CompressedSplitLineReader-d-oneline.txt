public class CompressedSplitLineReader extends SplitLineReader {  SplitCompressionInputStream scin;  private boolean usingCRLF;  private boolean needAdditionalRecord = false;  private boolean finished = false;  public CompressedSplitLineReader(SplitCompressionInputStream in,                                   Configuration conf,                                   byte[] recordDelimiterBytes)                                       throws IOException {    super(in, conf, recordDelimiterBytes);    scin = in;    usingCRLF = (recordDelimiterBytes == null);  }  @Override  protected int fillBuffer(InputStream in, byte[] buffer, boolean inDelimiter)      throws IOException {    boolean alreadyReadAfterSplit = didReadAfterSplit();    int bytesRead = in.read(buffer);                            boolean justReadAfterSplit = !alreadyReadAfterSplit && didReadAfterSplit();    if (justReadAfterSplit && inDelimiter && bytesRead > 0) {      if (usingCRLF) {        needAdditionalRecord = (buffer[0] != '\n');      } else {        needAdditionalRecord = true;      }    }    return bytesRead;  }  @Override  public int readLine(Text str, int maxLineLength, int maxBytesToConsume)      throws IOException {    int bytesRead = 0;    if (!finished) {                  if (didReadAfterSplit()) {        finished = true;      }      bytesRead = super.readLine(str, maxLineLength, maxBytesToConsume);    }    return bytesRead;  }  @Override  public boolean needAdditionalRecordAfterSplit() {    return !finished && needAdditionalRecord;  }  @Override  protected void unsetNeedAdditionalRecordAfterSplit() {    needAdditionalRecord = false;  }  private boolean didReadAfterSplit() throws IOException {    return scin.getPos() > scin.getAdjustedEnd();  }}