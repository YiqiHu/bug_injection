public class ITestAbfsInputStreamStatistics    extends AbstractAbfsIntegrationTest {  private static final int OPERATIONS = 10;  private static final Logger LOG =      LoggerFactory.getLogger(ITestAbfsInputStreamStatistics.class);  private static final int ONE_MB = 1024 * 1024;  private static final int ONE_KB = 1024;  private static final int CUSTOM_BLOCK_BUFFER_SIZE = 4 * 1024;  private byte[] defBuffer = new byte[ONE_MB];  public ITestAbfsInputStreamStatistics() throws Exception {  }    @Test  public void testInitValues() throws IOException {    describe("Testing the initial values of AbfsInputStream Statistics");    AzureBlobFileSystem fs = getFileSystem();    AzureBlobFileSystemStore abfss = fs.getAbfsStore();    Path initValuesPath = path(getMethodName());    AbfsOutputStream outputStream = null;    AbfsInputStream inputStream = null;    try {      outputStream = createAbfsOutputStreamWithFlushEnabled(fs, initValuesPath);      inputStream = abfss.openFileForRead(initValuesPath, fs.getFsStatistics());      AbfsInputStreamStatisticsImpl stats =          (AbfsInputStreamStatisticsImpl) inputStream.getStreamStatistics();      checkInitValue(stats.getSeekOperations(), "seekOps");      checkInitValue(stats.getForwardSeekOperations(), "forwardSeekOps");      checkInitValue(stats.getBackwardSeekOperations(), "backwardSeekOps");      checkInitValue(stats.getBytesRead(), "bytesRead");      checkInitValue(stats.getBytesSkippedOnSeek(), "bytesSkippedOnSeek");      checkInitValue(stats.getBytesBackwardsOnSeek(), "bytesBackwardsOnSeek");      checkInitValue(stats.getSeekInBuffer(), "seekInBuffer");      checkInitValue(stats.getReadOperations(), "readOps");      checkInitValue(stats.getBytesReadFromBuffer(), "bytesReadFromBuffer");      checkInitValue(stats.getRemoteReadOperations(), "remoteReadOps");      checkInitValue(stats.getReadAheadBytesRead(), "readAheadBytesRead");      checkInitValue(stats.getRemoteBytesRead(), "readAheadRemoteBytesRead");    } finally {      IOUtils.cleanupWithLogger(LOG, outputStream, inputStream);    }  }    @Test  public void testSeekStatistics() throws IOException {    describe("Testing the values of statistics from seek operations in "        + "AbfsInputStream");    AzureBlobFileSystem fs = getFileSystem();    AzureBlobFileSystemStore abfss = fs.getAbfsStore();    Path seekStatPath = path(getMethodName());    AbfsOutputStream out = null;    AbfsInputStream in = null;    try {      out = createAbfsOutputStreamWithFlushEnabled(fs, seekStatPath);            out.write(defBuffer);      out.hflush();      in = abfss.openFileForRead(seekStatPath, fs.getFsStatistics());            int result = in.read(defBuffer, 0, ONE_MB);      LOG.info("Result of read : {}", result);            for (int i = 0; i < OPERATIONS; i++) {        in.seek(0);        in.seek(ONE_MB);      }      AbfsInputStreamStatisticsImpl stats =          (AbfsInputStreamStatisticsImpl) in.getStreamStatistics();      LOG.info("STATISTICS: {}", stats.toString());            assertEquals("Mismatch in seekOps value", 2 * OPERATIONS,          stats.getSeekOperations());      assertEquals("Mismatch in backwardSeekOps value", OPERATIONS,          stats.getBackwardSeekOperations());      assertEquals("Mismatch in forwardSeekOps value", OPERATIONS,          stats.getForwardSeekOperations());      assertEquals("Mismatch in bytesBackwardsOnSeek value",          -1 * OPERATIONS * ONE_MB, stats.getBytesBackwardsOnSeek());      assertEquals("Mismatch in bytesSkippedOnSeek value",          0, stats.getBytesSkippedOnSeek());      assertEquals("Mismatch in seekInBuffer value", 2 * OPERATIONS,          stats.getSeekInBuffer());      in.close();            LOG.info("STATISTICS after closing: {}", stats.toString());    } finally {      IOUtils.cleanupWithLogger(LOG, out, in);    }  }    @Test  public void testReadStatistics() throws IOException {    describe("Testing the values of statistics from read operation in "        + "AbfsInputStream");    AzureBlobFileSystem fs = getFileSystem();    AzureBlobFileSystemStore abfss = fs.getAbfsStore();    Path readStatPath = path(getMethodName());    AbfsOutputStream out = null;    AbfsInputStream in = null;    try {      out = createAbfsOutputStreamWithFlushEnabled(fs, readStatPath);            out.write(defBuffer);      out.hflush();      in = abfss.openFileForRead(readStatPath, fs.getFsStatistics());            for (int i = 0; i < OPERATIONS; i++) {        in.read();      }      AbfsInputStreamStatisticsImpl stats =          (AbfsInputStreamStatisticsImpl) in.getStreamStatistics();      LOG.info("STATISTICS: {}", stats.toString());            assertEquals("Mismatch in bytesRead value", OPERATIONS,          stats.getBytesRead());      assertEquals("Mismatch in readOps value", OPERATIONS,          stats.getReadOperations());      assertEquals("Mismatch in remoteReadOps value", 1,          stats.getRemoteReadOperations());      in.close();            LOG.info("STATISTICS after closing: {}", stats.toString());    } finally {      IOUtils.cleanupWithLogger(LOG, out, in);    }  }    @Test  public void testWithNullStreamStatistics() throws IOException {    describe("Testing AbfsInputStream operations with statistics as null");    AzureBlobFileSystem fs = getFileSystem();    Path nullStatFilePath = path(getMethodName());    byte[] oneKbBuff = new byte[ONE_KB];        AbfsInputStreamContext abfsInputStreamContext =        new AbfsInputStreamContext(            getConfiguration().getSasTokenRenewPeriodForStreamsInSeconds())            .withReadBufferSize(getConfiguration().getReadBufferSize())            .withReadAheadQueueDepth(getConfiguration().getReadAheadQueueDepth())            .withStreamStatistics(null)            .build();    AbfsOutputStream out = null;    AbfsInputStream in = null;    try {      out = createAbfsOutputStreamWithFlushEnabled(fs, nullStatFilePath);            out.write(oneKbBuff);      out.hflush();            AbfsRestOperation abfsRestOperation =          fs.getAbfsClient().getPathStatus(nullStatFilePath.toUri().getPath(), false);            in = new AbfsInputStream(fs.getAbfsClient(), null,          nullStatFilePath.toUri().getPath(), ONE_KB,          abfsInputStreamContext,          abfsRestOperation.getResult().getResponseHeader("ETag"));            assertNotEquals("AbfsInputStream read() with null statistics should "          + "work", -1, in.read());      in.seek(ONE_KB);            LOG.info("AbfsInputStream: {}", in.toString());    } finally {      IOUtils.cleanupWithLogger(LOG, out, in);    }  }    @Test  public void testReadAheadCounters() throws IOException {    describe("Test to check correct values for readAhead counters in "        + "AbfsInputStream");    AzureBlobFileSystem fs = getFileSystem();    AzureBlobFileSystemStore abfss = fs.getAbfsStore();    Path readAheadCountersPath = path(getMethodName());        abfss.getAbfsConfiguration().setReadBufferSize(CUSTOM_BLOCK_BUFFER_SIZE);    AbfsOutputStream out = null;    AbfsInputStream in = null;    try {            out = createAbfsOutputStreamWithFlushEnabled(fs, readAheadCountersPath);      out.write(defBuffer);      out.close();      in = abfss.openFileForRead(readAheadCountersPath, fs.getFsStatistics());            for (int i = 0; i < 5; i++) {        in.seek(ONE_KB * i);        in.read(defBuffer, ONE_KB * i, ONE_KB);      }      AbfsInputStreamStatisticsImpl stats =          (AbfsInputStreamStatisticsImpl) in.getStreamStatistics();            Assertions.assertThat(stats.getReadAheadBytesRead()).describedAs(          "Mismatch in readAheadBytesRead counter value")          .isGreaterThanOrEqualTo(in.getBytesFromReadAhead());      Assertions.assertThat(stats.getRemoteBytesRead()).describedAs(          "Mismatch in remoteBytesRead counter value")          .isGreaterThanOrEqualTo(in.getBytesFromRemoteRead());    } finally {      IOUtils.cleanupWithLogger(LOG, out, in);    }  }    private void checkInitValue(long actualValue, String statistic) {    assertEquals("Mismatch in " + statistic + " value", 0, actualValue);  }}