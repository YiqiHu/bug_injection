public abstract class FCStatisticsBaseTest {  private static final Logger LOG = LoggerFactory.getLogger(FCStatisticsBaseTest      .class);  static protected int blockSize = 512;  static protected int numBlocks = 1;    protected final FileContextTestHelper fileContextTestHelper = new FileContextTestHelper();    protected static FileContext fc = null;    @Test(timeout=60000)  public void testStatisticsOperations() throws Exception {    final Statistics stats = new Statistics("file");    Assert.assertEquals(0L, stats.getBytesRead());    Assert.assertEquals(0L, stats.getBytesWritten());    Assert.assertEquals(0, stats.getWriteOps());    stats.incrementBytesWritten(1000);    Assert.assertEquals(1000L, stats.getBytesWritten());    Assert.assertEquals(0, stats.getWriteOps());    stats.incrementWriteOps(123);    Assert.assertEquals(123, stats.getWriteOps());        Thread thread = new Thread() {      @Override      public void run() {        stats.incrementWriteOps(1);      }    };    thread.start();    Uninterruptibles.joinUninterruptibly(thread);    Assert.assertEquals(124, stats.getWriteOps());        Statistics stats2 = new Statistics(stats);    stats.reset();    Assert.assertEquals(0, stats.getWriteOps());    Assert.assertEquals(0L, stats.getBytesWritten());    Assert.assertEquals(0L, stats.getBytesRead());    Assert.assertEquals(124, stats2.getWriteOps());    Assert.assertEquals(1000L, stats2.getBytesWritten());    Assert.assertEquals(0L, stats2.getBytesRead());  }  @Test  public void testStatistics() throws IOException, URISyntaxException {    URI fsUri = getFsUri();    Statistics stats = FileContext.getStatistics(fsUri);    Assert.assertEquals(0, stats.getBytesRead());    Path filePath = fileContextTestHelper .getTestRootPath(fc, "file1");    createFile(fc, filePath, numBlocks, blockSize);    Assert.assertEquals(0, stats.getBytesRead());    verifyWrittenBytes(stats);    FSDataInputStream fstr = fc.open(filePath);    byte[] buf = new byte[blockSize];    int bytesRead = fstr.read(buf, 0, blockSize);    fstr.read(0, buf, 0, blockSize);    Assert.assertEquals(blockSize, bytesRead);    verifyReadBytes(stats);    verifyWrittenBytes(stats);    verifyReadBytes(FileContext.getStatistics(getFsUri()));    Map<URI, Statistics> statsMap = FileContext.getAllStatistics();    URI exactUri = getSchemeAuthorityUri();    verifyWrittenBytes(statsMap.get(exactUri));    fc.delete(filePath, true);  }  @Test(timeout=70000)  public void testStatisticsThreadLocalDataCleanUp() throws Exception {    final Statistics stats = new Statistics("test");        final int size = 2;    ExecutorService es = Executors.newFixedThreadPool(size);    List<Callable<Boolean>> tasks = new ArrayList<Callable<Boolean>>(size);    for (int i = 0; i < size; i++) {      tasks.add(new Callable<Boolean>() {        public Boolean call() {                    stats.incrementReadOps(1);          return true;        }      });    }        es.invokeAll(tasks);        final AtomicInteger allDataSize = new AtomicInteger(0);    allDataSize.set(stats.getAllThreadLocalDataSize());    Assert.assertEquals(size, allDataSize.get());    Assert.assertEquals(size, stats.getReadOps());        es.shutdownNow();    es.awaitTermination(1, TimeUnit.MINUTES);    es = null;    System.gc();         GenericTestUtils.waitFor(new Supplier<Boolean>() {          @Override          public Boolean get() {            int size = stats.getAllThreadLocalDataSize();            allDataSize.set(size);            if (size == 0) {              return true;            }            LOG.warn("not all references have been cleaned up; still " +                allDataSize.get() + " references left");            LOG.warn("triggering another GC");            System.gc();            return false;          }        }, 500, 60*1000);    Assert.assertEquals(0, allDataSize.get());    Assert.assertEquals(size, stats.getReadOps());  }    protected abstract void verifyReadBytes(Statistics stats);    protected abstract void verifyWrittenBytes(Statistics stats)      throws IOException;      protected abstract URI getFsUri();  protected URI getSchemeAuthorityUri() {    URI uri = getFsUri();    String SchemeAuthString = uri.getScheme() + "://";    if (uri.getAuthority() == null) {      SchemeAuthString += "/";    } else {      SchemeAuthString += uri.getAuthority();    }    return URI.create(SchemeAuthString);  }}