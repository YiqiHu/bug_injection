

package org.apache.hadoop.fs.azurebfs;

import java.io.IOException;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.junit.Test;

import org.apache.hadoop.fs.FSDataInputStream;
import org.apache.hadoop.fs.FSDataOutputStream;
import org.apache.hadoop.fs.FileAlreadyExistsException;
import org.apache.hadoop.io.IOUtils;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.fs.azurebfs.services.AbfsOutputStream;
import org.apache.hadoop.fs.azurebfs.services.AbfsRestOperation;

import static org.apache.hadoop.fs.azurebfs.AbfsStatistic.CONNECTIONS_MADE;
import static org.apache.hadoop.fs.azurebfs.AbfsStatistic.SEND_REQUESTS;

public class ITestAbfsNetworkStatistics extends AbstractAbfsIntegrationTest {

  private static final Logger LOG =
      LoggerFactory.getLogger(ITestAbfsNetworkStatistics.class);
  private static final int LARGE_OPERATIONS = 10;

  public ITestAbfsNetworkStatistics() throws Exception {
  }

  
  @Test
  public void testAbfsHttpSendStatistics() throws IOException {
    describe("Test to check correct values of statistics after Abfs http send "
        + "request is done.");

    AzureBlobFileSystem fs = getFileSystem();
    Map<String, Long> metricMap;
    Path sendRequestPath = path(getMethodName());
    String testNetworkStatsString = "http_send";
    long connectionsMade, requestsSent, bytesSent;

    metricMap = fs.getInstrumentationMap();
    long connectionsMadeBeforeTest = metricMap
        .get(CONNECTIONS_MADE.getStatName());
    long requestsMadeBeforeTest = metricMap.get(SEND_REQUESTS.getStatName());

    
    try (AbfsOutputStream out = createAbfsOutputStreamWithFlushEnabled(fs,
        sendRequestPath)) {
      out.write(testNetworkStatsString.getBytes());

      
      out.hflush();

      metricMap = fs.getInstrumentationMap();

      
      long extraCalls = 0;
      if (!fs.getAbfsStore()
          .isAppendBlobKey(fs.makeQualified(sendRequestPath).toString())) {
        
        extraCalls++;
      }
      long expectedConnectionsMade = connectionsMadeBeforeTest + extraCalls + 2;
      long expectedRequestsSent = requestsMadeBeforeTest + extraCalls + 2;
      connectionsMade = assertAbfsStatistics(CONNECTIONS_MADE,
          expectedConnectionsMade, metricMap);
      requestsSent = assertAbfsStatistics(SEND_REQUESTS, expectedRequestsSent,
          metricMap);
      bytesSent = assertAbfsStatistics(AbfsStatistic.BYTES_SENT,
          testNetworkStatsString.getBytes().length, metricMap);
    }

    
    connectionsMade++;
    requestsSent++;

    try (AbfsOutputStream out = createAbfsOutputStreamWithFlushEnabled(fs,
        sendRequestPath)) {

      for (int i = 0; i < LARGE_OPERATIONS; i++) {
        out.write(testNetworkStatsString.getBytes());

        
        out.hflush();
      }

      metricMap = fs.getInstrumentationMap();

      
      if (fs.getAbfsStore().isAppendBlobKey(fs.makeQualified(sendRequestPath).toString())) {
        
        assertAbfsStatistics(CONNECTIONS_MADE,
            connectionsMade + 1 + LARGE_OPERATIONS, metricMap);
        assertAbfsStatistics(SEND_REQUESTS,
            requestsSent + 1 + LARGE_OPERATIONS, metricMap);
      } else {
        assertAbfsStatistics(CONNECTIONS_MADE,
            connectionsMade + 1 + LARGE_OPERATIONS * 2, metricMap);
        assertAbfsStatistics(SEND_REQUESTS,
            requestsSent + 1 + LARGE_OPERATIONS * 2, metricMap);
      }
      assertAbfsStatistics(AbfsStatistic.BYTES_SENT,
          bytesSent + LARGE_OPERATIONS * (testNetworkStatsString.getBytes().length),
          metricMap);

    }

  }

  
  @Test
  public void testAbfsHttpResponseStatistics() throws IOException {
    describe("Test to check correct values of statistics after Http "
        + "Response is processed.");

    AzureBlobFileSystem fs = getFileSystem();
    Path getResponsePath = path(getMethodName());
    Map<String, Long> metricMap;
    String testResponseString = "some response";
    long getResponses, bytesReceived;

    FSDataOutputStream out = null;
    FSDataInputStream in = null;
    try {

      
      out = fs.create(getResponsePath);
      out.write(testResponseString.getBytes());
      out.hflush();

      metricMap = fs.getInstrumentationMap();
      long getResponsesBeforeTest = metricMap
          .get(CONNECTIONS_MADE.getStatName());

      
      in = fs.open(getResponsePath);
      
      int result = in.read();

      
      LOG.info("Result of read operation : {}", result);

      metricMap = fs.getInstrumentationMap();

      
      long extraCalls = 0;
      if (!fs.getAbfsStore()
          .isAppendBlobKey(fs.makeQualified(getResponsePath).toString())) {
        
        extraCalls++;
      }
      long expectedGetResponses = getResponsesBeforeTest + extraCalls + 1;
      getResponses = assertAbfsStatistics(AbfsStatistic.GET_RESPONSES,
          expectedGetResponses, metricMap);

      
      long bytesSend = metricMap.get(AbfsStatistic.BYTES_SENT.getStatName());
      bytesReceived = assertAbfsStatistics(AbfsStatistic.BYTES_RECEIVED,
          bytesSend,
          metricMap);

    } finally {
      IOUtils.cleanupWithLogger(LOG, out, in);
    }

    
    getResponses++;

    try {

      
      StringBuilder largeBuffer = new StringBuilder();
      out = fs.create(getResponsePath);
      for (int i = 0; i < LARGE_OPERATIONS; i++) {
        out.write(testResponseString.getBytes());
        out.hflush();
        largeBuffer.append(testResponseString);
      }

      
      in = fs.open(getResponsePath);

      
      in.read(0, largeBuffer.toString().getBytes(), 0,
          largeBuffer.toString().getBytes().length);

      metricMap = fs.getInstrumentationMap();

      
      assertAbfsStatistics(AbfsStatistic.BYTES_RECEIVED,
          bytesReceived + LARGE_OPERATIONS * (testResponseString.getBytes().length),
          metricMap);
      if (fs.getAbfsStore().isAppendBlobKey(fs.makeQualified(getResponsePath).toString())) {
        
        assertAbfsStatistics(AbfsStatistic.GET_RESPONSES,
            getResponses + 3 + LARGE_OPERATIONS, metricMap);
      } else {
        assertAbfsStatistics(AbfsStatistic.GET_RESPONSES,
            getResponses + 3 + 2 * LARGE_OPERATIONS, metricMap);
      }

    } finally {
      IOUtils.cleanupWithLogger(LOG, out, in);
    }
  }

  
  @Test
  public void testAbfsHttpResponseFailure() throws IOException {
    describe("Test to check the values of bytes received counter when a "
        + "response is failed");

    AzureBlobFileSystem fs = getFileSystem();
    Path responseFailurePath = path(getMethodName());
    Map<String, Long> metricMap;
    FSDataOutputStream out = null;

    try {
      
      out = fs.create(responseFailurePath);
      
      
      out = fs.create(responseFailurePath, false);
    } catch (FileAlreadyExistsException faee) {
      metricMap = fs.getInstrumentationMap();
      
      assertAbfsStatistics(AbfsStatistic.BYTES_RECEIVED, 0, metricMap);
    } finally {
      IOUtils.cleanupWithLogger(LOG, out);
    }
  }
}
