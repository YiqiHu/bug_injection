public class ITestS3ABucketExistence extends AbstractS3ATestBase {  private FileSystem fs;  private final String randomBucket =          "random-bucket-" + UUID.randomUUID().toString();  private final URI uri = URI.create(FS_S3A + "://" + randomBucket + "/");  @SuppressWarnings("deprecation")  @Test  public void testNoBucketProbing() throws Exception {    describe("Disable init-time probes and expect FS operations to fail");    Configuration conf = createConfigurationWithProbe(0);        conf.set(S3_METADATA_STORE_IMPL, S3GUARD_METASTORE_NULL);    fs = FileSystem.get(uri, conf);    Path root = new Path(uri);        assertTrue("root path should always exist", fs.exists(root));    assertTrue("getFileStatus on root should always return a directory",            fs.getFileStatus(root).isDirectory());    expectUnknownStore(        () -> fs.listStatus(root));    Path src = new Path(root, "testfile");    Path dest = new Path(root, "dst");    expectUnknownStore(        () -> fs.getFileStatus(src));        expectUnknownStore(() -> fs.exists(src));            assertFalse("isFile(" + src + ")"            + " was expected to complete by returning false",        fs.isFile(src));    expectUnknownStore(() -> fs.isDirectory(src));    expectUnknownStore(() -> fs.mkdirs(src));    expectUnknownStore(() -> fs.delete(src));    expectUnknownStore(() -> fs.rename(src, dest));    byte[] data = dataset(1024, 'a', 'z');    expectUnknownStore(        () -> writeDataset(fs, src, data, data.length, 1024 * 1024, true));  }    public static <T> void expectUnknownStore(      Callable<T> eval)      throws Exception {    intercept(UnknownStoreException.class, eval);  }    public static void expectUnknownStore(      LambdaTestUtils.VoidCallable eval)      throws Exception {    intercept(UnknownStoreException.class, eval);  }    private Configuration createConfigurationWithProbe(final int probe) {    Configuration conf = new Configuration(getFileSystem().getConf());    S3ATestUtils.disableFilesystemCaching(conf);    conf.setInt(S3A_BUCKET_PROBE, probe);    return conf;  }  @Test  public void testBucketProbingV1() throws Exception {    describe("Test the V1 bucket probe");    Configuration configuration = createConfigurationWithProbe(1);    expectUnknownStore(        () -> FileSystem.get(uri, configuration));  }  @Test  public void testBucketProbingV2() throws Exception {    describe("Test the V2 bucket probe");    Configuration configuration = createConfigurationWithProbe(2);    expectUnknownStore(        () -> FileSystem.get(uri, configuration));        configuration.setInt(S3A_BUCKET_PROBE, 3);    expectUnknownStore(            () -> FileSystem.get(uri, configuration));  }  @Test  public void testBucketProbingParameterValidation() throws Exception {    describe("Test bucket probe parameter %s validation", S3A_BUCKET_PROBE);    Configuration configuration = createConfigurationWithProbe(-1);    intercept(IllegalArgumentException.class,            "Value of " + S3A_BUCKET_PROBE + " should be >= 0",            "Should throw IllegalArgumentException",        () -> FileSystem.get(uri, configuration));  }  @Override  protected Configuration getConfiguration() {    Configuration configuration = super.getConfiguration();    S3ATestUtils.disableFilesystemCaching(configuration);    return configuration;  }  @Override  public void teardown() throws Exception {    IOUtils.cleanupWithLogger(getLogger(), fs);    super.teardown();  }}