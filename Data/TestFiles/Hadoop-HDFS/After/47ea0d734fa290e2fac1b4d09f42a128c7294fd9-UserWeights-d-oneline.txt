public final class UserWeights {  public static final float DEFAULT_WEIGHT = 1.0F;    private final Map<String, Float> data = new HashMap<>();  private UserWeights() {}  public static UserWeights createEmpty() {    return new UserWeights();  }  public static UserWeights createByConfig(      CapacitySchedulerConfiguration conf,      ConfigurationProperties configurationProperties,      String queuePath) {    String queuePathPlusPrefix = getQueuePrefix(queuePath) + USER_SETTINGS;    Map<String, String> props = configurationProperties        .getPropertiesWithPrefix(queuePathPlusPrefix);    UserWeights userWeights = new UserWeights();    for (Map.Entry<String, String> item: props.entrySet()) {      Matcher m = USER_WEIGHT_PATTERN.matcher(item.getKey());      if (m.find()) {        String userName = item.getKey().replaceFirst("\\." + USER_WEIGHT, "");        if (!userName.isEmpty()) {          String value = conf.substituteCommonVariables(item.getValue());          userWeights.data.put(userName, new Float(value));        }      }    }    return userWeights;  }  public float getByUser(String userName) {    Float weight = data.get(userName);    if (weight == null) {      return DEFAULT_WEIGHT;    }    return weight;  }  public void validateForLeafQueue(float queueUserLimit, String queuePath) throws IOException {    for (Map.Entry<String, Float> e : data.entrySet()) {      String userName = e.getKey();      float weight = e.getValue();      if (weight < 0.0F || weight > (100.0F / queueUserLimit)) {        throw new IOException("Weight (" + weight + ") for user \"" + userName            + "\" must be between 0 and" + " 100 / " + queueUserLimit + " (= " +            100.0f / queueUserLimit + ", the number of concurrent active users in "            + queuePath + ")");      }    }  }  public void addFrom(UserWeights addFrom) {    data.putAll(addFrom.data);  }}