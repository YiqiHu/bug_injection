public class TestViewFsHdfs extends ViewFsBaseTest {  private static MiniDFSCluster cluster;  private static final HdfsConfiguration CONF = new HdfsConfiguration();  private static FileContext fc;    @Override  protected FileContextTestHelper createFileContextHelper() {    return new FileContextTestHelper("/tmp/TestViewFsHdfs");  }  @BeforeClass  public static void clusterSetupAtBegining() throws IOException,      LoginException, URISyntaxException {    SupportsBlocks = true;    CONF.setBoolean(        DFSConfigKeys.DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY, true);    cluster = new MiniDFSCluster.Builder(CONF).numDataNodes(2).build();    cluster.waitClusterUp();    fc = FileContext.getFileContext(cluster.getURI(0), CONF);    Path defaultWorkingDirectory = fc.makeQualified( new Path("/user/" +         UserGroupInformation.getCurrentUser().getShortUserName()));    fc.mkdir(defaultWorkingDirectory, FileContext.DEFAULT_PERM, true);  }        @AfterClass  public static void ClusterShutdownAtEnd() throws Exception {    if (cluster != null) {      cluster.shutdown();    }  }  @Override  @Before  public void setUp() throws Exception {        fcTarget = fc;    super.setUp();  }      @Override  int getExpectedDelegationTokenCount() {    return 8;  }  @Test  public void testTargetFileSystemLazyInitialization() throws Exception {    final Map<String, FileContext> map = new HashMap<>();    final Path user1Path = new Path("/data/user1");            FileContext fs = FileContext.getFileContext(FsConstants.VIEWFS_URI, conf);    fs.mkdir(user1Path, FileContext.DEFAULT_PERM, false);    fs.delete(user1Path, false);        final UserGroupInformation userUgi = UserGroupInformation        .createUserForTesting("user1@HADOOP.COM", new String[]{"hadoop"});    userUgi.doAs(new PrivilegedExceptionAction<Object>() {      @Override      public Object run() throws IOException {        UserGroupInformation ugi = UserGroupInformation.getCurrentUser();        String doAsUserName = ugi.getUserName();        assertEquals(doAsUserName, "user1@HADOOP.COM");        FileContext viewFS = FileContext.getFileContext(            FsConstants.VIEWFS_URI, conf);        map.put("user1", viewFS);        return null;      }    });                    try {      FileContext otherfs = map.get("user1");      otherfs.mkdir(user1Path, FileContext.DEFAULT_PERM, false);      fail("This mkdir should fail");    } catch (AccessControlException ex) {                            }        fcView.setOwner(new Path("/data"), "user1", "test2");        fcView.setPermission(new Path("/data"), new FsPermission("775"));    userUgi.doAs(new PrivilegedExceptionAction<Object>() {      @Override      public Object run() throws IOException {        FileContext viewFS = FileContext.getFileContext(            FsConstants.VIEWFS_URI, conf);        map.put("user1", viewFS);        return null;      }    });                FileContext otherfs = map.get("user1");    otherfs.mkdir(user1Path, FileContext.DEFAULT_PERM, false);    String owner = otherfs.getFileStatus(user1Path).getOwner();    assertEquals("The owner did not match ", owner, userUgi.getShortUserName());    otherfs.delete(user1Path, false);  } }