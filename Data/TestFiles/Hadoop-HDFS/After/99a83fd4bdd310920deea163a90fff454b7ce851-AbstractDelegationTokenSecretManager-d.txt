

package org.apache.hadoop.security.token.delegation;

import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

import javax.crypto.SecretKey;

import org.apache.hadoop.classification.InterfaceAudience;
import org.apache.hadoop.classification.InterfaceStability;
import org.apache.hadoop.fs.statistics.DurationTracker;
import org.apache.hadoop.fs.statistics.DurationTrackerFactory;
import org.apache.hadoop.fs.statistics.impl.IOStatisticsBinding;
import org.apache.hadoop.fs.statistics.impl.IOStatisticsStore;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.metrics2.annotation.Metric;
import org.apache.hadoop.metrics2.annotation.Metrics;
import org.apache.hadoop.metrics2.lib.DefaultMetricsSystem;
import org.apache.hadoop.metrics2.lib.MetricsRegistry;
import org.apache.hadoop.metrics2.lib.MutableCounterLong;
import org.apache.hadoop.metrics2.lib.MutableRate;
import org.apache.hadoop.metrics2.util.Metrics2Util.NameValuePair;
import org.apache.hadoop.metrics2.util.Metrics2Util.TopN;
import org.apache.hadoop.security.AccessControlException;
import org.apache.hadoop.security.HadoopKerberosName;
import org.apache.hadoop.security.token.SecretManager;
import org.apache.hadoop.security.token.Token;
import org.apache.hadoop.util.Daemon;
import org.apache.hadoop.util.Time;

import org.apache.hadoop.util.Preconditions;
import org.apache.hadoop.util.functional.InvocationRaisingIOE;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@InterfaceAudience.Public
@InterfaceStability.Evolving
public abstract 
class AbstractDelegationTokenSecretManager<TokenIdent 
extends AbstractDelegationTokenIdentifier> 
   extends SecretManager<TokenIdent> {
  private static final Logger LOG = LoggerFactory
      .getLogger(AbstractDelegationTokenSecretManager.class);

  
  private static final DelegationTokenSecretManagerMetrics METRICS
      = DelegationTokenSecretManagerMetrics.create();

  private String formatTokenId(TokenIdent id) {
    return "(" + id + ")";
  }

  
  protected final Map<TokenIdent, DelegationTokenInformation> currentTokens 
      = new ConcurrentHashMap<>();

  
  protected final Map<String, Long> tokenOwnerStats = new ConcurrentHashMap<>();

  
  protected int delegationTokenSequenceNumber = 0;
  
  
  protected final Map<Integer, DelegationKey> allKeys 
      = new ConcurrentHashMap<>();
  
  
  protected int currentId = 0;
  
  private DelegationKey currentKey;
  
  private long keyUpdateInterval;
  private long tokenMaxLifetime;
  private long tokenRemoverScanInterval;
  private long tokenRenewInterval;
  
  protected boolean storeTokenTrackingId;
  private Thread tokenRemoverThread;
  protected volatile boolean running;

  
  protected Object noInterruptsLock = new Object();

  
  public AbstractDelegationTokenSecretManager(long delegationKeyUpdateInterval,
      long delegationTokenMaxLifetime, long delegationTokenRenewInterval,
      long delegationTokenRemoverScanInterval) {
    this.keyUpdateInterval = delegationKeyUpdateInterval;
    this.tokenMaxLifetime = delegationTokenMaxLifetime;
    this.tokenRenewInterval = delegationTokenRenewInterval;
    this.tokenRemoverScanInterval = delegationTokenRemoverScanInterval;
    this.storeTokenTrackingId = false;
  }

  
  public void startThreads() throws IOException {
    Preconditions.checkState(!running);
    updateCurrentKey();
    synchronized (this) {
      running = true;
      tokenRemoverThread = new Daemon(new ExpiredTokenRemover());
      tokenRemoverThread.start();
    }
  }
  
  
  public synchronized void reset() {
    setCurrentKeyId(0);
    allKeys.clear();
    setDelegationTokenSeqNum(0);
    currentTokens.clear();
  }

  
  public long getCurrentTokensSize() {
    return currentTokens.size();
  }

  
  public synchronized void addKey(DelegationKey key) throws IOException {
    if (running) 
      throw new IOException("Can't add delegation key to a running SecretManager.");
    if (key.getKeyId() > getCurrentKeyId()) {
      setCurrentKeyId(key.getKeyId());
    }
    allKeys.put(key.getKeyId(), key);
  }

  public synchronized DelegationKey[] getAllKeys() {
    return allKeys.values().toArray(new DelegationKey[0]);
  }

  
  protected void logUpdateMasterKey(DelegationKey key) throws IOException {
    return;
  }

  
  protected void logExpireToken(TokenIdent ident) throws IOException {
    return;
  }

  
  protected void storeNewMasterKey(DelegationKey key) throws IOException {
    return;
  }

  
  protected void removeStoredMasterKey(DelegationKey key) {
    return;
  }

  
  protected void storeNewToken(TokenIdent ident, long renewDate) throws IOException{
    return;
  }

  
  protected void removeStoredToken(TokenIdent ident) throws IOException {

  }
  
  protected void updateStoredToken(TokenIdent ident, long renewDate) throws IOException {
    return;
  }

  
  protected synchronized int getCurrentKeyId() {
    return currentId;
  }

  
  protected synchronized int incrementCurrentKeyId() {
    return ++currentId;
  }

  
  protected synchronized void setCurrentKeyId(int keyId) {
    currentId = keyId;
  }

  
  protected synchronized int getDelegationTokenSeqNum() {
    return delegationTokenSequenceNumber;
  }

  
  protected synchronized int incrementDelegationTokenSeqNum() {
    return ++delegationTokenSequenceNumber;
  }

  
  protected synchronized void setDelegationTokenSeqNum(int seqNum) {
    delegationTokenSequenceNumber = seqNum;
  }

  
  protected DelegationKey getDelegationKey(int keyId) {
    return allKeys.get(keyId);
  }

  
  protected void storeDelegationKey(DelegationKey key) throws IOException {
    allKeys.put(key.getKeyId(), key);
    storeNewMasterKey(key);
  }

  
  protected void updateDelegationKey(DelegationKey key) throws IOException {
    allKeys.put(key.getKeyId(), key);
  }

  
  protected DelegationTokenInformation getTokenInfo(TokenIdent ident) {
    return currentTokens.get(ident);
  }

  
  protected void storeToken(TokenIdent ident,
      DelegationTokenInformation tokenInfo) throws IOException {
    currentTokens.put(ident, tokenInfo);
    addTokenForOwnerStats(ident);
    storeNewToken(ident, tokenInfo.getRenewDate());
  }

  
  protected void updateToken(TokenIdent ident,
      DelegationTokenInformation tokenInfo) throws IOException {
    currentTokens.put(ident, tokenInfo);
    updateStoredToken(ident, tokenInfo.getRenewDate());
  }

  
  public synchronized void addPersistedDelegationToken(
      TokenIdent identifier, long renewDate) throws IOException {
    if (running) {
      
      throw new IOException(
          "Can't add persisted delegation token to a running SecretManager.");
    }
    int keyId = identifier.getMasterKeyId();
    DelegationKey dKey = allKeys.get(keyId);
    byte[] password = null;
    if (dKey == null) {
      LOG.warn("No KEY found for persisted identifier, expiring stored token "
          + formatTokenId(identifier));
      
      renewDate = 0L;
    } else {
      password = createPassword(identifier.getBytes(), dKey.getKey());
    }
    if (identifier.getSequenceNumber() > getDelegationTokenSeqNum()) {
      setDelegationTokenSeqNum(identifier.getSequenceNumber());
    }
    if (getTokenInfo(identifier) == null) {
      currentTokens.put(identifier, new DelegationTokenInformation(renewDate,
          password, getTrackingIdIfEnabled(identifier)));
      addTokenForOwnerStats(identifier);
    } else {
      throw new IOException("Same delegation token being added twice: "
          + formatTokenId(identifier));
    }
  }

  
  private void updateCurrentKey() throws IOException {
    LOG.info("Updating the current master key for generating delegation tokens");
    
    int newCurrentId;
    synchronized (this) {
      newCurrentId = incrementCurrentKeyId();
    }
    DelegationKey newKey = new DelegationKey(newCurrentId, System
        .currentTimeMillis()
        + keyUpdateInterval + tokenMaxLifetime, generateSecret());
    
    logUpdateMasterKey(newKey);
    synchronized (this) {
      currentKey = newKey;
      storeDelegationKey(currentKey);
    }
  }
  
  
  void rollMasterKey() throws IOException {
    synchronized (this) {
      removeExpiredKeys();
      
      currentKey.setExpiryDate(Time.now() + tokenMaxLifetime);
      
      updateDelegationKey(currentKey);
    }
    updateCurrentKey();
  }

  private synchronized void removeExpiredKeys() {
    long now = Time.now();
    for (Iterator<Map.Entry<Integer, DelegationKey>> it = allKeys.entrySet()
        .iterator(); it.hasNext();) {
      Map.Entry<Integer, DelegationKey> e = it.next();
      if (e.getValue().getExpiryDate() < now) {
        it.remove();
        
        
        if(!e.getValue().equals(currentKey))
          removeStoredMasterKey(e.getValue());
      }
    }
  }
  
  @Override
  protected synchronized byte[] createPassword(TokenIdent identifier) {
    int sequenceNum;
    long now = Time.now();
    sequenceNum = incrementDelegationTokenSeqNum();
    identifier.setIssueDate(now);
    identifier.setMaxDate(now + tokenMaxLifetime);
    identifier.setMasterKeyId(currentKey.getKeyId());
    identifier.setSequenceNumber(sequenceNum);
    LOG.info("Creating password for identifier: " + formatTokenId(identifier)
        + ", currentKey: " + currentKey.getKeyId());
    byte[] password = createPassword(identifier.getBytes(), currentKey.getKey());
    DelegationTokenInformation tokenInfo = new DelegationTokenInformation(now
        + tokenRenewInterval, password, getTrackingIdIfEnabled(identifier));
    try {
      METRICS.trackStoreToken(() -> storeToken(identifier, tokenInfo));
    } catch (IOException ioe) {
      LOG.error("Could not store token " + formatTokenId(identifier) + "!!",
          ioe);
    }
    return password;
  }



  
  protected DelegationTokenInformation checkToken(TokenIdent identifier)
      throws InvalidToken {
    assert Thread.holdsLock(this);
    DelegationTokenInformation info = getTokenInfo(identifier);
    if (info == null) {
      throw new InvalidToken("token " + formatTokenId(identifier)
          + " can't be found in cache");
    }
    long now = Time.now();
    if (info.getRenewDate() < now) {
      throw new InvalidToken("token " + formatTokenId(identifier) + " is " +
          "expired, current time: " + Time.formatTime(now) +
          " expected renewal time: " + Time.formatTime(info.getRenewDate()));
    }
    return info;
  }
  
  @Override
  public synchronized byte[] retrievePassword(TokenIdent identifier)
      throws InvalidToken {
    return checkToken(identifier).getPassword();
  }

  protected String getTrackingIdIfEnabled(TokenIdent ident) {
    if (storeTokenTrackingId) {
      return ident.getTrackingId();
    }
    return null;
  }

  public synchronized String getTokenTrackingId(TokenIdent identifier) {
    DelegationTokenInformation info = getTokenInfo(identifier);
    if (info == null) {
      return null;
    }
    return info.getTrackingId();
  }

  
  public synchronized void verifyToken(TokenIdent identifier, byte[] password)
      throws InvalidToken {
    byte[] storedPassword = retrievePassword(identifier);
    if (!MessageDigest.isEqual(password, storedPassword)) {
      throw new InvalidToken("token " + formatTokenId(identifier)
          + " is invalid, password doesn't match");
    }
  }
  
  
  public synchronized long renewToken(Token<TokenIdent> token,
                         String renewer) throws InvalidToken, IOException {
    ByteArrayInputStream buf = new ByteArrayInputStream(token.getIdentifier());
    DataInputStream in = new DataInputStream(buf);
    TokenIdent id = createIdentifier();
    id.readFields(in);
    LOG.info("Token renewal for identifier: " + formatTokenId(id)
        + "; total currentTokens " +  currentTokens.size());

    long now = Time.now();
    if (id.getMaxDate() < now) {
      throw new InvalidToken(renewer + " tried to renew an expired token "
          + formatTokenId(id) + " max expiration date: "
          + Time.formatTime(id.getMaxDate())
          + " currentTime: " + Time.formatTime(now));
    }
    if ((id.getRenewer() == null) || (id.getRenewer().toString().isEmpty())) {
      throw new AccessControlException(renewer +
          " tried to renew a token " + formatTokenId(id)
          + " without a renewer");
    }
    if (!id.getRenewer().toString().equals(renewer)) {
      throw new AccessControlException(renewer
          + " tries to renew a token " + formatTokenId(id)
          + " with non-matching renewer " + id.getRenewer());
    }
    DelegationKey key = getDelegationKey(id.getMasterKeyId());
    if (key == null) {
      throw new InvalidToken("Unable to find master key for keyId="
          + id.getMasterKeyId()
          + " from cache. Failed to renew an unexpired token "
          + formatTokenId(id) + " with sequenceNumber="
          + id.getSequenceNumber());
    }
    byte[] password = createPassword(token.getIdentifier(), key.getKey());
    if (!MessageDigest.isEqual(password, token.getPassword())) {
      throw new AccessControlException(renewer
          + " is trying to renew a token "
          + formatTokenId(id) + " with wrong password");
    }
    long renewTime = Math.min(id.getMaxDate(), now + tokenRenewInterval);
    String trackingId = getTrackingIdIfEnabled(id);
    DelegationTokenInformation info = new DelegationTokenInformation(renewTime,
        password, trackingId);

    if (getTokenInfo(id) == null) {
      throw new InvalidToken("Renewal request for unknown token "
          + formatTokenId(id));
    }
    METRICS.trackUpdateToken(() -> updateToken(id, info));
    return renewTime;
  }
  
  
  public synchronized TokenIdent cancelToken(Token<TokenIdent> token,
      String canceller) throws IOException {
    ByteArrayInputStream buf = new ByteArrayInputStream(token.getIdentifier());
    DataInputStream in = new DataInputStream(buf);
    TokenIdent id = createIdentifier();
    id.readFields(in);
    LOG.info("Token cancellation requested for identifier: "
        + formatTokenId(id));
    
    if (id.getUser() == null) {
      throw new InvalidToken("Token with no owner " + formatTokenId(id));
    }
    String owner = id.getUser().getUserName();
    Text renewer = id.getRenewer();
    HadoopKerberosName cancelerKrbName = new HadoopKerberosName(canceller);
    String cancelerShortName = cancelerKrbName.getShortName();
    if (!canceller.equals(owner)
        && (renewer == null || renewer.toString().isEmpty() || !cancelerShortName
            .equals(renewer.toString()))) {
      throw new AccessControlException(canceller
          + " is not authorized to cancel the token " + formatTokenId(id));
    }
    DelegationTokenInformation info = currentTokens.remove(id);
    if (info == null) {
      throw new InvalidToken("Token not found " + formatTokenId(id));
    }
    METRICS.trackRemoveToken(() -> {
      removeTokenForOwnerStats(id);
      removeStoredToken(id);
    });
    return id;
  }
  
  
  public static SecretKey createSecretKey(byte[] key) {
    return SecretManager.createSecretKey(key);
  }

  
  @InterfaceStability.Evolving
  public static class DelegationTokenInformation {
    long renewDate;
    byte[] password;
    String trackingId;

    public DelegationTokenInformation(long renewDate, byte[] password) {
      this(renewDate, password, null);
    }

    public DelegationTokenInformation(long renewDate, byte[] password,
        String trackingId) {
      this.renewDate = renewDate;
      this.password = password;
      this.trackingId = trackingId;
    }
    
    public long getRenewDate() {
      return renewDate;
    }
    
    byte[] getPassword() {
      return password;
    }
    
    public String getTrackingId() {
      return trackingId;
    }
  }
  
  
  private void removeExpiredToken() throws IOException {
    long now = Time.now();
    Set<TokenIdent> expiredTokens = new HashSet<TokenIdent>();
    synchronized (this) {
      Iterator<Map.Entry<TokenIdent, DelegationTokenInformation>> i =
          currentTokens.entrySet().iterator();
      while (i.hasNext()) {
        Map.Entry<TokenIdent, DelegationTokenInformation> entry = i.next();
        long renewDate = entry.getValue().getRenewDate();
        if (renewDate < now) {
          expiredTokens.add(entry.getKey());
          removeTokenForOwnerStats(entry.getKey());
          i.remove();
        }
      }
    }
    
    logExpireTokens(expiredTokens);
  }

  protected void logExpireTokens(
      Collection<TokenIdent> expiredTokens) throws IOException {
    for (TokenIdent ident : expiredTokens) {
      logExpireToken(ident);
      LOG.info("Removing expired token " + formatTokenId(ident));
      removeStoredToken(ident);
    }
  }

  public void stopThreads() {
    if (LOG.isDebugEnabled())
      LOG.debug("Stopping expired delegation token remover thread");
    running = false;
    
    if (tokenRemoverThread != null) {
      synchronized (noInterruptsLock) {
        tokenRemoverThread.interrupt();
      }
      try {
        tokenRemoverThread.join();
      } catch (InterruptedException e) {
        throw new RuntimeException(
            "Unable to join on token removal thread", e);
      }
    }
  }
  
  
  public synchronized boolean isRunning() {
    return running;
  }
  
  private class ExpiredTokenRemover extends Thread {
    private long lastMasterKeyUpdate;
    private long lastTokenCacheCleanup;

    @Override
    public void run() {
      LOG.info("Starting expired delegation token remover thread, "
          + "tokenRemoverScanInterval=" + tokenRemoverScanInterval
          / (60 * 1000) + " min(s)");
      try {
        while (running) {
          long now = Time.now();
          if (lastMasterKeyUpdate + keyUpdateInterval < now) {
            try {
              rollMasterKey();
              lastMasterKeyUpdate = now;
            } catch (IOException e) {
              LOG.error("Master key updating failed: ", e);
            }
          }
          if (lastTokenCacheCleanup + tokenRemoverScanInterval < now) {
            removeExpiredToken();
            lastTokenCacheCleanup = now;
          }
          try {
            Thread.sleep(Math.min(5000, keyUpdateInterval)); 
          } catch (InterruptedException ie) {
            LOG.error("ExpiredTokenRemover received " + ie);
          }
        }
      } catch (Throwable t) {
        LOG.error("ExpiredTokenRemover thread received unexpected exception", t);
        Runtime.getRuntime().exit(-1);
      }
    }
  }

  
  public TokenIdent decodeTokenIdentifier(Token<TokenIdent> token) throws IOException {
    return token.decodeIdentifier();
  }

  
  public List<NameValuePair> getTopTokenRealOwners(int n) {
    n = Math.min(n, tokenOwnerStats.size());
    if (n == 0) {
      return new ArrayList<>();
    }

    TopN topN = new TopN(n);
    for (Map.Entry<String, Long> entry : tokenOwnerStats.entrySet()) {
      topN.offer(new NameValuePair(
          entry.getKey(), entry.getValue()));
    }

    List<NameValuePair> list = new ArrayList<>();
    while (!topN.isEmpty()) {
      list.add(topN.poll());
    }
    Collections.reverse(list);
    return list;
  }

  
  private String getTokenRealOwner(TokenIdent id) {
    String realUser;
    if (id.getRealUser() != null && !id.getRealUser().toString().isEmpty()) {
      realUser = id.getRealUser().toString();
    } else {
      
      
      realUser = id.getUser().getUserName();
    }
    return realUser;
  }

  
  private void addTokenForOwnerStats(TokenIdent id) {
    String realOwner = getTokenRealOwner(id);
    tokenOwnerStats.put(realOwner,
        tokenOwnerStats.getOrDefault(realOwner, 0L)+1);
  }

  
  private void removeTokenForOwnerStats(TokenIdent id) {
    String realOwner = getTokenRealOwner(id);
    if (tokenOwnerStats.containsKey(realOwner)) {
      
      if (tokenOwnerStats.get(realOwner) <= 1) {
        tokenOwnerStats.remove(realOwner);
      } else {
        tokenOwnerStats.put(realOwner, tokenOwnerStats.get(realOwner)-1);
      }
    }
  }

  
  protected void syncTokenOwnerStats() {
    tokenOwnerStats.clear();
    for (TokenIdent id : currentTokens.keySet()) {
      addTokenForOwnerStats(id);
    }
  }

  protected DelegationTokenSecretManagerMetrics getMetrics() {
    return METRICS;
  }

  
  @Metrics(about="Delegation token secret manager metrics", context="token")
  static class DelegationTokenSecretManagerMetrics implements DurationTrackerFactory {
    private static final Logger LOG = LoggerFactory.getLogger(
        DelegationTokenSecretManagerMetrics.class);

    final static String STORE_TOKEN_STAT = "storeToken";
    final static String UPDATE_TOKEN_STAT = "updateToken";
    final static String REMOVE_TOKEN_STAT = "removeToken";
    final static String TOKEN_FAILURE_STAT = "tokenFailure";

    private final MetricsRegistry registry;
    private final IOStatisticsStore ioStatistics;

    @Metric("Rate of storage of delegation tokens and latency (milliseconds)")
    private MutableRate storeToken;
    @Metric("Rate of update of delegation tokens and latency (milliseconds)")
    private MutableRate updateToken;
    @Metric("Rate of removal of delegation tokens and latency (milliseconds)")
    private MutableRate removeToken;
    @Metric("Counter of delegation tokens operation failures")
    private MutableCounterLong tokenFailure;

    static DelegationTokenSecretManagerMetrics create() {
      return DefaultMetricsSystem.instance().register(new DelegationTokenSecretManagerMetrics());
    }

    DelegationTokenSecretManagerMetrics() {
      ioStatistics = IOStatisticsBinding.iostatisticsStore()
          .withDurationTracking(STORE_TOKEN_STAT, UPDATE_TOKEN_STAT, REMOVE_TOKEN_STAT)
          .withCounters(TOKEN_FAILURE_STAT)
          .build();
      registry = new MetricsRegistry("DelegationTokenSecretManagerMetrics");
      LOG.debug("Initialized {}", registry);
    }

    public void trackStoreToken(InvocationRaisingIOE invocation) throws IOException {
      trackInvocation(invocation, STORE_TOKEN_STAT, storeToken);
    }

    public void trackUpdateToken(InvocationRaisingIOE invocation) throws IOException {
      trackInvocation(invocation, UPDATE_TOKEN_STAT, updateToken);
    }

    public void trackRemoveToken(InvocationRaisingIOE invocation) throws IOException {
      trackInvocation(invocation, REMOVE_TOKEN_STAT, removeToken);
    }

    public void trackInvocation(InvocationRaisingIOE invocation, String statistic,
        MutableRate metric) throws IOException {
      try {
        long start = Time.monotonicNow();
        IOStatisticsBinding.trackDurationOfInvocation(this, statistic, invocation);
        metric.add(Time.monotonicNow() - start);
      } catch (Exception ex) {
        tokenFailure.incr();
        throw ex;
      }
    }

    @Override
    public DurationTracker trackDuration(String key, long count) {
      return ioStatistics.trackDuration(key, count);
    }

    protected MutableRate getStoreToken() {
      return storeToken;
    }

    protected MutableRate getUpdateToken() {
      return updateToken;
    }

    protected MutableRate getRemoveToken() {
      return removeToken;
    }

    protected MutableCounterLong getTokenFailure() {
      return tokenFailure;
    }

    protected IOStatisticsStore getIoStatistics() {
      return ioStatistics;
    }
  }
}
