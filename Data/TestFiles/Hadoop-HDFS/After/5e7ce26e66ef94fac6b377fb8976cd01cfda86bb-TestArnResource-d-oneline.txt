public class TestArnResource extends HadoopTestBase {  private final static Logger LOG = LoggerFactory.getLogger(TestArnResource.class);  private final static String MOCK_ACCOUNT = "123456789101";  @Test  public void parseAccessPointFromArn() throws IllegalArgumentException {    describe("Parse AccessPoint ArnResource from arn string");    String accessPoint = "testAp";    String[][] regionPartitionEndpoints = new String[][] {        {Regions.EU_WEST_1.getName(), "aws"},        {Regions.US_GOV_EAST_1.getName(), "aws-us-gov"},        {Regions.CN_NORTH_1.getName(), "aws-cn"},    };    for (String[] testPair : regionPartitionEndpoints) {      String region = testPair[0];      String partition = testPair[1];      ArnResource resource = getArnResourceFrom(partition, region, MOCK_ACCOUNT, accessPoint);      assertEquals("Access Point name does not match", accessPoint, resource.getName());      assertEquals("Account Id does not match", MOCK_ACCOUNT, resource.getOwnerAccountId());      assertEquals("Region does not match", region, resource.getRegion());    }  }  @Test  public void makeSureEndpointHasTheCorrectFormat() {            ArnResource accessPoint = getArnResourceFrom("aws", "eu-west-1", MOCK_ACCOUNT,        "test");    String expected = "s3-accesspoint.eu-west-1.amazonaws.com";    Assertions.assertThat(accessPoint.getEndpoint())        .describedAs("Endpoint has invalid format. Access Point requests will not work")        .isEqualTo(expected);  }  @Test  public void invalidARNsMustThrow() throws Exception {    describe("Using an invalid ARN format must throw when initializing an ArnResource.");    intercept(IllegalArgumentException.class, () ->        ArnResource.accessPointFromArn("invalid:arn:resource"));  }    private ArnResource getArnResourceFrom(String partition, String region, String accountId,      String resourceName) {        String arn = String.format("arn:%s:s3:%s:%s:accesspoint/%s", partition, region, accountId,        resourceName);    return ArnResource.accessPointFromArn(arn);  }  private void describe(String message) {    LOG.info(message);  }}