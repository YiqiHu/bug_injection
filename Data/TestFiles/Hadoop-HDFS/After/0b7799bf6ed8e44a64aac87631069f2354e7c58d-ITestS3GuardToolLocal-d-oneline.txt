public class ITestS3GuardToolLocal extends AbstractS3GuardToolTestBase {  private static final String LOCAL_METADATA = "local://metadata";  private static final String[] ABORT_FORCE_OPTIONS = new String[] {"-abort",      "-force", "-verbose"};  @Override  protected Configuration createConfiguration() {    Configuration conf = super.createConfiguration();    removeBaseAndBucketOverrides(conf,        S3_METADATA_STORE_IMPL, S3A_BUCKET_PROBE);    conf.set(S3_METADATA_STORE_IMPL, S3GUARD_METASTORE_LOCAL);    conf.setInt(S3A_BUCKET_PROBE, S3A_BUCKET_PROBE_DEFAULT);    return conf;  }  @Override  public void setup() throws Exception {    super.setup();    assertTrue("metadata store impl should be LocalMetadataStore.",        getMetadataStore() instanceof LocalMetadataStore);  }  @Test  public void testImportCommand() throws Exception {    S3AFileSystem fs = getFileSystem();    MetadataStore ms = getMetadataStore();    Path parent = path("test-import");    fs.mkdirs(parent);    Path dir = new Path(parent, "a");    fs.mkdirs(dir);    Path emptyDir = new Path(parent, "emptyDir");    fs.mkdirs(emptyDir);    for (int i = 0; i < 10; i++) {      String child = String.format("file-%d", i);      try (FSDataOutputStream out = fs.create(new Path(dir, child))) {        out.write(1);      }    }    S3GuardTool.Import cmd = toClose(new S3GuardTool.Import(fs.getConf()));    try {      cmd.setStore(ms);      exec(cmd, "import", parent.toString());    } finally {      cmd.setStore(new NullMetadataStore());    }    DirListingMetadata children =        ms.listChildren(dir);    assertEquals("Unexpected number of paths imported", 10, children        .getListing().size());    assertEquals("Expected 2 items: empty directory and a parent directory", 2,        ms.listChildren(parent).getListing().size());  }  @Test  public void testImportCommandRepairsETagAndVersionId() throws Exception {    S3AFileSystem fs = getFileSystem();    MetadataStore ms = getMetadataStore();    Path path = path("test-version-metadata");    try (FSDataOutputStream out = fs.create(path)) {      out.write(1);    }    S3AFileStatus originalStatus = (S3AFileStatus) fs.getFileStatus(path);        S3AFileStatus bogusStatus = S3AFileStatus.fromFileStatus(originalStatus,        Tristate.FALSE, "bogusETag", "bogusVersionId");    ms.put(new PathMetadata(bogusStatus));        S3AFileStatus retrievedBogusStatus = (S3AFileStatus) fs.getFileStatus(path);    assertEquals("bogus ETag was not persisted",        "bogusETag", retrievedBogusStatus.getETag());    assertEquals("bogus versionId was not persisted",        "bogusVersionId", retrievedBogusStatus.getVersionId());        S3GuardTool.Import cmd = toClose(new S3GuardTool.Import(fs.getConf()));    cmd.setStore(ms);    try {      exec(cmd, "import", path.toString());    } finally {      cmd.setStore(new NullMetadataStore());    }        S3AFileStatus updatedStatus = (S3AFileStatus) fs.getFileStatus(path);    assertEquals("ETag was not corrected",        originalStatus.getETag(), updatedStatus.getETag());    assertEquals("VersionId was not corrected",        originalStatus.getVersionId(), updatedStatus.getVersionId());  }  @Test  public void testDestroyBucketExistsButNoTable() throws Throwable {    run(Destroy.NAME,        "-meta", LOCAL_METADATA,        getLandsatCSVFile(getConfiguration()));  }  @Test  public void testImportNoFilesystem() throws Throwable {    final Import importer = toClose(new S3GuardTool.Import(getConfiguration()));    importer.setStore(getMetadataStore());    try {      intercept(IOException.class,          () -> importer.run(              new String[]{                  "import",                  "-meta", LOCAL_METADATA,                  S3A_THIS_BUCKET_DOES_NOT_EXIST              }));    } finally {      importer.setStore(new NullMetadataStore());    }  }  @Test  public void testInfoBucketAndRegionNoFS() throws Throwable {    intercept(UnknownStoreException.class,        () -> run(BucketInfo.NAME, "-meta",            LOCAL_METADATA, "-region",            "any-region", S3A_THIS_BUCKET_DOES_NOT_EXIST));  }  @Test  public void testInit() throws Throwable {    run(Init.NAME,        "-meta", LOCAL_METADATA,        "-region", "us-west-1");  }  @Test  public void testInitTwice() throws Throwable {    run(Init.NAME,        "-meta", LOCAL_METADATA,        "-region", "us-west-1");    run(Init.NAME,        "-meta", LOCAL_METADATA,        "-region", "us-west-1");  }  @Test  public void testLandsatBucketUnguarded() throws Throwable {    run(BucketInfo.NAME,        "-" + BucketInfo.UNGUARDED_FLAG,        getLandsatCSVFile(getConfiguration()));  }  @Test  public void testLandsatBucketRequireGuarded() throws Throwable {    runToFailure(E_BAD_STATE,        BucketInfo.NAME,        "-" + BucketInfo.GUARDED_FLAG,        getLandsatCSVFile(            ITestS3GuardToolLocal.this.getConfiguration()));  }  @Test  public void testLandsatBucketRequireUnencrypted() throws Throwable {    run(BucketInfo.NAME,        "-" + BucketInfo.ENCRYPTION_FLAG, "none",        getLandsatCSVFile(getConfiguration()));  }  @Test  public void testLandsatBucketRequireEncrypted() throws Throwable {    runToFailure(E_BAD_STATE,        BucketInfo.NAME,        "-" + BucketInfo.ENCRYPTION_FLAG,        "AES256", getLandsatCSVFile(            ITestS3GuardToolLocal.this.getConfiguration()));  }  @Test  public void testStoreInfo() throws Throwable {    S3GuardTool.BucketInfo cmd =        toClose(new S3GuardTool.BucketInfo(getFileSystem().getConf()));    cmd.setStore(getMetadataStore());    try {      String output = exec(cmd, cmd.getName(),          "-" + BucketInfo.GUARDED_FLAG,          getFileSystem().getUri().toString());      LOG.info("Exec output=\n{}", output);    } finally {      cmd.setStore(new NullMetadataStore());    }  }  @Test  public void testSetCapacity() throws Throwable {    S3GuardTool cmd = toClose(        new S3GuardTool.SetCapacity(getFileSystem().getConf()));    cmd.setStore(getMetadataStore());    try {      String output = exec(cmd, cmd.getName(),          "-" + READ_FLAG, "100",          "-" + WRITE_FLAG, "100",          getFileSystem().getUri().toString());      LOG.info("Exec output=\n{}", output);    } finally {      cmd.setStore(new NullMetadataStore());    }  }  private final static String UPLOAD_PREFIX = "test-upload-prefix";  private final static String UPLOAD_NAME = "test-upload";  @Test  public void testUploads() throws Throwable {    S3AFileSystem fs = getFileSystem();    Path path = path(UPLOAD_PREFIX + "/" + UPLOAD_NAME);    describe("Cleaning up any leftover uploads from previous runs.");        clearAnyUploads(fs, path);        assertNoUploadsAt(fs, path.getParent());        describe("Confirming CLI lists nothing.");    assertNumUploads(path, 0);        describe("Uploading single part.");    createPartUpload(fs, fs.pathToKey(path), 128, 1);    try {            LambdaTestUtils.eventually(5000,           1000,           () -> {            assertEquals("Should be one upload", 1, countUploadsAt(fs, path));          });            describe("Confirming CLI lists one part");      LambdaTestUtils.eventually(5000, 1000,          () -> { assertNumUploads(path, 1); });      LambdaTestUtils.eventually(5000, 1000,          () -> { assertNumUploads(path.getParent(), 1); });            describe("Deleting part via CLI");      assertNumDeleted(fs, path, 1);            describe("Confirming deletion via API");      assertEquals("Should be no uploads", 0, countUploadsAt(fs, path));            describe("Confirming CLI lists nothing.");      assertNumUploads(path, 0);    } catch (Throwable t) {            clearAnyUploads(fs, path);      throw t;    }  }  @Test  public void testUploadListByAge() throws Throwable {    S3AFileSystem fs = getFileSystem();    Path path = path(UPLOAD_PREFIX + "/" + UPLOAD_NAME);    describe("Cleaning up any leftover uploads from previous runs.");        clearAnyUploads(fs, path);        describe("Uploading single part.");    createPartUpload(fs, fs.pathToKey(path), 128, 1);    try {                  LambdaTestUtils.eventually(5000, 1000,          () -> {            assertEquals("Should be one upload", 1, countUploadsAt(fs, path));          });            describe("Confirming CLI older age doesn't list");      assertNumUploadsAge(path, 0, 600);            describe("Confirming CLI older age doesn't delete");      uploadCommandAssertCount(fs, ABORT_FORCE_OPTIONS, path, 0,          600);                  describe("Sleeping 1 second then confirming upload still there");      Thread.sleep(1000);      LambdaTestUtils.eventually(5000, 1000,          () -> { assertNumUploadsAge(path, 1, 1); });            describe("Doing aged deletion");      uploadCommandAssertCount(fs, ABORT_FORCE_OPTIONS, path, 1, 1);      describe("Confirming age deletion happened");      assertEquals("Should be no uploads", 0, countUploadsAt(fs, path));    } catch (Throwable t) {            clearAnyUploads(fs, path);      throw t;    }  }  @Test  public void testUploadNegativeExpect() throws Throwable {    runToFailure(E_BAD_STATE, Uploads.NAME, "-expect", "1",        path("/we/are/almost/postive/this/doesnt/exist/fhfsadfoijew")            .toString());  }  private void assertNumUploads(Path path, int numUploads) throws Exception {    assertNumUploadsAge(path, numUploads, 0);  }  private void assertNumUploadsAge(Path path, int numUploads, int ageSeconds)      throws Exception {    if (ageSeconds > 0) {      run(Uploads.NAME, "-expect", String.valueOf(numUploads), "-seconds",          String.valueOf(ageSeconds), path.toString());    } else {      run(Uploads.NAME, "-expect", String.valueOf(numUploads), path.toString());    }  }  private void assertNumDeleted(S3AFileSystem fs, Path path, int numDeleted)      throws Exception {    uploadCommandAssertCount(fs, ABORT_FORCE_OPTIONS, path,        numDeleted, 0);  }    private void uploadCommandAssertCount(S3AFileSystem fs, String options[],      Path path, int numUploads, int ageSeconds)      throws Exception {    List<String> allOptions = new ArrayList<>();    List<String> output = new ArrayList<>();    S3GuardTool.Uploads cmd = new S3GuardTool.Uploads(fs.getConf());    ByteArrayOutputStream buf = new ByteArrayOutputStream();    allOptions.add(cmd.getName());    allOptions.addAll(Arrays.asList(options));    if (ageSeconds > 0) {      allOptions.add("-" + Uploads.SECONDS_FLAG);      allOptions.add(String.valueOf(ageSeconds));    }    allOptions.add(path.toString());    exec(0, "", cmd, buf, allOptions.toArray(new String[0]));    try (BufferedReader reader = new BufferedReader(        new InputStreamReader(new ByteArrayInputStream(buf.toByteArray())))) {      String line;      while ((line = reader.readLine()) != null) {        String[] fields = line.split("\\s");        if (fields.length == 4 && fields[0].equals(Uploads.TOTAL)) {          int parsedUploads = Integer.parseInt(fields[1]);          LOG.debug("Matched CLI output: {} {} {} {}",              fields[0], fields[1], fields[2], fields[3]);          assertEquals("Unexpected number of uploads", numUploads,              parsedUploads);          return;        }        LOG.debug("Not matched: {}", line);        output.add(line);      }    }    fail("Command output did not match: \n" + StringUtils.join("\n", output));  }}