public final class IOStatisticsContextIntegration {  private static final Logger LOG =      LoggerFactory.getLogger(IOStatisticsContextIntegration.class);    private static boolean isThreadIOStatsEnabled;    public static final AtomicLong INSTANCE_ID = new AtomicLong(1);    private static final WeakReferenceThreadMap<IOStatisticsContext>      ACTIVE_IOSTATS_CONTEXT =      new WeakReferenceThreadMap<>(          IOStatisticsContextIntegration::createNewInstance,          IOStatisticsContextIntegration::referenceLostContext      );  static {        final Configuration configuration = new Configuration();    isThreadIOStatsEnabled =        configuration.getBoolean(IOSTATISTICS_THREAD_LEVEL_ENABLED,            IOSTATISTICS_THREAD_LEVEL_ENABLED_DEFAULT);  }    public static boolean isIOStatisticsThreadLevelEnabled() {    return isThreadIOStatsEnabled;  }    private IOStatisticsContextIntegration() {}    private static IOStatisticsContext createNewInstance(Long key) {    IOStatisticsContextImpl instance =        new IOStatisticsContextImpl(key, INSTANCE_ID.getAndIncrement());    LOG.debug("Created instance {}", instance);    return instance;  }    private static void referenceLostContext(Long key) {    LOG.debug("Reference lost for threadID for the context: {}", key);  }    public static IOStatisticsContext getCurrentIOStatisticsContext() {    return isThreadIOStatsEnabled        ? ACTIVE_IOSTATS_CONTEXT.getForCurrentThread()        : EmptyIOStatisticsContextImpl.getInstance();  }    public static void setThreadIOStatisticsContext(      IOStatisticsContext statisticsContext) {    if (isThreadIOStatsEnabled) {      if (statisticsContext == null) {                ACTIVE_IOSTATS_CONTEXT.removeForCurrentThread();      } else {                        ACTIVE_IOSTATS_CONTEXT.setForCurrentThread(statisticsContext);      }    }  }    @VisibleForTesting  public static IOStatisticsContext getThreadSpecificIOStatisticsContext(long testThreadId) {    LOG.debug("IOStatsContext thread ID required: {}", testThreadId);    if (!isThreadIOStatsEnabled) {      return null;    }            WeakReference<IOStatisticsContext> ioStatisticsSnapshotWeakReference =        ACTIVE_IOSTATS_CONTEXT.lookup(testThreadId);    if (ioStatisticsSnapshotWeakReference != null) {      return ioStatisticsSnapshotWeakReference.get();    }    return null;  }    @VisibleForTesting  public static void enableIOStatisticsContext() {    if (!isThreadIOStatsEnabled) {      LOG.info("Enabling Thread IOStatistics..");      isThreadIOStatsEnabled = true;    }  }}