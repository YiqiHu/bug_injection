public class ITestS3ARequesterPays extends AbstractS3ATestBase {  @Override  protected Configuration createConfiguration() {    Configuration conf = super.createConfiguration();    S3ATestUtils.removeBaseAndBucketOverrides(conf,        ALLOW_REQUESTER_PAYS,        ENDPOINT,        S3A_BUCKET_PROBE);    return conf;  }  @Test  public void testRequesterPaysOptionSuccess() throws Throwable {    describe("Test requester pays enabled case by reading last then first byte");    Configuration conf = this.createConfiguration();    conf.setBoolean(ALLOW_REQUESTER_PAYS, true);        conf.setInt(S3A_BUCKET_PROBE, 2);    Path requesterPaysPath = getRequesterPaysPath(conf);    try (        FileSystem fs = requesterPaysPath.getFileSystem(conf);        FSDataInputStream inputStream = fs.open(requesterPaysPath);    ) {      long fileLength = fs.getFileStatus(requesterPaysPath).getLen();      inputStream.seek(fileLength - 1);      inputStream.readByte();            inputStream.seek(0);      inputStream.readByte();            IOStatisticAssertions          .assertThatStatisticCounter(inputStream.getIOStatistics(),              StreamStatisticNames.STREAM_READ_OPENED)          .isGreaterThan(1);            fs.listFiles(requesterPaysPath.getParent(), false);    }  }  @Test  public void testRequesterPaysDisabledFails() throws Throwable {    describe("Verify expected failure for requester pays buckets when client has it disabled");    Configuration conf = this.createConfiguration();    conf.setBoolean(ALLOW_REQUESTER_PAYS, false);    Path requesterPaysPath = getRequesterPaysPath(conf);    try (FileSystem fs = requesterPaysPath.getFileSystem(conf)) {      intercept(          AccessDeniedException.class,          "403 Forbidden",          "Expected requester pays bucket to fail without header set",          () -> fs.open(requesterPaysPath).close()      );    }  }  private Path getRequesterPaysPath(Configuration conf) {    String requesterPaysFile =        conf.getTrimmed(KEY_REQUESTER_PAYS_FILE, DEFAULT_REQUESTER_PAYS_FILE);    S3ATestUtils.assume(        "Empty test property: " + KEY_REQUESTER_PAYS_FILE,        !requesterPaysFile.isEmpty()    );    return new Path(requesterPaysFile);  }}