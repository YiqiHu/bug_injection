
package org.apache.hadoop.yarn.server.timelineservice.storage;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.HBaseTestingUtility;
import org.apache.hadoop.service.Service;
import org.apache.hadoop.test.GenericTestUtils;
import org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity;
import org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntityType;
import org.apache.hadoop.yarn.conf.YarnConfiguration;
import org.apache.hadoop.yarn.server.timelineservice.reader.TimelineReaderContext;
import org.apache.hadoop.yarn.server.timelineservice.reader.TimelineReaderServer;
import org.junit.Assert;
import org.junit.Test;

import java.io.IOException;
import java.util.Set;
import java.util.concurrent.TimeoutException;

import static org.apache.hadoop.yarn.conf.YarnConfiguration.TIMELINE_SERVICE_READER_STORAGE_MONITOR_INTERVAL_MS;
import static org.apache.hadoop.yarn.server.timelineservice.storage.HBaseStorageMonitor.DATA_TO_RETRIEVE;
import static org.apache.hadoop.yarn.server.timelineservice.storage.HBaseStorageMonitor.MONITOR_FILTERS;

public class TestTimelineReaderHBaseDown {

  @Test(timeout=300000)
  public void testTimelineReaderHBaseUp() throws Exception {
    HBaseTestingUtility util = new HBaseTestingUtility();
    configure(util);
    try {
      util.startMiniCluster();
      DataGeneratorForTest.createSchema(util.getConfiguration());
      DataGeneratorForTest.loadApps(util, System.currentTimeMillis());

      TimelineReaderServer server = getTimelineReaderServer();
      server.init(util.getConfiguration());
      HBaseTimelineReaderImpl htr = getHBaseTimelineReaderImpl(server);
      server.start();
      checkQuery(htr);
    } finally {
      util.shutdownMiniCluster();
    }
  }

  @Test(timeout=300000)
  public void testTimelineReaderInitWhenHBaseIsDown() throws
      TimeoutException, InterruptedException {
    HBaseTestingUtility util = new HBaseTestingUtility();
    configure(util);
    TimelineReaderServer server = getTimelineReaderServer();

    
    server.init(util.getConfiguration());
    HBaseTimelineReaderImpl htr = getHBaseTimelineReaderImpl(server);
    server.start();
    waitForHBaseDown(htr);
  }

  @Test(timeout=300000)
  public void testTimelineReaderDetectsHBaseDown() throws Exception {
    HBaseTestingUtility util = new HBaseTestingUtility();
    configure(util);

    try {
      
      util.startMiniCluster();
      DataGeneratorForTest.createSchema(util.getConfiguration());
      DataGeneratorForTest.loadApps(util, System.currentTimeMillis());

      
      TimelineReaderServer server = getTimelineReaderServer();
      server.init(util.getConfiguration());
      HBaseTimelineReaderImpl htr = getHBaseTimelineReaderImpl(server);

      
      util.shutdownMiniHBaseCluster();

      
      server.start();
      waitForHBaseDown(htr);
    } finally {
      util.shutdownMiniCluster();
    }
  }

  @Test(timeout=300000)
  public void testTimelineReaderDetectsZooKeeperDown() throws Exception {
    HBaseTestingUtility util = new HBaseTestingUtility();
    configure(util);

    try {
      
      util.startMiniCluster();
      DataGeneratorForTest.createSchema(util.getConfiguration());
      DataGeneratorForTest.loadApps(util, System.currentTimeMillis());

      
      TimelineReaderServer server = getTimelineReaderServer();
      server.init(util.getConfiguration());
      HBaseTimelineReaderImpl htr = getHBaseTimelineReaderImpl(server);

      
      util.shutdownMiniCluster();

      
      server.start();
      waitForHBaseDown(htr);
    } finally {
      util.shutdownMiniCluster();
    }
  }

  @Test(timeout=300000)
  public void testTimelineReaderRecoversAfterHBaseReturns() throws Exception {
    HBaseTestingUtility util = new HBaseTestingUtility();
    configure(util);

    try {
      
      util.startMiniCluster();
      DataGeneratorForTest.createSchema(util.getConfiguration());
      DataGeneratorForTest.loadApps(util, System.currentTimeMillis());

      
      TimelineReaderServer server = getTimelineReaderServer();
      server.init(util.getConfiguration());
      HBaseTimelineReaderImpl htr = getHBaseTimelineReaderImpl(server);

      
      util.shutdownMiniHBaseCluster();

      
      server.start();
      waitForHBaseDown(htr);

      util.startMiniHBaseCluster(1, 1);
      GenericTestUtils.waitFor(() -> {
        try {
          htr.getTimelineStorageMonitor().checkStorageIsUp();
          return true;
        } catch (IOException e) {
          return false;
        }
      }, 1000, 150000);
    } finally {
      util.shutdownMiniCluster();
    }
  }

  private static void waitForHBaseDown(HBaseTimelineReaderImpl htr) throws
      TimeoutException, InterruptedException {
    try {
      GenericTestUtils.waitFor(() -> {
        try {
          htr.getTimelineStorageMonitor().checkStorageIsUp();
          return false;
        } catch (IOException e) {
          return true;
        }
      }, 1000, 150000);
      checkQuery(htr);
      Assert.fail("Query should fail when HBase is down");
    } catch (IOException e) {
      Assert.assertEquals("HBase is down", e.getMessage());
    }
  }

  private static Set<TimelineEntity> checkQuery(HBaseTimelineReaderImpl htr)
      throws IOException {
    TimelineReaderContext context =
        new TimelineReaderContext(YarnConfiguration.DEFAULT_RM_CLUSTER_ID,
            null, null, null, null, TimelineEntityType
            .YARN_FLOW_ACTIVITY.toString(), null, null);
    return htr.getEntities(context, MONITOR_FILTERS, DATA_TO_RETRIEVE);
  }

  private static void configure(HBaseTestingUtility util) {
    Configuration config = util.getConfiguration();
    config.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, true);
    config.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION, 2.0f);
    config.set(YarnConfiguration.TIMELINE_SERVICE_READER_WEBAPP_ADDRESS,
        "localhost:0");
    config.set(YarnConfiguration.RM_CLUSTER_ID, "cluster1");
    config.set(YarnConfiguration.TIMELINE_SERVICE_READER_CLASS,
        "org.apache.hadoop.yarn.server.timelineservice.storage."
            + "HBaseTimelineReaderImpl");
    config.setInt("hfile.format.version", 3);
    config.setLong(TIMELINE_SERVICE_READER_STORAGE_MONITOR_INTERVAL_MS, 5000);
  }

  private static TimelineReaderServer getTimelineReaderServer() {
    return new TimelineReaderServer() {
      @Override
      protected void addFilters(Configuration conf) {
        
        
        
        
        
        
        
        
        
      }
    };
  }

  private static HBaseTimelineReaderImpl getHBaseTimelineReaderImpl(
      TimelineReaderServer server) {
    for (Service s: server.getServices()) {
      if (s instanceof HBaseTimelineReaderImpl) {
        return (HBaseTimelineReaderImpl) s;
      }
    }
    throw new IllegalStateException("Couldn't find HBaseTimelineReaderImpl");
  }
}
