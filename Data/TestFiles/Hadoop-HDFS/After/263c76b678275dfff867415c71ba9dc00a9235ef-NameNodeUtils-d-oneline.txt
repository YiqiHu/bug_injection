public final class NameNodeUtils {  public static final Logger LOG = LoggerFactory.getLogger(NameNodeUtils.class);    @VisibleForTesting  @Nullable  static String getClientNamenodeAddress(      Configuration conf, @Nullable String nsId) {    final Collection<String> nameservices =        DFSUtilClient.getNameServiceIds(conf);    final String nnAddr = conf.getTrimmed(FS_DEFAULT_NAME_KEY);    if (nnAddr == null) {            return null;    }    LOG.info("{} is {}", FS_DEFAULT_NAME_KEY, nnAddr);    final URI nnUri = URI.create(nnAddr);    String defaultNnHost = nnUri.getHost();    if (defaultNnHost == null) {      return null;    }        if (nsId != null && nameservices.contains(nsId)) {      final Collection<String> namenodes = conf.getTrimmedStringCollection(          DFS_HA_NAMENODES_KEY_PREFIX + "." + nsId);      if (namenodes.size() > 1) {        return nsId;      }    }            String currentNnAddress = null;    if (nsId != null) {      String hostNameKey = DFS_NAMENODE_RPC_ADDRESS_KEY + "." + nsId;      currentNnAddress = conf.get(hostNameKey);    }        if (currentNnAddress == null) {      currentNnAddress = nnUri.getAuthority();    }    int port = 0;    if (currentNnAddress.contains(":")) {      port = Integer.parseInt(currentNnAddress.split(":")[1]);    }    if (port > 0) {       return currentNnAddress;    } else {            return null;    }  }  private NameNodeUtils() {      }}