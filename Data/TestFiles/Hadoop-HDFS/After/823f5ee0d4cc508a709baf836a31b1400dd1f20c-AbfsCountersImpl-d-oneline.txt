public class AbfsCountersImpl implements AbfsCounters {    private static final String CONTEXT = "AbfsContext";    private static final String REGISTRY_ID = "AbfsID";    private static final String METRIC_BUCKET = "AbfsBucket";  private final MetricsRegistry registry =      new MetricsRegistry("abfsMetrics").setContext(CONTEXT);  private final IOStatisticsStore ioStatisticsStore;  private static final AbfsStatistic[] STATISTIC_LIST = {      CALL_CREATE,      CALL_OPEN,      CALL_GET_FILE_STATUS,      CALL_APPEND,      CALL_CREATE_NON_RECURSIVE,      CALL_DELETE,      CALL_EXIST,      CALL_GET_DELEGATION_TOKEN,      CALL_LIST_STATUS,      CALL_MKDIRS,      CALL_RENAME,      DIRECTORIES_CREATED,      DIRECTORIES_DELETED,      FILES_CREATED,      FILES_DELETED,      ERROR_IGNORED,      CONNECTIONS_MADE,      SEND_REQUESTS,      GET_RESPONSES,      BYTES_SENT,      BYTES_RECEIVED,      READ_THROTTLES,      WRITE_THROTTLES,      SERVER_UNAVAILABLE,      RENAME_RECOVERY,      METADATA_INCOMPLETE_RENAME_FAILURES,      RENAME_PATH_ATTEMPTS  };  private static final AbfsStatistic[] DURATION_TRACKER_LIST = {      HTTP_HEAD_REQUEST,      HTTP_GET_REQUEST,      HTTP_DELETE_REQUEST,      HTTP_PUT_REQUEST,      HTTP_PATCH_REQUEST,      HTTP_POST_REQUEST  };  public AbfsCountersImpl(URI uri) {    UUID fileSystemInstanceId = UUID.randomUUID();    registry.tag(REGISTRY_ID,        "A unique identifier for the instance",        fileSystemInstanceId.toString());    registry.tag(METRIC_BUCKET, "Hostname from the FS URL", uri.getHost());    IOStatisticsStoreBuilder ioStatisticsStoreBuilder = iostatisticsStore();        for (AbfsStatistic stats : STATISTIC_LIST) {      ioStatisticsStoreBuilder.withCounters(stats.getStatName());      createCounter(stats);    }        for (AbfsStatistic durationStats : DURATION_TRACKER_LIST) {      ioStatisticsStoreBuilder.withDurationTracking(durationStats.getStatName());    }    ioStatisticsStore = ioStatisticsStoreBuilder.build();  }    private MutableMetric lookupMetric(String name) {    return getRegistry().get(name);  }    private MutableCounterLong lookupCounter(String name) {    MutableMetric metric = lookupMetric(name);    if (metric == null) {      return null;    }    if (!(metric instanceof MutableCounterLong)) {      throw new IllegalStateException("Metric " + name          + " is not a MutableCounterLong: " + metric);    }    return (MutableCounterLong) metric;  }    private MutableCounterLong createCounter(AbfsStatistic stats) {    return registry.newCounter(stats.getStatName(),        stats.getStatDescription(), 0L);  }    @Override  public void incrementCounter(AbfsStatistic statistic, long value) {    ioStatisticsStore.incrementCounter(statistic.getStatName(), value);    MutableCounterLong counter = lookupCounter(statistic.getStatName());    if (counter != null) {      counter.incr(value);    }  }    private MetricsRegistry getRegistry() {    return registry;  }    @Override  public String formString(String prefix, String separator, String suffix,      boolean all) {    MetricStringBuilder metricStringBuilder = new MetricStringBuilder(null,        prefix, separator, suffix);    registry.snapshot(metricStringBuilder, all);    return metricStringBuilder.toString();  }    @VisibleForTesting  @Override  public Map<String, Long> toMap() {    return ioStatisticsStore.counters();  }    @Override  public IOStatistics getIOStatistics() {    return ioStatisticsStore;  }    @Override  public DurationTracker trackDuration(String key) {    return ioStatisticsStore.trackDuration(key);  }}