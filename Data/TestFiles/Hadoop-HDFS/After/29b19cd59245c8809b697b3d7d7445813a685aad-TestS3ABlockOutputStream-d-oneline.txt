public class TestS3ABlockOutputStream extends AbstractS3AMockTest {  private S3ABlockOutputStream stream;  @Before  public void setUp() throws Exception {    ExecutorService executorService = mock(ExecutorService.class);    Progressable progressable = mock(Progressable.class);    S3ADataBlocks.BlockFactory blockFactory =        mock(S3ADataBlocks.BlockFactory.class);    long blockSize = Constants.DEFAULT_MULTIPART_SIZE;    S3AInstrumentation.OutputStreamStatistics statistics = null;    WriteOperationHelper oHelper = mock(WriteOperationHelper.class);    PutTracker putTracker = mock(PutTracker.class);    stream = spy(new S3ABlockOutputStream(fs, "", executorService,      progressable, blockSize, blockFactory, statistics, oHelper,      putTracker));  }  @Test  public void testFlushNoOpWhenStreamClosed() throws Exception {    doThrow(new IOException()).when(stream).checkOpen();    stream.flush();  }  @Test  public void testWriteOperationHelperPartLimits() throws Throwable {    S3AFileSystem s3a = mock(S3AFileSystem.class);    when(s3a.getBucket()).thenReturn("bucket");    WriteOperationHelper woh = new WriteOperationHelper(s3a,        new Configuration());    ByteArrayInputStream inputStream = new ByteArrayInputStream(        "a".getBytes());        String key = "destKey";    woh.newUploadPartRequest(key,        "uploadId", 1, 1024, inputStream, null, 0L);        intercept(PathIOException.class, key,        () -> woh.newUploadPartRequest(key,            "uploadId", 50000, 1024, inputStream, null, 0L));  }}