public abstract class DelegationTokenAuthenticator implements Authenticator {  private static Logger LOG =       LoggerFactory.getLogger(DelegationTokenAuthenticator.class);    private static final String CONTENT_TYPE = "Content-Type";  private static final String APPLICATION_JSON_MIME = "application/json";  private static final String HTTP_GET = "GET";  private static final String HTTP_PUT = "PUT";  public static final String OP_PARAM = "op";  private static final String OP_PARAM_EQUALS = OP_PARAM + "=";  public static final String DELEGATION_TOKEN_HEADER =      "X-Hadoop-Delegation-Token";  public static final String DELEGATION_PARAM = "delegation";  public static final String TOKEN_PARAM = "token";  public static final String RENEWER_PARAM = "renewer";  public static final String SERVICE_PARAM = "service";  public static final String DELEGATION_TOKEN_JSON = "Token";  public static final String DELEGATION_TOKEN_URL_STRING_JSON = "urlString";  public static final String RENEW_DELEGATION_TOKEN_JSON = "long";    @InterfaceAudience.Private  public enum DelegationTokenOperation {    GETDELEGATIONTOKEN(HTTP_GET, true),    RENEWDELEGATIONTOKEN(HTTP_PUT, true),    CANCELDELEGATIONTOKEN(HTTP_PUT, false);    private String httpMethod;    private boolean requiresKerberosCredentials;    private DelegationTokenOperation(String httpMethod,        boolean requiresKerberosCredentials) {      this.httpMethod = httpMethod;      this.requiresKerberosCredentials = requiresKerberosCredentials;    }    public String getHttpMethod() {      return httpMethod;    }    public boolean requiresKerberosCredentials() {      return requiresKerberosCredentials;    }  }  private Authenticator authenticator;  private ConnectionConfigurator connConfigurator;  public DelegationTokenAuthenticator(Authenticator authenticator) {    this.authenticator = authenticator;  }  @Override  public void setConnectionConfigurator(ConnectionConfigurator configurator) {    authenticator.setConnectionConfigurator(configurator);    connConfigurator = configurator;  }  private boolean hasDelegationToken(URL url, AuthenticatedURL.Token token) {    boolean hasDt = false;    if (token instanceof DelegationTokenAuthenticatedURL.Token) {      hasDt = ((DelegationTokenAuthenticatedURL.Token) token).          getDelegationToken() != null;      if (hasDt) {        LOG.trace("Delegation token found: {}",            ((DelegationTokenAuthenticatedURL.Token) token)                .getDelegationToken());      }    }    if (!hasDt) {      String queryStr = url.getQuery();      hasDt = (queryStr != null) && queryStr.contains(DELEGATION_PARAM + "=");      LOG.trace("hasDt={}, queryStr={}", hasDt, queryStr);    }    return hasDt;  }  @Override  public void authenticate(URL url, AuthenticatedURL.Token token)      throws IOException, AuthenticationException {    if (!hasDelegationToken(url, token)) {      try {                UserGroupInformation.getCurrentUser().checkTGTAndReloginFromKeytab();        LOG.debug("No delegation token found for url={}, "            + "authenticating with {}", url, authenticator.getClass());        authenticator.authenticate(url, token);      } catch (IOException ex) {        throw NetUtils.wrapException(url.getHost(), url.getPort(),            null, 0, ex);      }    } else {      LOG.debug("Authenticated from delegation token. url={}, token={}",          url, token);    }  }    public Token<AbstractDelegationTokenIdentifier> getDelegationToken(URL url,      AuthenticatedURL.Token token, String renewer)      throws IOException, AuthenticationException {   return getDelegationToken(url, token, renewer, null);  }    public Token<AbstractDelegationTokenIdentifier> getDelegationToken(URL url,      AuthenticatedURL.Token token, String renewer, String doAsUser)      throws IOException, AuthenticationException {    Map json = doDelegationTokenOperation(url, token,        DelegationTokenOperation.GETDELEGATIONTOKEN, renewer, null, true,        doAsUser);    json = (Map) json.get(DELEGATION_TOKEN_JSON);    String tokenStr = (String) json.get(DELEGATION_TOKEN_URL_STRING_JSON);    Token<AbstractDelegationTokenIdentifier> dToken =        new Token<AbstractDelegationTokenIdentifier>();    dToken.decodeFromUrlString(tokenStr);    InetSocketAddress service = new InetSocketAddress(url.getHost(),        url.getPort());    SecurityUtil.setTokenService(dToken, service);    return dToken;  }    public long renewDelegationToken(URL url,      AuthenticatedURL.Token token,      Token<AbstractDelegationTokenIdentifier> dToken)      throws IOException, AuthenticationException {    return renewDelegationToken(url, token, dToken, null);  }    public long renewDelegationToken(URL url,      AuthenticatedURL.Token token,      Token<AbstractDelegationTokenIdentifier> dToken, String doAsUser)      throws IOException, AuthenticationException {    Map json = doDelegationTokenOperation(url, token,        DelegationTokenOperation.RENEWDELEGATIONTOKEN, null, dToken, true,        doAsUser);    return (Long) json.get(RENEW_DELEGATION_TOKEN_JSON);  }    public void cancelDelegationToken(URL url,      AuthenticatedURL.Token token,      Token<AbstractDelegationTokenIdentifier> dToken)      throws IOException {    cancelDelegationToken(url, token, dToken, null);  }    public void cancelDelegationToken(URL url,      AuthenticatedURL.Token token,      Token<AbstractDelegationTokenIdentifier> dToken, String doAsUser)      throws IOException {    try {      doDelegationTokenOperation(url, token,          DelegationTokenOperation.CANCELDELEGATIONTOKEN, null, dToken, false,          doAsUser);    } catch (AuthenticationException ex) {      throw new IOException("This should not happen: " + ex.getMessage(), ex);    }  }  private Map doDelegationTokenOperation(URL url,      AuthenticatedURL.Token token, DelegationTokenOperation operation,      String renewer, Token<?> dToken, boolean hasResponse, String doAsUser)      throws IOException, AuthenticationException {    Map ret = null;    Map<String, String> params = new HashMap<String, String>();    params.put(OP_PARAM, operation.toString());    if (renewer != null) {      params.put(RENEWER_PARAM, renewer);    }    if (dToken != null) {      params.put(TOKEN_PARAM, dToken.encodeToUrlString());    }        if (doAsUser != null) {      params.put(DelegationTokenAuthenticatedURL.DO_AS, doAsUser);    }    String urlStr = url.toExternalForm();    StringBuilder sb = new StringBuilder(urlStr);    String separator = (urlStr.contains("?")) ? "&" : "?";    for (Map.Entry<String, String> entry : params.entrySet()) {      sb.append(separator).append(entry.getKey()).append("=").          append(URLEncoder.encode(entry.getValue(), "UTF8"));      separator = "&";    }    url = new URL(sb.toString());    AuthenticatedURL aUrl = new AuthenticatedURL(this, connConfigurator);    org.apache.hadoop.security.token.Token<AbstractDelegationTokenIdentifier>        dt = null;    if (token instanceof DelegationTokenAuthenticatedURL.Token        && operation.requiresKerberosCredentials()) {            dt = ((DelegationTokenAuthenticatedURL.Token) token).getDelegationToken();      ((DelegationTokenAuthenticatedURL.Token) token).setDelegationToken(null);    }    HttpURLConnection conn = null;    try {      conn = aUrl.openConnection(url, token);      conn.setRequestMethod(operation.getHttpMethod());      HttpExceptionUtils.validateResponse(conn, HttpURLConnection.HTTP_OK);      if (hasResponse) {        String contentType = conn.getHeaderField(CONTENT_TYPE);        contentType =            (contentType != null) ? StringUtils.toLowerCase(contentType) : null;        if (contentType != null &&            contentType.contains(APPLICATION_JSON_MIME)) {          try {            ret = JsonSerialization.mapReader().readValue(conn.getInputStream());          } catch (Exception ex) {            throw new AuthenticationException(String.format(                "'%s' did not handle the '%s' delegation token operation: %s",                url.getAuthority(), operation, ex.getMessage()), ex);          }        } else {          throw new AuthenticationException(String.format("'%s' did not " +                  "respond with JSON to the '%s' delegation token operation",              url.getAuthority(), operation));        }      }    } finally {      if (dt != null) {        ((DelegationTokenAuthenticatedURL.Token) token).setDelegationToken(dt);      }      if (conn != null) {        conn.disconnect();      }    }    return ret;  }}