public class ITestOutputStreamSemantics extends AbstractWasbTestBase {  private static final String PAGE_BLOB_DIR = "/pageblob";  private static final String BLOCK_BLOB_DIR = "/blockblob";  private static final String BLOCK_BLOB_COMPACTION_DIR = "/compaction";  private byte[] getRandomBytes() {    byte[] buffer = new byte[PageBlobFormatHelpers.PAGE_SIZE        - PageBlobFormatHelpers.PAGE_HEADER_SIZE];    Random rand = new Random();    rand.nextBytes(buffer);    return buffer;  }  private Path getBlobPathWithTestName(String parentDir) {    return new Path(parentDir + "/" + methodName.getMethodName());  }  private void validate(Path path, byte[] writeBuffer, boolean isEqual)      throws IOException {    String blobPath = path.toUri().getPath();    try (FSDataInputStream inputStream = fs.open(path)) {      byte[] readBuffer = new byte[PageBlobFormatHelpers.PAGE_SIZE          - PageBlobFormatHelpers.PAGE_HEADER_SIZE];      int numBytesRead = inputStream.read(readBuffer, 0, readBuffer.length);      if (isEqual) {        assertArrayEquals(            String.format("Bytes read do not match bytes written to %1$s",                blobPath),            writeBuffer,            readBuffer);      } else {        assertThat(            String.format("Bytes read unexpectedly match bytes written to %1$s",                blobPath),            readBuffer,            IsNot.not(IsEqual.equalTo(writeBuffer)));      }    }  }  private boolean isBlockBlobAppendStreamWrapper(FSDataOutputStream stream) {    return    ((SyncableDataOutputStream)        ((NativeAzureFileSystem.NativeAzureFsOutputStream)            stream.getWrappedStream())            .getOutStream())        .getOutStream()        instanceof  BlockBlobAppendStream;  }  private boolean isPageBlobStreamWrapper(FSDataOutputStream stream) {    return        ((SyncableDataOutputStream) stream.getWrappedStream())        .getOutStream()            instanceof  PageBlobOutputStream;  }  @Override  protected AzureBlobStorageTestAccount createTestAccount() throws Exception {    Configuration conf = new Configuration();        conf.set(AzureNativeFileSystemStore.KEY_PAGE_BLOB_DIRECTORIES, PAGE_BLOB_DIR);        conf.set(AzureNativeFileSystemStore.KEY_BLOCK_BLOB_WITH_COMPACTION_DIRECTORIES,        BLOCK_BLOB_COMPACTION_DIR);    return AzureBlobStorageTestAccount.create(        "",        EnumSet.of(AzureBlobStorageTestAccount.CreateOptions.CreateContainer),        conf);  }    @Test  public void testPageBlobFlush() throws IOException {    Path path = getBlobPathWithTestName(PAGE_BLOB_DIR);    try (FSDataOutputStream stream = fs.create(path)) {      byte[] buffer = getRandomBytes();      stream.write(buffer);      stream.flush();                  SyncableDataOutputStream syncStream =          (SyncableDataOutputStream) stream.getWrappedStream();      PageBlobOutputStream pageBlobStream =          (PageBlobOutputStream)syncStream.getOutStream();      pageBlobStream.waitForLastFlushCompletion();      validate(path, buffer, true);    }  }    @Test  public void testPageBlobHFlush() throws IOException {    Path path = getBlobPathWithTestName(PAGE_BLOB_DIR);    try (FSDataOutputStream stream = fs.create(path)) {      assertTrue(isPageBlobStreamWrapper(stream));      byte[] buffer = getRandomBytes();      stream.write(buffer);      stream.hflush();      validate(path, buffer, true);    }  }    @Test  public void testPageBlobHSync() throws IOException {    Path path = getBlobPathWithTestName(PAGE_BLOB_DIR);    try (FSDataOutputStream stream = fs.create(path)) {      assertTrue(isPageBlobStreamWrapper(stream));      byte[] buffer = getRandomBytes();      stream.write(buffer);      stream.hsync();      validate(path, buffer, true);    }  }    @Test  public void testPageBlobClose() throws IOException {    Path path = getBlobPathWithTestName(PAGE_BLOB_DIR);    try (FSDataOutputStream stream = fs.create(path)) {      assertTrue(isPageBlobStreamWrapper(stream));      byte[] buffer = getRandomBytes();      stream.write(buffer);      stream.close();      validate(path, buffer, true);    }  }    @Test  public void testPageBlobCapabilities() throws IOException {    Path path = getBlobPathWithTestName(PAGE_BLOB_DIR);    try (FSDataOutputStream stream = fs.create(path)) {      assertHasStreamCapabilities(stream,          StreamCapabilities.HFLUSH,          StreamCapabilities.HSYNC);      assertLacksStreamCapabilities(stream,          StreamCapabilities.DROPBEHIND,          StreamCapabilities.READAHEAD,          StreamCapabilities.UNBUFFER);      stream.write(getRandomBytes());    }  }    @Test  public void testBlockBlobFlush() throws Exception {    Path path = getBlobPathWithTestName(BLOCK_BLOB_DIR);    byte[] buffer = getRandomBytes();    try (FSDataOutputStream stream = fs.create(path)) {      for (int i = 0; i < 10; i++) {        stream.write(buffer);        stream.flush();      }    }    String blobPath = path.toUri().getPath();        CloudBlockBlob blob = testAccount.getBlobReference(blobPath.substring(1));        ArrayList<BlockEntry> blockList = blob.downloadBlockList(        BlockListingFilter.COMMITTED,        null,null, null);    assertEquals(1, blockList.size());  }    @Test  public void testBlockBlobHFlush() throws Exception {    Path path = getBlobPathWithTestName(BLOCK_BLOB_DIR);    byte[] buffer = getRandomBytes();    try (FSDataOutputStream stream = fs.create(path)) {      for (int i = 0; i < 10; i++) {        stream.write(buffer);        stream.hflush();      }    }    String blobPath = path.toUri().getPath();        CloudBlockBlob blob = testAccount.getBlobReference(blobPath.substring(1));        ArrayList<BlockEntry> blockList = blob.downloadBlockList(        BlockListingFilter.COMMITTED,        null,null, null);    assertEquals(1, blockList.size());  }    @Test  public void testBlockBlobHSync() throws Exception {    Path path = getBlobPathWithTestName(BLOCK_BLOB_DIR);    byte[] buffer = getRandomBytes();    try (FSDataOutputStream stream = fs.create(path)) {      for (int i = 0; i < 10; i++) {        stream.write(buffer);        stream.hsync();      }    }    String blobPath = path.toUri().getPath();        CloudBlockBlob blob = testAccount.getBlobReference(blobPath.substring(1));        ArrayList<BlockEntry> blockList = blob.downloadBlockList(        BlockListingFilter.COMMITTED,        null,null, null);    assertEquals(1, blockList.size());  }    @Test  public void testBlockBlobClose() throws IOException {    Path path = getBlobPathWithTestName(BLOCK_BLOB_DIR);    try (FSDataOutputStream stream = fs.create(path)) {      byte[] buffer = getRandomBytes();      stream.write(buffer);      stream.close();      validate(path, buffer, true);    }  }    @Test  public void testBlockBlobCapabilities() throws IOException {    Path path = getBlobPathWithTestName(BLOCK_BLOB_DIR);    try (FSDataOutputStream stream = fs.create(path)) {      assertLacksStreamCapabilities(stream,          StreamCapabilities.HFLUSH,          StreamCapabilities.HSYNC,          StreamCapabilities.DROPBEHIND,          StreamCapabilities.READAHEAD,          StreamCapabilities.UNBUFFER);      stream.write(getRandomBytes());    }  }    @Test  public void testBlockBlobCompactionFlush() throws Exception {    Path path = getBlobPathWithTestName(BLOCK_BLOB_COMPACTION_DIR);    byte[] buffer = getRandomBytes();    try (FSDataOutputStream stream = fs.create(path)) {      assertTrue(isBlockBlobAppendStreamWrapper(stream));      for (int i = 0; i < 10; i++) {        stream.write(buffer);        stream.flush();      }    }    String blobPath = path.toUri().getPath();        CloudBlockBlob blob = testAccount.getBlobReference(blobPath.substring(1));        ArrayList<BlockEntry> blockList = blob.downloadBlockList(        BlockListingFilter.COMMITTED,        null,null, null);    assertEquals(1, blockList.size());  }    @Test  public void testBlockBlobCompactionHFlush() throws Exception {    Path path = getBlobPathWithTestName(BLOCK_BLOB_COMPACTION_DIR);    byte[] buffer = getRandomBytes();    try (FSDataOutputStream stream = fs.create(path)) {      assertTrue(isBlockBlobAppendStreamWrapper(stream));      for (int i = 0; i < 10; i++) {        stream.write(buffer);        stream.hflush();      }    }    String blobPath = path.toUri().getPath();        CloudBlockBlob blob = testAccount.getBlobReference(blobPath.substring(1));        ArrayList<BlockEntry> blockList = blob.downloadBlockList(        BlockListingFilter.COMMITTED,        null,null, null);    assertEquals(10, blockList.size());  }    @Test  public void testBlockBlobCompactionHSync() throws Exception {    Path path = getBlobPathWithTestName(BLOCK_BLOB_COMPACTION_DIR);    byte[] buffer = getRandomBytes();    try (FSDataOutputStream stream = fs.create(path)) {      assertTrue(isBlockBlobAppendStreamWrapper(stream));      for (int i = 0; i < 10; i++) {        stream.write(buffer);        stream.hsync();      }    }    String blobPath = path.toUri().getPath();        CloudBlockBlob blob = testAccount.getBlobReference(blobPath.substring(1));        ArrayList<BlockEntry> blockList = blob.downloadBlockList(        BlockListingFilter.COMMITTED,        null,null, null);    assertEquals(10, blockList.size());  }    @Test  public void testBlockBlobCompactionClose() throws IOException {    Path path = getBlobPathWithTestName(BLOCK_BLOB_COMPACTION_DIR);    try (FSDataOutputStream stream = fs.create(path)) {      assertTrue(isBlockBlobAppendStreamWrapper(stream));      byte[] buffer = getRandomBytes();      stream.write(buffer);      stream.close();      validate(path, buffer, true);    }  }    @Test  public void testBlockBlobCompactionCapabilities() throws IOException {    Path path = getBlobPathWithTestName(BLOCK_BLOB_COMPACTION_DIR);    try (FSDataOutputStream stream = fs.create(path)) {      assertHasStreamCapabilities(stream,          StreamCapabilities.HFLUSH,          StreamCapabilities.HSYNC);      assertLacksStreamCapabilities(stream,          StreamCapabilities.DROPBEHIND,          StreamCapabilities.READAHEAD,          StreamCapabilities.UNBUFFER);      stream.write(getRandomBytes());    }  }    @Test  public void testPageBlobSmallWrite() throws IOException {    Path path = getBlobPathWithTestName(PAGE_BLOB_DIR);    try (FSDataOutputStream stream = fs.create(path)) {      assertTrue(isPageBlobStreamWrapper(stream));      byte[] buffer = getRandomBytes();      stream.write(buffer);      validate(path, buffer, false);    }  }    @Test  public void testBlockBlobSmallWrite() throws IOException {    Path path = getBlobPathWithTestName(BLOCK_BLOB_DIR);    try (FSDataOutputStream stream = fs.create(path)) {      byte[] buffer = getRandomBytes();      stream.write(buffer);      validate(path, buffer, false);    }  }      @Test  public void testBlockBlobCompactionSmallWrite() throws IOException {    Path path = getBlobPathWithTestName(BLOCK_BLOB_COMPACTION_DIR);    try (FSDataOutputStream stream = fs.create(path)) {      assertTrue(isBlockBlobAppendStreamWrapper(stream));      byte[] buffer = getRandomBytes();      stream.write(buffer);      validate(path, buffer, false);    }  }}