public class AuthenticatedURL {  private static final Logger LOG =      LoggerFactory.getLogger(AuthenticatedURL.class);    public static final String AUTH_COOKIE = "hadoop.auth";      private static class AuthCookieHandler extends CookieHandler {    private HttpCookie authCookie;    private Map<String, List<String>> cookieHeaders = Collections.emptyMap();    @Override    public synchronized Map<String, List<String>> get(URI uri,        Map<String, List<String>> requestHeaders) throws IOException {            getAuthCookie();      return cookieHeaders;    }    @Override    public void put(URI uri, Map<String, List<String>> responseHeaders) {      List<String> headers = responseHeaders.get("Set-Cookie");      if (headers != null) {        for (String header : headers) {          List<HttpCookie> cookies;          try {            cookies = HttpCookie.parse(header);          } catch (IllegalArgumentException iae) {                                                LOG.debug("Cannot parse cookie header, header = {}, reason = {} ",                header, iae.getMessage());            continue;          }          for (HttpCookie cookie : cookies) {            if (AUTH_COOKIE.equals(cookie.getName())) {              setAuthCookie(cookie);            }          }        }      }    }        private synchronized HttpCookie getAuthCookie() {      if (authCookie != null && authCookie.hasExpired()) {        setAuthCookie(null);      }      return authCookie;    }    private synchronized void setAuthCookie(HttpCookie cookie) {      final HttpCookie oldCookie = authCookie;            authCookie = null;      cookieHeaders = Collections.emptyMap();      boolean valid = cookie != null && !cookie.getValue().isEmpty() &&          !cookie.hasExpired();      if (valid) {                                long maxAge = cookie.getMaxAge();        if (maxAge != -1) {          cookie.setMaxAge(maxAge * 9/10);          valid = !cookie.hasExpired();        }      }      if (valid) {                        if (cookie.getVersion() == 0) {          String value = cookie.getValue();          if (!value.startsWith("\"")) {            value = "\"" + value + "\"";            cookie.setValue(value);          }        }        authCookie = cookie;        cookieHeaders = new HashMap<>();        cookieHeaders.put("Cookie", Arrays.asList(cookie.toString()));      }    }    private void setAuthCookieValue(String value) {      HttpCookie c = null;      if (value != null) {        c = new HttpCookie(AUTH_COOKIE, value);      }      setAuthCookie(c);    }  }    public static class Token {    private final AuthCookieHandler cookieHandler = new AuthCookieHandler();        public Token() {    }        public Token(String tokenStr) {      if (tokenStr == null) {        throw new IllegalArgumentException("tokenStr cannot be null");      }      set(tokenStr);    }        public boolean isSet() {      return cookieHandler.getAuthCookie() != null;    }        void set(String tokenStr) {      cookieHandler.setAuthCookieValue(tokenStr);    }        HttpURLConnection openConnection(URL url,        ConnectionConfigurator connConfigurator) throws IOException {                              final HttpURLConnection conn;      synchronized(CookieHandler.class) {        CookieHandler current = CookieHandler.getDefault();        CookieHandler.setDefault(cookieHandler);        try {          conn = (HttpURLConnection)url.openConnection();        } finally {          CookieHandler.setDefault(current);        }      }      if (connConfigurator != null) {        connConfigurator.configure(conn);      }      return conn;    }        @Override    public String toString() {      String value = "";      HttpCookie authCookie = cookieHandler.getAuthCookie();      if (authCookie != null) {        value = authCookie.getValue();        if (value.startsWith("\"")) {           value = value.substring(1, value.length()-1);        }      }      return value;    }  }  private static Class<? extends Authenticator> DEFAULT_AUTHENTICATOR = KerberosAuthenticator.class;    public static void setDefaultAuthenticator(Class<? extends Authenticator> authenticator) {    DEFAULT_AUTHENTICATOR = authenticator;  }    public static Class<? extends Authenticator> getDefaultAuthenticator() {    return DEFAULT_AUTHENTICATOR;  }  private Authenticator authenticator;  private ConnectionConfigurator connConfigurator;    public AuthenticatedURL() {    this(null);  }    public AuthenticatedURL(Authenticator authenticator) {    this(authenticator, null);  }    public AuthenticatedURL(Authenticator authenticator,                          ConnectionConfigurator connConfigurator) {    try {      this.authenticator = (authenticator != null) ? authenticator : DEFAULT_AUTHENTICATOR.newInstance();    } catch (Exception ex) {      throw new RuntimeException(ex);    }    this.connConfigurator = connConfigurator;    this.authenticator.setConnectionConfigurator(connConfigurator);  }    protected Authenticator getAuthenticator() {    return authenticator;  }    public HttpURLConnection openConnection(URL url, Token token) throws IOException, AuthenticationException {    if (url == null) {      throw new IllegalArgumentException("url cannot be NULL");    }    if (!url.getProtocol().equalsIgnoreCase("http") && !url.getProtocol().equalsIgnoreCase("https")) {      throw new IllegalArgumentException("url must be for a HTTP or HTTPS resource");    }    if (token == null) {      throw new IllegalArgumentException("token cannot be NULL");    }    authenticator.authenticate(url, token);            return token.openConnection(url, connConfigurator);  }    public static void injectToken(HttpURLConnection conn, Token token) {    HttpCookie authCookie = token.cookieHandler.getAuthCookie();    if (authCookie != null) {      conn.addRequestProperty("Cookie", authCookie.toString());    }  }    public static void extractToken(HttpURLConnection conn, Token token) throws IOException, AuthenticationException {    int respCode = conn.getResponseCode();    if (respCode == HttpURLConnection.HTTP_OK        || respCode == HttpURLConnection.HTTP_CREATED        || respCode == HttpURLConnection.HTTP_ACCEPTED) {                        token.cookieHandler.put(null, conn.getHeaderFields());    } else if (respCode == HttpURLConnection.HTTP_NOT_FOUND) {      LOG.trace("Setting token value to null ({}), resp={}", token, respCode);      token.set(null);      throw new FileNotFoundException(conn.getURL().toString());    } else {      LOG.trace("Setting token value to null ({}), resp={}", token, respCode);      token.set(null);      throw new AuthenticationException("Authentication failed" +          ", URL: " + conn.getURL() +          ", status: " + conn.getResponseCode() +          ", message: " + conn.getResponseMessage());    }  }}