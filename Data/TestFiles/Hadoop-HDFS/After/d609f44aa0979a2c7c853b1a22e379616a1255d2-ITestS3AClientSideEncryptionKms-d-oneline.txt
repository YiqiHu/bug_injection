public class ITestS3AClientSideEncryptionKms    extends ITestS3AClientSideEncryption {  private static final String KMS_KEY_WRAP_ALGO = "kms+context";  private static final String KMS_CONTENT_ENCRYPTION_ALGO = "AES/GCM/NoPadding";    @Override  protected Configuration createConfiguration() {    Configuration conf = super.createConfiguration();    S3ATestUtils.disableFilesystemCaching(conf);    return conf;  }  @Override  protected void maybeSkipTest() throws IOException {    skipIfEncryptionTestsDisabled(getConfiguration());        skipIfEncryptionNotSet(getConfiguration(), S3AEncryptionMethods.CSE_KMS);  }  @Override  protected void assertEncrypted(Path path) throws IOException {    Map<String, byte[]> fsXAttrs = getFileSystem().getXAttrs(path);    String xAttrPrefix = "header.";        assertEquals("Key wrap algo isn't same as expected", KMS_KEY_WRAP_ALGO,        processHeader(fsXAttrs,            xAttrPrefix + Headers.CRYPTO_KEYWRAP_ALGORITHM));            String keyId = getS3EncryptionKey(getTestBucketName(getConfiguration()),        getConfiguration());    Assertions.assertThat(processHeader(fsXAttrs,        xAttrPrefix + Headers.MATERIALS_DESCRIPTION))        .describedAs("Materials Description should contain the content "            + "encryption algo and should not contain the KMS keyID.")        .contains(KMS_CONTENT_ENCRYPTION_ALGO)        .doesNotContain(keyId);  }    private String processHeader(Map<String, byte[]> fsXAttrs,      String headerKey) {    return HeaderProcessing.decodeBytes(fsXAttrs.get(headerKey));  }}