public class TestDNS {  private static final Logger LOG = LoggerFactory.getLogger(TestDNS.class);  private static final String DEFAULT = "default";      private static final String DUMMY_HOSTNAME = "-DUMMY_HOSTNAME";  private static final String INVALID_DNS_SERVER = "0.0.0.0";    @Test  public void testGetLocalHost() throws Exception {    String hostname = DNS.getDefaultHost(DEFAULT);    assertNotNull(hostname);  }    @Test  public void testGetLocalHostIsFast() throws Exception {    String hostname1 = DNS.getDefaultHost(DEFAULT);    assertNotNull(hostname1);    String hostname2 = DNS.getDefaultHost(DEFAULT);    long t1 = Time.now();    String hostname3 = DNS.getDefaultHost(DEFAULT);    long t2 = Time.now();    assertEquals(hostname3, hostname2);    assertEquals(hostname2, hostname1);    long interval = t2 - t1;    assertTrue(        "Took too long to determine local host - caching is not working",        interval < 20000);  }    @Test  public void testLocalHostHasAnAddress() throws Exception {    assertNotNull(getLocalIPAddr());  }  private InetAddress getLocalIPAddr() throws UnknownHostException {    String hostname = DNS.getDefaultHost(DEFAULT);    InetAddress localhost = InetAddress.getByName(hostname);    return localhost;  }    @Test  public void testNullInterface() throws Exception {    String host = DNS.getDefaultHost(null);      Assertions.assertThat(host).isEqualTo(DNS.getDefaultHost(DEFAULT));    try {      String ip = DNS.getDefaultIP(null);      fail("Expected a NullPointerException, got " + ip);    } catch (NullPointerException npe) {          }  }    @Test  public void testNullDnsServer() throws Exception {    String host = DNS.getDefaultHost(getLoopbackInterface(), null);    Assertions.assertThat(host)        .isEqualTo(DNS.getDefaultHost(getLoopbackInterface()));  }    @Test  public void testDefaultDnsServer() throws Exception {    String host = DNS.getDefaultHost(getLoopbackInterface(), DEFAULT);    Assertions.assertThat(host)        .isEqualTo(DNS.getDefaultHost(getLoopbackInterface()));  }    @Test  public void testIPsOfUnknownInterface() throws Exception {    try {      DNS.getIPs("name-of-an-unknown-interface");      fail("Got an IP for a bogus interface");    } catch (UnknownHostException e) {      assertEquals("No such interface name-of-an-unknown-interface",          e.getMessage());    }  }    @Test  public void testGetIPWithDefault() throws Exception {    String[] ips = DNS.getIPs(DEFAULT);    assertEquals("Should only return 1 default IP", 1, ips.length);    assertEquals(getLocalIPAddr().getHostAddress(), ips[0].toString());    String ip = DNS.getDefaultIP(DEFAULT);    assertEquals(ip, ips[0].toString());  }    @Test  public void testRDNS() throws Exception {    InetAddress localhost = getLocalIPAddr();    try {      String s = DNS.reverseDns(localhost, null);      LOG.info("Local reverse DNS hostname is " + s);    } catch (NameNotFoundException | CommunicationException | ServiceUnavailableException e) {      if (!localhost.isLinkLocalAddress() || localhost.isLoopbackAddress()) {                        LOG.info("Reverse DNS failing as due to incomplete networking", e);        LOG.info("Address is " + localhost                + " Loopback=" + localhost.isLoopbackAddress()                + " Linklocal=" + localhost.isLinkLocalAddress());      }      Assume.assumeNoException(e);    }  }    @Test (timeout=60000)  public void testLookupWithHostsFallback() throws Exception {    assumeNotWindows();    final String oldHostname = DNS.getCachedHostname();    try {      DNS.setCachedHostname(DUMMY_HOSTNAME);      String hostname = DNS.getDefaultHost(          getLoopbackInterface(), INVALID_DNS_SERVER, true);            Assertions.assertThat(hostname).isNotEqualTo(DUMMY_HOSTNAME);    } finally {            DNS.setCachedHostname(oldHostname);    }  }    @Test(timeout=60000)  public void testLookupWithoutHostsFallback() throws Exception {    final String oldHostname = DNS.getCachedHostname();    try {      DNS.setCachedHostname(DUMMY_HOSTNAME);      String hostname = DNS.getDefaultHost(          getLoopbackInterface(), INVALID_DNS_SERVER, false);                  Assertions.assertThat(hostname).isEqualTo(DUMMY_HOSTNAME);    } finally {            DNS.setCachedHostname(oldHostname);    }  }  private String getLoopbackInterface() throws SocketException {    return NetworkInterface.getByInetAddress(        InetAddress.getLoopbackAddress()).getName();  }    @Test  public void testLocalhostResolves() throws Exception {    InetAddress localhost = InetAddress.getByName("localhost");    assertNotNull("localhost is null", localhost);    LOG.info("Localhost IPAddr is " + localhost.toString());  }}