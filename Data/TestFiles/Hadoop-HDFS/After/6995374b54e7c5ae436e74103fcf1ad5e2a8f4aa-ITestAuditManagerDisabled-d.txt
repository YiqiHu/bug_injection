

package org.apache.hadoop.fs.s3a.audit;

import org.assertj.core.api.Assertions;
import org.junit.Test;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.s3a.S3AFileSystem;
import org.apache.hadoop.fs.s3a.audit.impl.NoopAuditManagerS3A;
import org.apache.hadoop.fs.s3a.performance.AbstractS3ACostTest;

import static org.apache.hadoop.fs.s3a.audit.AuditTestSupport.NOOP_SPAN;
import static org.apache.hadoop.fs.s3a.audit.AuditTestSupport.resetAuditOptions;
import static org.apache.hadoop.fs.s3a.audit.S3AAuditConstants.AUDIT_ENABLED;


public class ITestAuditManagerDisabled extends AbstractS3ACostTest {

  public ITestAuditManagerDisabled() {
    super(true);
  }

  @Override
  public Configuration createConfiguration() {
    Configuration conf = super.createConfiguration();
    resetAuditOptions(conf);
    conf.setBoolean(AUDIT_ENABLED, false);
    return conf;
  }

  
  @Test
  public void testAuditorDisabled() {

    final S3AFileSystem fs = getFileSystem();
    final AuditManagerS3A auditManager = fs.getAuditManager();

    Assertions.assertThat(auditManager)
        .isInstanceOf(NoopAuditManagerS3A.class);
  }

  
  @Test
  public void testAuditSpansAreAllTheSame() throws Throwable {

    final S3AFileSystem fs = getFileSystem();
    final AuditSpanS3A span1 = fs.createSpan("span1", null, null);
    final AuditSpanS3A span2 = fs.createSpan("span2", null, null);
    Assertions.assertThat(span1)
        .describedAs("audit span 1")
        .isSameAs(NOOP_SPAN);
    Assertions.assertThat(span2)
        .describedAs("audit span 2")
        .isSameAs(span1);
  }
}
