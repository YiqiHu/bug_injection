diff --git a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/JobHistoryServer.java b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/JobHistoryServer.java
index 9ea140fa3166..20854f95ad5f 100644
--- a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/JobHistoryServer.java
+++ b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/JobHistoryServer.java
@@ -64,7 +64,6 @@ public class JobHistoryServer extends CompositeService {
 
   private static final Logger LOG =
       LoggerFactory.getLogger(JobHistoryServer.class);
-  protected HistoryContext historyContext;
   private HistoryClientService clientService;
   private JobHistory jobHistoryService;
   protected JHSDelegationTokenSecretManager jhsDTSecretManager;
@@ -128,7 +127,6 @@ protected void serviceInit(Configuration conf) throws Exception {
       throw new YarnRuntimeException("History Server Failed to login", ie);
     }
     jobHistoryService = new JobHistory();
-    historyContext = (HistoryContext)jobHistoryService;
     stateStore = createStateStore(conf);
     this.jhsDTSecretManager = createJHSSecretManager(conf, stateStore);
     clientService = createHistoryClientService();
@@ -152,8 +150,7 @@ protected void serviceInit(Configuration conf) throws Exception {
 
   @VisibleForTesting
   protected HistoryClientService createHistoryClientService() {
-    return new HistoryClientService(historyContext, 
-        this.jhsDTSecretManager);
+    return new HistoryClientService(jobHistoryService, this.jhsDTSecretManager);
   }
 
   protected JHSDelegationTokenSecretManager createJHSSecretManager(
diff --git a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapreduce/security/TestJHSSecurity.java b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapreduce/security/TestJHSSecurity.java
index d8c4b2a38411..6115c590d5fd 100644
--- a/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapreduce/security/TestJHSSecurity.java
+++ b/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/test/java/org/apache/hadoop/mapreduce/security/TestJHSSecurity.java
@@ -37,7 +37,6 @@
 import org.apache.hadoop.mapreduce.v2.api.protocolrecords.GetDelegationTokenRequest;
 import org.apache.hadoop.mapreduce.v2.api.protocolrecords.GetJobReportRequest;
 import org.apache.hadoop.mapreduce.v2.api.protocolrecords.RenewDelegationTokenRequest;
-import org.apache.hadoop.mapreduce.v2.hs.HistoryClientService;
 import org.apache.hadoop.mapreduce.v2.hs.HistoryServerStateStoreService;
 import org.apache.hadoop.mapreduce.v2.hs.JHSDelegationTokenSecretManager;
 import org.apache.hadoop.mapreduce.v2.hs.JobHistoryServer;
@@ -92,22 +91,10 @@ protected void doSecureLogin(Configuration conf) throws IOException {
         @Override
         protected JHSDelegationTokenSecretManager createJHSSecretManager(
             Configuration conf, HistoryServerStateStoreService store) {
-          return new JHSDelegationTokenSecretManager(initialInterval, 
+          return new JHSDelegationTokenSecretManager(initialInterval,
               maxLifetime, renewInterval, 3600000, store);
         }
-
-        @Override
-        protected HistoryClientService createHistoryClientService() {
-          return new HistoryClientService(historyContext, 
-            this.jhsDTSecretManager) {
-            @Override
-            protected void initializeWebApp(Configuration conf) {
-              // Don't need it, skip.;
-              }
-          };
-        }
       };
-//      final JobHistoryServer jobHistoryServer = jhServer;
       jobHistoryServer.init(conf);
       jobHistoryServer.start();
       final MRClientProtocol hsService = jobHistoryServer.getClientService()
