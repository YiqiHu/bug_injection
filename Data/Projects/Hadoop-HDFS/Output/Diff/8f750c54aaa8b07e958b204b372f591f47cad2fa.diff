diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-ui/src/main/webapp/app/initializers/loader.js b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-ui/src/main/webapp/app/initializers/loader.js
index bf544ecd51ec..5a697eaf692e 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-ui/src/main/webapp/app/initializers/loader.js
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-ui/src/main/webapp/app/initializers/loader.js
@@ -62,6 +62,10 @@ function getYarnHttpProtocolScheme(rmhost, application) {
   return getConfigFromYarn(rmhost, application, 'yarn.http.policy');
 }
 
+function getYarnTimelineEnabled(rmhost, application) {
+  return getConfigFromYarn(rmhost, application, 'yarn.timeline-service.enabled');
+}
+
 function getTimeLineURL(rmhost, isHttpsSchemeEnabled) {
   var url = window.location.protocol + '//' +
     (ENV.hosts.localBaseAddress? ENV.hosts.localBaseAddress + '/' : '') + rmhost;
@@ -192,6 +196,10 @@ function updateConfigs(application) {
   Ember.Logger.log("NodeMananger port: " + nodeManagerPort);
   ENV.nodeManagerPort = nodeManagerPort;
 
+  var timelineServiceEnabled = getYarnTimelineEnabled(rmhost, application);
+  Ember.Logger.log("Timeline Service enabled: " + timelineServiceEnabled);
+  ENV.timelineServiceEnabled = (timelineServiceEnabled.toLowerCase() === 'true');
+
   if (!ENV.hosts.jhsAddress) {
     var jhsAddress = getJHSURL(rmhost, application, isHttpsSchemeEnabled);
     jhsAddress = transformURL(jhsAddress, hostname);
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-ui/src/main/webapp/app/routes/application.js b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-ui/src/main/webapp/app/routes/application.js
index 93631e0bc0dc..7c3b311f4679 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-ui/src/main/webapp/app/routes/application.js
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-ui/src/main/webapp/app/routes/application.js
@@ -21,7 +21,7 @@ import AbstractRoute from './abstract';
 
 export default AbstractRoute.extend({
   model() {
-    return Ember.RSVP.hash({
+    let promises = {
       clusterInfo: this.store.findAll('ClusterInfo', {reload: true}).catch(function() {
         return null;
       }),
@@ -30,11 +30,15 @@ export default AbstractRoute.extend({
       }),
       jhsHealth: this.store.queryRecord('jhs-health', {}).catch(function() {
         return null;
-      }),
-      timelineHealth: this.store.queryRecord('timeline-health', {}).catch(function() {
-        return null;
       })
-    });
+    };
+
+    if (ENV.timelineServiceEnabled) {
+      promises.timelineHealth = this.store.queryRecord('timeline-health', {}).catch(function() {
+        return null;
+      });
+    }
+    return Ember.RSVP.hash(promises);
   },
 
   actions: {
@@ -62,7 +66,9 @@ export default AbstractRoute.extend({
   unloadAll: function() {
     this.store.unloadAll('ClusterInfo');
     this.store.unloadAll('cluster-user-info');
-    this.store.unloadAll('timeline-health');
+    if (ENV.timelineServiceEnabled) {
+      this.store.unloadAll('timeline-health');
+    }
     this.store.unloadAll('jhs-health');
   },
 });
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-ui/src/main/webapp/app/routes/yarn-app/logs.js b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-ui/src/main/webapp/app/routes/yarn-app/logs.js
index 55c52cd959c4..888ab7cc4833 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-ui/src/main/webapp/app/routes/yarn-app/logs.js
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-ui/src/main/webapp/app/routes/yarn-app/logs.js
@@ -25,7 +25,7 @@ export default AbstractRoute.extend(AppAttemptMixin, {
     const { app_id } = this.paramsFor('yarn-app');
     const { service } = param;
     transition.send('updateBreadcrumbs', app_id, service, [{text: 'Logs'}]);
-    return Ember.RSVP.hash({
+    let promises = {
       appId: app_id,
       serviceName: service,
       attempts: this.fetchAttemptListFromRMorATS(app_id, this.store).catch(function() {
@@ -36,11 +36,15 @@ export default AbstractRoute.extend(AppAttemptMixin, {
         Ember.Logger.log("jhs-health querying failed");
         Ember.Logger.log(error);
         return null;
-      }),
-      timelineHealth: this.store.queryRecord('timeline-health', {}).catch(function() {
-        return null;
       })
-    });
+    };
+
+    if (ENV.timelineServiceEnabled) {
+      promises.timelineHealth = this.store.queryRecord('timeline-health', {}).catch(function() {
+        return null;
+      });
+    }
+    return Ember.RSVP.hash(promises);
   },
 
   activate() {
