diff --git a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystemOverloadScheme.java b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystemOverloadScheme.java
index 5353e93b6f13..60d14d385160 100644
--- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystemOverloadScheme.java
+++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystemOverloadScheme.java
@@ -97,7 +97,7 @@
  * the mount table name.
  * (3) If there are no mount links configured with the initializing uri's
  * hostname as the mount table name, then it will automatically consider the
- * current uri as fallback( ex: fs.viewfs.mounttable.<mycluster>.linkFallBack)
+ * current uri as fallback( ex: fs.viewfs.mounttable.<mycluster>.linkFallback)
  * target fs uri.
  *****************************************************************************/
 @InterfaceAudience.LimitedPrivate({ "MapReduce", "HBase", "Hive" })
@@ -354,4 +354,9 @@ public FileSystem getFallbackFileSystem() {
         .getMyFs();
   }
 
+  @Override
+  @InterfaceAudience.LimitedPrivate("HDFS")
+  public URI canonicalizeUri(URI uri) {
+    return super.canonicalizeUri(uri);
+  }
 }
\ No newline at end of file
diff --git a/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/ViewDistributedFileSystem.java b/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/ViewDistributedFileSystem.java
index 2894a244a470..70ba886b978f 100644
--- a/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/ViewDistributedFileSystem.java
+++ b/hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/ViewDistributedFileSystem.java
@@ -1072,16 +1072,7 @@ protected URI canonicalizeUri(URI uri) {
       return super.canonicalizeUri(uri);
     }
 
-    ViewFileSystemOverloadScheme.MountPathInfo<FileSystem> mountPathInfo = null;
-    try {
-      mountPathInfo = this.vfs.getMountPathInfo(new Path(uri), getConf());
-    } catch (IOException e) {
-      LOGGER.warn("Failed to resolve the uri as mount path", e);
-      return null;
-    }
-    checkDFS(mountPathInfo.getTargetFs(), "canonicalizeUri");
-    return ((DistributedFileSystem) mountPathInfo.getTargetFs())
-        .canonicalizeUri(uri);
+    return vfs.canonicalizeUri(uri);
   }
 
   @Override
