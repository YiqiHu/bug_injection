diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/IntelFpgaOpenclPlugin.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/IntelFpgaOpenclPlugin.java
index b3ceb58383cd..42ee676932f4 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/IntelFpgaOpenclPlugin.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/IntelFpgaOpenclPlugin.java
@@ -238,8 +238,10 @@ public String retrieveIPfilePath(String id, String dstDir,
           .findFirst();
 
       if (aocxPath.isPresent()) {
-        ipFilePath = aocxPath.get().toUri().toString();
-        LOG.debug("Found: {}", ipFilePath);
+        ipFilePath = aocxPath.get().toString();
+        LOG.info("Found: {}", ipFilePath);
+      } else {
+        LOG.warn("Requested IP file not found");
       }
     } else {
       LOG.warn("Localized resource is null!");
@@ -249,8 +251,7 @@ public String retrieveIPfilePath(String id, String dstDir,
   }
 
   private boolean matchesIpid(Path p, String id) {
-    return p.getName().toLowerCase().equals(id.toLowerCase())
-        && p.getName().endsWith(".aocx");
+    return p.getName().toLowerCase().equals(id.toLowerCase() + ".aocx");
   }
 
   /**
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/TestIntelFpgaOpenclPlugin.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/TestIntelFpgaOpenclPlugin.java
new file mode 100644
index 000000000000..663df5e26cbc
--- /dev/null
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/fpga/TestIntelFpgaOpenclPlugin.java
@@ -0,0 +1,81 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.fpga;
+
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.curator.shaded.com.google.common.collect.Lists;
+import org.apache.hadoop.fs.Path;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+
+public class TestIntelFpgaOpenclPlugin {
+  private IntelFpgaOpenclPlugin plugin;
+
+  @Before
+  public void setup() {
+    plugin = new IntelFpgaOpenclPlugin();
+  }
+
+  @Test
+  public void testLocalizedIPfileFound() {
+    Map<Path, List<String>> resources = createResources();
+
+    String path = plugin.retrieveIPfilePath("fpga", "workDir", resources);
+
+    assertEquals("Retrieved IP file path", "/test/fpga.aocx", path);
+  }
+
+  @Test
+  public void testLocalizedIPfileNotFound() {
+    Map<Path, List<String>> resources = createResources();
+
+    String path = plugin.retrieveIPfilePath("dummy", "workDir", resources);
+
+    assertNull("Retrieved IP file path", path);
+  }
+
+  @Test
+  public void testLocalizedIpfileNotFoundWithNoLocalResources() {
+    String path = plugin.retrieveIPfilePath("fpga", "workDir", null);
+
+    assertNull("Retrieved IP file path", path);
+  }
+
+  @Test
+  public void testIPfileNotDefined() {
+    Map<Path, List<String>> resources = createResources();
+
+    String path = plugin.retrieveIPfilePath(null, "workDir", resources);
+
+    assertNull("Retrieved IP file path", path);
+  }
+
+  private Map<Path, List<String>> createResources() {
+    Map<Path, List<String>> resources = new HashMap<>();
+    resources.put(new Path("/test/fpga.aocx"),
+        Lists.newArrayList("/symlinked/fpga.aocx"));
+    return resources;
+  }
+}
