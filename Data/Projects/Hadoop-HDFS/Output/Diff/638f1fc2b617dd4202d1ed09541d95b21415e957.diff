diff --git a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java
index 1082e2815ae1..ba29f74cc5ca 100644
--- a/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java
+++ b/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java
@@ -72,12 +72,7 @@ public class RawLocalFileSystem extends FileSystem {
   public static void useStatIfAvailable() {
     useDeprecatedFileStatus = !Stat.isAvailable();
   }
-
-  @VisibleForTesting
-  static void setUseDeprecatedFileStatus(boolean useDeprecatedFileStatus) {
-    RawLocalFileSystem.useDeprecatedFileStatus = useDeprecatedFileStatus;
-  }
-
+  
   public RawLocalFileSystem() {
     workingDir = getInitialWorkingDirectory();
   }
@@ -705,8 +700,8 @@ private static long getLastAccessTime(File f) throws IOException {
     DeprecatedRawLocalFileStatus(File f, long defaultBlockSize, FileSystem fs)
       throws IOException {
       super(f.length(), f.isDirectory(), 1, defaultBlockSize,
-          Files.getLastModifiedTime(f.toPath()).toMillis(),
-          getLastAccessTime(f),null, null, null,
+          f.lastModified(), getLastAccessTime(f),
+          null, null, null,
           new Path(f.getPath()).makeQualified(fs.getUri(),
             fs.getWorkingDirectory()));
     }
diff --git a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestRawLocalFileSystemContract.java b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestRawLocalFileSystemContract.java
index cb45c9ef8154..b51419d8c53f 100644
--- a/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestRawLocalFileSystemContract.java
+++ b/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/fs/TestRawLocalFileSystemContract.java
@@ -203,28 +203,4 @@ public void testPermission() throws Exception {
     }
   }
 
-  @Test
-  public void testMTimeAtime() throws IOException {
-    RawLocalFileSystem.setUseDeprecatedFileStatus(true);
-    try {
-      Path testDir = getTestBaseDir();
-      String testFilename = "testmtime";
-      Path path = new Path(testDir, testFilename);
-      Path file = new Path(path, "file");
-      fs.create(file);
-      long now = System.currentTimeMillis();
-      long mtime = (now % 1000 == 0) ? now + 1 : now;
-      long atime = (now % 1000 == 0) ? now + 2 : now;
-      fs.setTimes(file, mtime, atime);
-      FileStatus fileStatus = fs.getFileStatus(file);
-      if (!Shell.MAC) {
-        // HADOOP-17306 ; Skip MacOS because HFS+ does not support
-        // milliseconds for mtime.
-        assertEquals(mtime, fileStatus.getModificationTime());
-      }
-      assertEquals(atime, fileStatus.getAccessTime());
-    } finally {
-      RawLocalFileSystem.useStatIfAvailable();
-    }
-  }
 }
