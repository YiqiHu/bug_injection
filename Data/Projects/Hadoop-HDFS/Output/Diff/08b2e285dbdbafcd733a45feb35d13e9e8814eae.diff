diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java
index 50ddcfce43dd..46812f45d644 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java
@@ -693,7 +693,7 @@ public synchronized void recoverContainer(SchedulerNode node,
   /**
    * Reserve a spot for {@code container} on this {@code node}. If
    * the container is {@code alreadyReserved} on the node, simply
-   * update relevant bookeeping. This dispatches ro relevant handlers
+   * update relevant bookkeeping. This dispatches ro relevant handlers
    * in {@link FSSchedulerNode}..
    * return whether reservation was possible with the current threshold limits
    */
@@ -1393,12 +1393,12 @@ private void updateAMDiagnosticMsg(Resource resource, String reason) {
       return;
     }
 
-    StringBuilder diagnosticMessageBldr = new StringBuilder();
-    diagnosticMessageBldr.append(" (Resource request: ")
+    StringBuilder diagnosticMessage = new StringBuilder();
+    diagnosticMessage.append(" (Resource request: ")
         .append(resource)
         .append(reason);
     updateAMContainerDiagnostics(AMState.INACTIVATED,
-        diagnosticMessageBldr.toString());
+        diagnosticMessage.toString());
   }
 
   /*
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/MaxRunningAppsEnforcer.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/MaxRunningAppsEnforcer.java
index b3416074271c..0a99d0777b19 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/MaxRunningAppsEnforcer.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/MaxRunningAppsEnforcer.java
@@ -146,7 +146,7 @@ public void trackNonRunnableApp(FSAppAttempt app) {
 
   /**
    * This is called after reloading the allocation configuration when the
-   * scheduler is reinitilized
+   * scheduler is reinitialized
    *
    * Checks to see whether any non-runnable applications become runnable
    * now that the max running apps of given queue has been changed
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java
index 9f07bb8420e5..5c2664483fcf 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java
@@ -403,7 +403,7 @@ private void setChildResourceLimits(FSParentQueue parent, FSQueue child,
     // Ad hoc queues do not exist in the configured queues map
     if (!configuredQueues.get(FSQueueType.LEAF).contains(child.getName()) &&
         !configuredQueues.get(FSQueueType.PARENT).contains(child.getName())) {
-      // For ad hoc queues, set their max reource allocations based on
+      // For ad hoc queues, set their max resource allocations based on
       // their parents' default child settings.
       ConfigurableResource maxChild = parent.getMaxChildQueueResource();
 
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/VisitedResourceRequestTracker.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/VisitedResourceRequestTracker.java
index 7dac0c3d14d4..9c053f433791 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/VisitedResourceRequestTracker.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/VisitedResourceRequestTracker.java
@@ -77,11 +77,11 @@ boolean visit(ResourceRequest rr) {
 
   private class TrackerPerPriorityResource {
     private Set<String> racksWithNodesVisited = new HashSet<>();
-    private Set<String> racksVisted = new HashSet<>();
+    private Set<String> racksVisited = new HashSet<>();
     private boolean anyVisited;
 
     private boolean visitAny() {
-      if (racksVisted.isEmpty() && racksWithNodesVisited.isEmpty()) {
+      if (racksVisited.isEmpty() && racksWithNodesVisited.isEmpty()) {
         anyVisited = true;
       }
       return anyVisited;
@@ -91,13 +91,13 @@ private boolean visitRack(String rackName) {
       if (anyVisited || racksWithNodesVisited.contains(rackName)) {
         return false;
       } else {
-        racksVisted.add(rackName);
+        racksVisited.add(rackName);
         return true;
       }
     }
 
     private boolean visitNode(String rackName) {
-      if (anyVisited || racksVisted.contains(rackName)) {
+      if (anyVisited || racksVisited.contains(rackName)) {
         return false;
       } else {
         racksWithNodesVisited.add(rackName);
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/DominantResourceFairnessPolicy.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/DominantResourceFairnessPolicy.java
index 83af8b64945b..fe83ef81e07e 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/DominantResourceFairnessPolicy.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/policies/DominantResourceFairnessPolicy.java
@@ -147,7 +147,7 @@ public void setFSContext(FSContext fsContext) {
      * @return &lt; 0, 0, or &gt; 0 if the first item is less than, equal to,
      * or greater than the second item, respectively
      */
-    protected int compareAttribrutes(Schedulable s1, Schedulable s2) {
+    protected int compareAttributes(Schedulable s1, Schedulable s2) {
       int res = (int) Math.signum(s1.getStartTime() - s2.getStartTime());
 
       if (res == 0) {
@@ -219,7 +219,7 @@ public int compare(Schedulable s1, Schedulable s2) {
       }
 
       if (res == 0) {
-        res = compareAttribrutes(s1, s2);
+        res = compareAttributes(s1, s2);
       }
 
       return res;
@@ -423,7 +423,7 @@ public int compare(Schedulable s1, Schedulable s2) {
       }
 
       if (res == 0) {
-        res = compareAttribrutes(s1, s2);
+        res = compareAttributes(s1, s2);
       }
 
       return res;
